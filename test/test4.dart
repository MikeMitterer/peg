// This code was generated by a tool.
// Processing tool available at https://github.com/mezoni/peg

import 'package:peg/expressions.dart';
import 'package:peg/grammar.dart';
import 'package:peg/production_rule.dart';

void main() {
  var text = " A <- [a-z]'";
  var parser = new PegParser(text);
  parser.parse_Grammar();
}

int _escape(int c) {
  switch (c) {
    case 110:
      return 10;
    case 114:
      return 13;
    case 116:
      return 9;
  }
  return c;
}

Expression _prefix(dynamic prefix, Expression expression, String action) {
  switch (prefix) {
    case '&':
      expression = new AndPredicateExpression(expression);
      break;
    case '!':
      expression = new NotPredicateExpression(expression);
      break;
  }
  expression.action = action;
  return expression;
}

int _runeAt(String string, int index) => string.runes.toList()[index];

Expression _suffix(String suffix, Expression expression) {
  switch (suffix) {
    case '?':
      return new OptionalExpression(expression);
    case '*':
      return new ZeroOrMoreExpression(expression);
    case '+':
      return new OneOrMoreExpression(expression);
  }
  return expression;
}
class PegParser {
  String _input;
  int _inputLen;
  List<int> _grammarCode = [
      9,
      475,
      0,
      11,
      467,
      0,
      10,
      9,
      0,
      9,
      54,
      0,
      12,
      15,
      0,
      13,
      18,
      0,
      9,
      48,
      0,
      12,
      24,
      0,
      10,
      27,
      0,
      9,
      21,
      0,
      12,
      33,
      0,
      3,
      0,
      0,
      12,
      39,
      0,
      10,
      42,
      0,
      9,
      14,
      0,
      12,
      48,
      0,
      5,
      5,
      0,
      12,
      54,
      0,
      3,
      6,
      0,
      12,
      60,
      0,
      10,
      63,
      0,
      9,
      41,
      0,
      11,
      35,
      0,
      2,
      25,
      0,
      13,
      75,
      0,
      9,
      31,
      0,
      11,
      26,
      0,
      6,
      84,
      0,
      10,
      42,
      0,
      1,
      0,
      0,
      8,
      93,
      0,
      10,
      42,
      0,
      8,
      99,
      0,
      10,
      102,
      0,
      9,
      77,
      0,
      11,
      70,
      0,
      5,
      58,
      0,
      13,
      114,
      0,
      10,
      117,
      0,
      9,
      65,
      0,
      11,
      60,
      0,
      6,
      126,
      0,
      5,
      59,
      0,
      1,
      0,
      0,
      5,
      69,
      0,
      10,
      9,
      0,
      8,
      141,
      0,
      10,
      144,
      0,
      9,
      114,
      0,
      11,
      107,
      0,
      2,
      81,
      0,
      13,
      156,
      0,
      10,
      159,
      0,
      9,
      102,
      0,
      12,
      165,
      0,
      10,
      168,
      0,
      9,
      91,
      0,
      11,
      84,
      0,
      2,
      82,
      0,
      13,
      180,
      0,
      10,
      159,
      0,
      2,
      83,
      0,
      10,
      9,
      0,
      11,
      96,
      0,
      6,
      195,
      0,
      2,
      95,
      0,
      1,
      0,
      0,
      2,
      106,
      0,
      10,
      9,
      0,
      7,
      210,
      0,
      10,
      213,
      0,
      9,
      457,
      0,
      11,
      451,
      0,
      10,
      222,
      0,
      9,
      147,
      0,
      11,
      141,
      0,
      10,
      231,
      0,
      9,
      127,
      0,
      12,
      237,
      0,
      3,
      118,
      0,
      13,
      243,
      0,
      10,
      246,
      0,
      9,
      137,
      0,
      12,
      252,
      0,
      10,
      231,
      0,
      12,
      258,
      0,
      3,
      131,
      0,
      10,
      9,
      0,
      10,
      267,
      0,
      9,
      157,
      0,
      11,
      152,
      0,
      5,
      151,
      0,
      10,
      9,
      0,
      10,
      282,
      0,
      9,
      447,
      0,
      11,
      442,
      0,
      10,
      291,
      0,
      9,
      419,
      0,
      12,
      297,
      0,
      7,
      300,
      0,
      10,
      303,
      0,
      9,
      413,
      0,
      11,
      407,
      0,
      8,
      312,
      0,
      9,
      184,
      0,
      12,
      318,
      0,
      10,
      321,
      0,
      9,
      167,
      0,
      11,
      162,
      0,
      2,
      161,
      0,
      10,
      9,
      0,
      12,
      336,
      0,
      10,
      339,
      0,
      9,
      177,
      0,
      11,
      172,
      0,
      2,
      171,
      0,
      10,
      9,
      0,
      10,
      354,
      0,
      9,
      403,
      0,
      11,
      398,
      0,
      10,
      363,
      0,
      9,
      356,
      0,
      11,
      188,
      0,
      10,
      222,
      0,
      6,
      375,
      0,
      10,
      267,
      0,
      11,
      211,
      0,
      10,
      384,
      0,
      9,
      197,
      0,
      11,
      192,
      0,
      2,
      191,
      0,
      10,
      9,
      0,
      10,
      282,
      0,
      10,
      402,
      0,
      9,
      207,
      0,
      11,
      202,
      0,
      2,
      201,
      0,
      10,
      9,
      0,
      12,
      417,
      0,
      10,
      420,
      0,
      9,
      301,
      0,
      11,
      276,
      0,
      2,
      215,
      0,
      13,
      432,
      0,
      9,
      271,
      0,
      11,
      266,
      0,
      6,
      441,
      0,
      2,
      216,
      0,
      10,
      447,
      0,
      9,
      262,
      0,
      11,
      233,
      0,
      2,
      217,
      0,
      3,
      218,
      0,
      12,
      462,
      0,
      10,
      465,
      0,
      9,
      249,
      0,
      11,
      244,
      0,
      5,
      236,
      0,
      7,
      477,
      0,
      3,
      237,
      0,
      11,
      254,
      0,
      6,
      486,
      0,
      2,
      253,
      0,
      6,
      492,
      0,
      10,
      42,
      0,
      1,
      0,
      0,
      2,
      275,
      0,
      10,
      9,
      0,
      11,
      293,
      0,
      2,
      281,
      0,
      13,
      513,
      0,
      9,
      288,
      0,
      11,
      283,
      0,
      6,
      522,
      0,
      2,
      282,
      0,
      10,
      447,
      0,
      2,
      292,
      0,
      10,
      9,
      0,
      12,
      537,
      0,
      10,
      540,
      0,
      9,
      336,
      0,
      11,
      329,
      0,
      2,
      305,
      0,
      13,
      552,
      0,
      9,
      324,
      0,
      11,
      319,
      0,
      6,
      561,
      0,
      2,
      306,
      0,
      10,
      567,
      0,
      9,
      315,
      0,
      11,
      308,
      0,
      10,
      447,
      0,
      2,
      307,
      0,
      10,
      447,
      0,
      12,
      585,
      0,
      10,
      447,
      0,
      2,
      328,
      0,
      10,
      9,
      0,
      12,
      597,
      0,
      10,
      600,
      0,
      9,
      346,
      0,
      11,
      341,
      0,
      2,
      340,
      0,
      10,
      9,
      0,
      8,
      615,
      0,
      9,
      394,
      0,
      12,
      621,
      0,
      10,
      624,
      0,
      9,
      366,
      0,
      11,
      361,
      0,
      2,
      360,
      0,
      10,
      9,
      0,
      12,
      639,
      0,
      10,
      642,
      0,
      9,
      376,
      0,
      11,
      371,
      0,
      2,
      370,
      0,
      10,
      9,
      0,
      12,
      657,
      0,
      10,
      660,
      0,
      9,
      386,
      0,
      11,
      381,
      0,
      2,
      380,
      0,
      10,
      9,
      0,
      8,
      675,
      0,
      10,
      168,
      0,
      13,
      681,
      0,
      9,
      438,
      0,
      11,
      433,
      0,
      10,
      690,
      0,
      9,
      429,
      0,
      11,
      424,
      0,
      2,
      423,
      0,
      10,
      9,
      0,
      10,
      291,
      0,
      10,
      708,
      0,
      9,
      463,
      0,
      12,
      714,
      0,
      6,
      717,
      0,
      1,
      0,
      0];
  List<int> _grammarData = [
      2,
      9,
      9,
      32,
      32,
      "\r\n",
      2,
      10,
      10,
      13,
      13,
      2,
      45,
      51,
      1,
      0,
      1114111,
      11,
      2,
      30,
      36,
      1,
      0,
      1114111,
      18,
      "#",
      2,
      81,
      87,
      1,
      78,
      1,
      0,
      1114111,
      29,
      3,
      69,
      72,
      90,
      1,
      66,
      1,
      0,
      1114111,
      39,
      2,
      21,
      57,
      1,
      0,
      1114111,
      45,
      1,
      12,
      1,
      0,
      1114111,
      52,
      "%{",
      "}%",
      2,
      123,
      129,
      1,
      120,
      1,
      0,
      1114111,
      63,
      "}%",
      4,
      108,
      111,
      132,
      135,
      1,
      105,
      1,
      0,
      1114111,
      75,
      "{",
      "{",
      "}",
      4,
      174,
      177,
      183,
      186,
      1,
      171,
      1,
      0,
      1114111,
      89,
      "}",
      2,
      192,
      198,
      2,
      162,
      189,
      1,
      0,
      1114111,
      99,
      "}",
      4,
      150,
      153,
      201,
      204,
      1,
      147,
      1,
      0,
      1114111,
      112,
      3,
      65,
      90,
      95,
      95,
      97,
      122,
      1,
      234,
      1,
      0,
      1114111,
      125,
      1,
      48,
      57,
      2,
      249,
      255,
      1,
      0,
      1114111,
      134,
      3,
      228,
      240,
      261,
      1,
      225,
      1,
      0,
      1114111,
      145,
      "<-",
      2,
      273,
      276,
      1,
      270,
      1,
      0,
      1114111,
      155,
      "&",
      2,
      327,
      330,
      1,
      324,
      1,
      0,
      1114111,
      165,
      "!",
      2,
      345,
      348,
      1,
      342,
      1,
      0,
      1114111,
      175,
      2,
      315,
      333,
      1,
      0,
      1114111,
      181,
      2,
      369,
      372,
      "(",
      2,
      390,
      393,
      1,
      387,
      1,
      0,
      1114111,
      195,
      ")",
      2,
      408,
      411,
      1,
      405,
      1,
      0,
      1114111,
      205,
      3,
      381,
      396,
      399,
      "\'",
      "\'",
      "\\",
      7,
      34,
      34,
      39,
      39,
      45,
      45,
      91,
      93,
      110,
      110,
      114,
      114,
      116,
      116,
      2,
      453,
      456,
      "\\u",
      3,
      48,
      57,
      65,
      70,
      97,
      102,
      2,
      471,
      474,
      1,
      468,
      1,
      0,
      1114111,
      247,
      "\\",
      3,
      483,
      489,
      495,
      3,
      450,
      459,
      480,
      1,
      0,
      1114111,
      258,
      2,
      438,
      444,
      1,
      435,
      1,
      0,
      1114111,
      269,
      "\'",
      4,
      426,
      429,
      498,
      501,
      "\"",
      "\"",
      2,
      519,
      525,
      1,
      516,
      1,
      0,
      1114111,
      286,
      "\"",
      4,
      507,
      510,
      528,
      531,
      2,
      423,
      504,
      1,
      0,
      1114111,
      298,
      "[",
      "]",
      "-",
      3,
      573,
      576,
      579,
      2,
      570,
      582,
      1,
      0,
      1114111,
      312,
      2,
      558,
      564,
      1,
      555,
      1,
      0,
      1114111,
      322,
      "]",
      4,
      546,
      549,
      588,
      591,
      1,
      543,
      1,
      0,
      1114111,
      334,
      ".",
      2,
      606,
      609,
      1,
      603,
      1,
      0,
      1114111,
      344,
      5,
      366,
      378,
      414,
      534,
      594,
      1,
      0,
      1114111,
      350,
      "?",
      2,
      630,
      633,
      1,
      627,
      1,
      0,
      1114111,
      364,
      "*",
      2,
      648,
      651,
      1,
      645,
      1,
      0,
      1114111,
      374,
      "+",
      2,
      666,
      669,
      1,
      663,
      1,
      0,
      1114111,
      384,
      3,
      618,
      636,
      654,
      1,
      0,
      1114111,
      390,
      2,
      360,
      612,
      1,
      357,
      1,
      0,
      1114111,
      401,
      3,
      309,
      351,
      672,
      1,
      306,
      1,
      0,
      1114111,
      411,
      1,
      294,
      1,
      0,
      1114111,
      417,
      "/",
      2,
      696,
      699,
      1,
      693,
      1,
      0,
      1114111,
      427,
      2,
      687,
      702,
      1,
      684,
      1,
      0,
      1114111,
      436,
      2,
      288,
      678,
      1,
      285,
      1,
      0,
      1114111,
      445,
      3,
      219,
      264,
      279,
      1,
      216,
      1,
      0,
      1114111,
      455,
      1,
      711,
      1,
      0,
      1114111,
      461,
      5,
      6,
      96,
      138,
      207,
      705,
      1,
      3,
      1,
      0,
      1114111,
      473];
  PegParser(String text) {
    if (text == null) {
      throw new ArgumentError('text: $text');
    }
    _input = text;
    _inputLen = _input.length;
    if (_inputLen >= 0x3fffffe8 / 32) {
      throw new StateError('File size to big: $_inputLen');
    }
  }

  dynamic _parse(List<int> code, List data, int cursor) {
    var bp = 0;
    var ch = -1;
    var cp = 0;
    var input = _input;
    var inputLen = _inputLen;
    var op = 0;
    var $$ = null;
    // TODO: Test stack limit
    var stackSize = 10000;
    var stackLimit = stackSize - 100;
    var stack = new List(stackSize);
    var sp = 0;
    var success = true;
    var testing = -1;
    if (cursor < inputLen) {
      ch = input.codeUnitAt(cursor);
    }
    stack[sp++] = 0;
    var loc_ch, loc_pos, loc_testing, loc_instruction, loc_reps, loc_count,
        loc_instructions, loc_index, loc_seq;
    while (true) {
      if (sp == 0) {
        break;
      }
      op = stack[--sp];
      if (op >= 0) {
        cp = op;
        op = code[cp];
      }
      if (sp >= stackLimit) {
        var list = stack;
        var length = stackSize;
        stackSize *= 2;
        stackLimit = stackSize - 100;
        stack = new List<int>(stackSize);
        for (var i = 0; i < length; i++) {
          stack[i] = list[i];
        }
      }
      switch (op) {
        case 0:
          // AND_PREDICATE (0)
          stack[sp++] = loc_ch;
          stack[sp++] = loc_pos;
          stack[sp++] = loc_testing;
          loc_ch = ch;
          loc_pos = cursor;
          loc_testing = testing;
          testing = inputLen + 1;
          stack[sp++] = -1;
          stack[sp++] = code[cp + 1];
          break;
        case -1:
          // AND_PREDICATE (1)
          ch = loc_ch;
          cursor = loc_pos;
          testing = loc_testing;
          $$ = null;
          // TODO: failure
          if (!success && cursor > testing) {
            // TODO: Implement failure
          }
          loc_ch = stack[--sp];
          loc_pos = stack[--sp];
          loc_testing = stack[--sp];
          break;
        case 1:
          // ANY_CHARACTER (0)
          if (cursor < inputLen) {
            $$ = input[cursor++];
            success = true;
            if (cursor < inputLen) {
              ch = input.codeUnitAt(cursor);
            } else {
              ch = -1;
            }
          } else {
            success = false;
            // TODO: failure
            if (!success && cursor > testing) {
              // TODO: Implement failure
            }
          }
          break;
        case 3:
          // CHARACTER_CLASS (0)
          if (cursor < inputLen) {
            var c = ch;
            var offset = code[cp + 1];
            var count = data[offset + 0];
            var ranges = offset + 1;
            success = false;
            for (var i = 0; i < count; i++, ranges += 2) {
              if (c >= data[ranges + 0]) {
                if (c <= data[ranges + 1]) {
                  $$ = input[cursor++];
                  if (cursor < inputLen) {
                    ch = input.codeUnitAt(cursor);
                  } else {
                    ch = -1;
                  }
                  success = true;
                  break;
                }
              } else {
                break;
              }
            }
          }
          // TODO: failure
          if (!success && cursor > testing) {
            // TODO: Implement failure
          }
          break;
        case 2:
          // CHARACTER (0)
          if (cursor < inputLen) {
            var c = code[cp + 1];
            if (c == ch) {
              $$ = c;
              cursor++;
              if (cursor < inputLen) {
                ch = input.codeUnitAt(cursor);
              } else {
                ch = -1;
              }
              success = true;
            }
          }
          // TODO: failure
          if (!success && cursor > testing) {
            // TODO: Implement failure
          }
          break;
        case 4:
          // EMPTY (0)
          success = true;
          break;
        case 5:
          // LITERAL (0)
          var string = data[code[cp + 1] + 0];
          var length = string.length;
          if (cursor + length < inputLen && input.startsWith(string, cursor)) {
            $$ = string;
            success = true;
            if (cursor < inputLen) {
              ch = input.codeUnitAt(cursor);
            } else {
              ch = -1;
            }
          } else {
            success = false;
            // TODO: failure
            if (!success && cursor > testing) {
              // TODO: Implement failure
            }
          }
          break;
        case 6:
          // NOT_PREDICATE (0)
          stack[sp++] = loc_ch;
          stack[sp++] = loc_pos;
          stack[sp++] = loc_testing;
          loc_ch = ch;
          loc_pos = cursor;
          loc_testing = testing;
          testing = inputLen + 1;
          stack[sp++] = -2;
          stack[sp++] = code[cp + 1];
          break;
        case -2:
          // NOT_PREDICATE (1)
          ch = loc_ch;
          cursor = loc_pos;
          testing = loc_testing;
          $$ = null;
          success = !success;
          // TODO: failure
          if (!success && cursor > testing) {
            // TODO: Implement failure
          }
          loc_ch = stack[--sp];
          loc_pos = stack[--sp];
          loc_testing = stack[--sp];
          break;
        case 7:
          // ONE_OR_MORE (0)
          stack[sp++] = loc_instruction;
          stack[sp++] = loc_reps;
          loc_instruction = code[cp + 1];
          stack[sp++] = -3;
          stack[sp++] = loc_instruction;
          break;
        case -3:
          // ONE_OR_MORE (1)
          if (!success) {
            $$ = null;
            // TODO: failure
            if (!success && cursor > testing) {
              // TODO: Implement failure
            }
            loc_instruction = stack[--sp];
            loc_reps = stack[--sp];
          } else {
            loc_reps = [$$];
            stack[sp++] = -4;
            stack[sp++] = loc_instruction;
          }
          break;
        case -4:
          // ONE_OR_MORE (2)
          if (success) {
            loc_reps.add($$);
            stack[sp++] = -4;
            stack[sp++] = loc_instruction;
          } else {
            $$ = loc_reps;
            success = true;
            loc_instruction = stack[--sp];
            loc_reps = stack[--sp];
          }
          break;
        case 8:
          // OPTIONAL (0)
          stack[sp++] = -5;
          stack[sp++] = code[cp + 1];
          break;
        case -5:
          // OPTIONAL (1)
          success = true;
          break;
        case 9:
          // ORDERED_CHOICE (0)
          stack[sp++] = loc_count;
          stack[sp++] = loc_instructions;
          var offset = code[cp + 1];
          var count = data[offset + 0];
          var transitions = offset + 1;
          success = false;
          for (var i = 0; i < count; i++, transitions += 3) {
            if (ch <= data[transitions + 1]) {
              if (ch >= data[transitions + 0]) {
                success = true;
                break;
              }
            } else {
              break;
            }
          }
          if (success) {
            var instructions = data[transitions + 2];
            loc_count = data[instructions + 0] - 1;
            loc_instructions = instructions + 1;
            stack[sp++] = -6;
            stack[sp++] = data[loc_instructions++];
          } else {
            loc_count = stack[--sp];
            loc_instructions = stack[--sp];
          }
          break;
        case -6:
          // ORDERED_CHOICE (1)
          if (success) {
            loc_count = stack[--sp];
            loc_instructions = stack[--sp];
          } else {
            if (loc_count-- > 0) {
              stack[sp++] = -6;
              stack[sp++] = data[loc_instructions++];
            } else {
              loc_count = stack[--sp];
              loc_instructions = stack[--sp];
            }
          }
          break;
        case 10:
          // RULE (0)
          stack[sp++] = -7;
          stack[sp++] = code[cp + 1];
          break;
        case -7:
          // RULE (1)
          // Blank
          break;
        case 11:
          // SEQUENCE (0)
          stack[sp++] = loc_count;
          stack[sp++] = loc_index;
          stack[sp++] = loc_instructions;
          stack[sp++] = loc_seq;
          var offset = code[cp + 1];
          loc_count = data[offset + 0];
          loc_index = 0;
          loc_instructions = offset + 1;
          stack[sp++] = -8;
          stack[sp++] = data[loc_instructions + loc_index];
          break;
        case -8:
          // SEQUENCE (1)
          if (!success) {
            $$ = null;
            loc_count = stack[--sp];
            loc_index = stack[--sp];
            loc_instructions = stack[--sp];
            loc_seq = stack[--sp];
          } else {
            loc_seq = [$$];
            if (++loc_index < loc_count) {
              stack[sp++] = -9;
              stack[sp++] = data[loc_instructions + loc_index];
            } else {
              $$ = loc_seq;
              loc_count = stack[--sp];
              loc_index = stack[--sp];
              loc_instructions = stack[--sp];
              loc_seq = stack[--sp];
            }
          }
          break;
        case -9:
          // SEQUENCE (2)
          if (!success) {
            $$ = null;
            loc_count = stack[--sp];
            loc_index = stack[--sp];
            loc_instructions = stack[--sp];
            loc_seq = stack[--sp];
          } else {
            loc_seq.add($$);
            if (++loc_index < loc_count) {
              stack[sp++] = -9;
              stack[sp++] = data[loc_instructions + loc_index];
            } else {
              $$ = loc_seq;
              loc_count = stack[--sp];
              loc_index = stack[--sp];
              loc_instructions = stack[--sp];
              loc_seq = stack[--sp];
            }
          }
          break;
        case 12:
          // SEQUENCE_SINGLE (0)
          stack[sp++] = -10;
          stack[sp++] = code[cp + 1];
          break;
        case -10:
          // SEQUENCE_SINGLE (1)
          // Blank
          break;
        case 13:
          // ZERO_OR_MORE (0)
          stack[sp++] = loc_instruction;
          stack[sp++] = loc_reps;
          loc_instruction = code[cp + 1];
          stack[sp++] = -11;
          stack[sp++] = loc_instruction;
          break;
        case -11:
          // ZERO_OR_MORE (1)
          if (!success) {
            $$ = [];
            success = true;
            loc_instruction = stack[--sp];
            loc_reps = stack[--sp];
          } else {
            loc_reps = [$$];
            stack[sp++] = -12;
            stack[sp++] = loc_instruction;
          }
          break;
        case -12:
          // ZERO_OR_MORE (2)
          if (success) {
            loc_reps.add($$);
            stack[sp++] = -12;
            stack[sp++] = loc_instruction;
          } else {
            $$ = loc_reps;
            success = true;
            loc_instruction = stack[--sp];
            loc_reps = stack[--sp];
          }
          break;
      }

      // TODO:
      continue;
    }
    return $$;
  }

  dynamic parse_Grammar() {
    // TODO: pos = 0
    return _parse(_grammarCode, _grammarData, 0);
  }

}

