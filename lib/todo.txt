=======================================

Main task is "Nondeterministic finite automaton"

Suitable for
- Symbol transitions implementation
- Error recovering implementation
- More in-depth analysis of the (correctness of the) grammars

=======================================

Add public API of the parser generator

=======================================

Comment _getState transitions
Comment _getState cases (DONE)

=======================================

Optimize the code which based on the transitions in ordered choice

- Combine similar cases into multicase (DONE)
- Optimize _getState through mapping
- Optimize _getState for single character (DONE)
- Optimize _getState for single range (DONE)

=======================================

Write better resolver of rules which should be memoized

=======================================

Optimize first in sequence expressions:
- AnyCharacter
- Character class
- Literal with single character (DONE)

Remove method next char (???)

=======================================

Test choice with opional expression
  Warrning should be produced only when exprs goes after optional

=======================================

Direct lexemes in nonterminals:
1. Should be treated as fixed length terminals.
2. Should produce failures (the same as the fixed length terminals).

=======================================

Document (private) API of parser:
- _cursor
- _flatten
- _inputLen
- _token
- _tokenStart

Document (public) API of parser:
- calculatePos
- column
- errors !!!
- expected ???
- line
- unexpected ???

=======================================

Add "memoizationId" to ProductionRule

=======================================

Add public API of the parser generator

=======================================

Add support of "error recovering"

=======================================

rewrite "duplicate data remover" in general parser generator

=======================================

Interpreter: places of expectation error reporting:

choice: report all if no transitions

sequence: not report

unary: not report

terminal: report

TERMINAL <- "abc" / [0..9] # TERMINAL

TERMINAL <- "abc" # abc

Add property: Expression.hasCharacterClass
---
production rule: depends on memoization
  report all if not cached

=======================================

Renaming

Nullable
MayAdvance
MayFail

========================================

optimize lookahead expressions
(_ch >= 48 && _ch <= 57 && _lookahead[_ch + 81])
(_ch == 48 || _ch == 57) {
(_ch == 48 || _ch == 57  || _ch == 59)
(_ch >= 48 && _ch <= 57)
(_ch >= 48 && _ch <= 57 || _ch >= 91 && _ch <= 93)

========================================

TEST: choice with optional expression

========================================

AND action:
 & { $$ = true; }

========================================

Print
 sort:
   - none
   - tree
   - hierarchy
 group:
   nonterminals, terminals
 detail: *short full

sort 1:
a <- b c d
b <- b1
b1 <-
c <- c1
c1 <-
d <- d1
d1 <-

sort 2:
a <- b c d
b <- b1
c <- c1
d <- d1
b1 <-
c1 <-
d1 <-

=======================================

Doc comments

Eg.

/**
 * Parses the 'Grammar'.
 *
 * NONTERMINAL
 * Grammar <- SPACING Globals? Members? Definition+ EOF
 */
 dynamic parse_Grammar() {
 }

=======================================

Add support of detection "grammar does not requires a memoization"
