// This code was generated by a tool.
// Processing tool available at https://github.com/mezoni/peg

class Json2Parser {
  static const int EOF = -1;
  static final List<String> _ascii = new List<String>.generate(128, (c) => new String.fromCharCode(c));
  static final List<bool> _lookahead = _unmap([0x800013, 0x0, 0x100000, 0x600000, 0x7fe4, 0x10020000, 0x1ffc0820, 0x7e0, 0xfc0]);
  // '\"', '/', '\\', 'b', 'f', 'n', 'r', 't'
  static final List<bool> _mapping0 = _unmap([0x2001, 0x8000000, 0x144044]);
  // '\t', '\n', '\r', ' '
  static final List<bool> _mapping1 = _unmap([0x800013]);
  // "false"
  static final List<int> _strings0 = <int>[102, 97, 108, 115, 101];
  // "null"
  static final List<int> _strings1 = <int>[110, 117, 108, 108];
  // "true"
  static final List<int> _strings2 = <int>[116, 114, 117, 101];
  List _cache;
  int _cachePos;
  List<int> _cacheRule;
  List<int> _cacheState;
  int _ch;
  int _column;
  int _cursor;
  List<String> _expected;
  int _failurePos;
  int _flag;
  int _inputLen;
  int _line;
  List<int> _runes;
  bool success;
  List<String> _terminal;
  int _testing;
  
  Json2Parser(String text) {
    if (text == null) {
      throw new ArgumentError('text: $text');
    }    
    _runes = _toRunes(text);
    _inputLen = _runes.length;
    if (_inputLen >= 0x3fffffe8 / 32) {
      throw new StateError('File size to big: $_inputLen');
    }  
    reset(0);    
  }
  
  int get column { 
    if (_column == -1) { 
      _calculatePos(_failurePos); 
    } 
    return _column;       
  } 
   
  int get line { 
    if (_line == -1) { 
      _calculatePos(_failurePos); 
    } 
    return _line;       
  } 
   
  dynamic _parse_BEGIN_ARRAY() {
    // TERMINAL
    // BEGIN_ARRAY <- [\[] _WS
    var $$;  
    _terminal = const ["["];  
    // [\[] _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // [\[]
      $$ = _matchChar(91, '91');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["["]);
    }
    return $$;
  }
  
  dynamic _parse_BEGIN_OBJECT() {
    // TERMINAL
    // BEGIN_OBJECT <- [{] _WS
    var $$;  
    _terminal = const ["{"];  
    // [{] _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // [{]
      $$ = _matchChar(123, '123');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["{"]);
    }
    return $$;
  }
  
  dynamic _parse_CHAR() {
    // TERMINAL
    // CHAR <- UNESCAPED / ESCAPE ["/\bfnrt] / [u] HEXDIG HEXDIG HEXDIG HEXDIG
    var $$;  
    // UNESCAPED / ESCAPE ["/\bfnrt] / [u] HEXDIG HEXDIG HEXDIG HEXDIG
    while (true) {
      // UNESCAPED
      $$ = _parse_UNESCAPED();
      if (success) break;
      // ESCAPE ["/\bfnrt]
      var ch0 = _ch, pos0 = _cursor;
      while (true) {  
        // ESCAPE
        $$ = null;
        success = _ch == 92; // '\'
        // Lookahead (ESCAPE)
        if (success) $$ = _parse_ESCAPE();
        if (!success) {
          if (_cursor > _testing) _failure(["STRING"]);  
          break;  
        }
        var seq = new List(2)..[0] = $$;
        // ["/\bfnrt]
        $$ = _matchMapping(34, 116, _mapping0);
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        break;  
      }
      if (!success) {
        _ch = ch0;
        _cursor = pos0;
      }
      if (success) break;
      // [u] HEXDIG HEXDIG HEXDIG HEXDIG
      var ch1 = _ch, pos1 = _cursor;
      while (true) {  
        // [u]
        $$ = _matchChar(117, '117');
        if (!success) break;
        var seq = new List(5)..[0] = $$;
        // HEXDIG
        $$ = null;
        success = _ch >= 48 && _ch <= 102 && _lookahead[_ch + 157];
        // Lookahead (HEXDIG)
        if (success) $$ = _parse_HEXDIG();    
        if (!success) {    
          if (_cursor > _testing) _failure(["STRING"]);
          break;  
        }
        seq[1] = $$;
        // HEXDIG
        $$ = null;
        success = _ch >= 48 && _ch <= 102 && _lookahead[_ch + 157];
        // Lookahead (HEXDIG)
        if (success) $$ = _parse_HEXDIG();    
        if (!success) {    
          if (_cursor > _testing) _failure(["STRING"]);
          break;  
        }
        seq[2] = $$;
        // HEXDIG
        $$ = null;
        success = _ch >= 48 && _ch <= 102 && _lookahead[_ch + 157];
        // Lookahead (HEXDIG)
        if (success) $$ = _parse_HEXDIG();    
        if (!success) {    
          if (_cursor > _testing) _failure(["STRING"]);
          break;  
        }
        seq[3] = $$;
        // HEXDIG
        $$ = null;
        success = _ch >= 48 && _ch <= 102 && _lookahead[_ch + 157];
        // Lookahead (HEXDIG)
        if (success) $$ = _parse_HEXDIG();    
        if (!success) {    
          if (_cursor > _testing) _failure(["STRING"]);
          break;  
        }
        seq[4] = $$;
        $$ = seq;
        break;  
      }
      if (!success) {
        _ch = ch1;
        _cursor = pos1;
      }
      break;
    }
    if (!success && _cursor > _testing) {
      _failure(["STRING"]);
    }
    return $$;
  }
  
  dynamic _parse_DECIMAL_POINT() {
    // TERMINAL
    // DECIMAL_POINT <- [.] _WS
    var $$;  
    // [.] _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // [.]
      $$ = _matchChar(46, '46');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["NUMBER"]);
    }
    return $$;
  }
  
  dynamic _parse_DIGIT() {
    // TERMINAL
    // DIGIT <- [0-9]
    var $$;  
    // [0-9]
    $$ = _matchRange(48, 57);
    if (!success && _cursor > _testing) {
      _failure([]);
    }
    return $$;
  }
  
  dynamic _parse_E() {
    // TERMINAL
    // E <- ([e] / [E]) _WS
    var $$;  
    // ([e] / [E]) _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // [e] / [E]
      while (true) {
        // [e]
        $$ = _matchChar(101, '101');
        if (success) break;
        // [E]
        $$ = _matchChar(69, '69');
        break;
      }
      if (!success && _cursor > _testing) {
        _failure(["NUMBER"]);
      }
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["NUMBER"]);
    }
    return $$;
  }
  
  dynamic _parse_END_ARRAY() {
    // TERMINAL
    // END_ARRAY <- [\]] _WS
    var $$;  
    _terminal = const ["]"];  
    // [\]] _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // [\]]
      $$ = _matchChar(93, '93');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["]"]);
    }
    return $$;
  }
  
  dynamic _parse_END_OBJECT() {
    // TERMINAL
    // END_OBJECT <- "}" _WS
    var $$;  
    _terminal = const ["}"];  
    // "}" _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "}"
      $$ = _matchChar(125, '}');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["}"]);
    }
    return $$;
  }
  
  dynamic _parse_EOF() {
    // TERMINAL
    // EOF <- !.
    var $$;  
    _terminal = const ["EOF"];  
    // !.
    var ch0 = _ch, pos0 = _cursor, testing0 = _testing; 
    _testing = _inputLen + 1;
    // .
    $$ = _matchAny();
    _ch = ch0;
    _cursor = pos0; 
    _testing = testing0;
    $$ = null;
    success = !success;
    if (!success && _cursor > _testing) {
      _failure(["EOF"]);
    }
    return $$;
  }
  
  dynamic _parse_ESCAPE() {
    // TERMINAL
    // ESCAPE <- [\]
    var $$;  
    // [\]
    $$ = _matchChar(92, '92');
    if (!success && _cursor > _testing) {
      _failure(["STRING"]);
    }
    return $$;
  }
  
  dynamic _parse_EXP() {
    // TERMINAL
    // EXP <- E (MINUS / PLUS)? DIGIT+ _WS
    var $$;  
    // E (MINUS / PLUS)? DIGIT+ _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // E
      $$ = null;
      success = _ch >= 69 && _ch <= 101 && _lookahead[_ch + 13];
      // Lookahead (E)
      if (success) $$ = _parse_E();    
      if (!success) {    
        if (_cursor > _testing) _failure(["NUMBER"]);
        break;  
      }
      var seq = new List(4)..[0] = $$;
      // (MINUS / PLUS)?
      var testing0 = _testing;
      _testing = _cursor;
      // MINUS / PLUS
      while (true) {
        // MINUS
        $$ = null;
        success = _ch == 45; // '-'
        // Lookahead (MINUS)
        if (success) $$ = _parse_MINUS();
        if (!success) {
          if (_cursor > _testing) _failure([]);  
        }
        if (success) break;
        // PLUS
        $$ = null;
        success = _ch == 43; // '+'
        // Lookahead (PLUS)
        if (success) $$ = _parse_PLUS();
        if (!success) {
          if (_cursor > _testing) _failure(["NUMBER"]);  
        }
        break;
      }
      if (!success && _cursor > _testing) {
        _failure(["NUMBER"]);
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      seq[1] = $$;
      // DIGIT+
      var testing1;
      for (var first = true, reps; ;) {  
        // DIGIT  
        $$ = null;  
        success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];  
        // Lookahead (DIGIT)  
        if (success) $$ = _parse_DIGIT();      
        if (!success) {      
          if (_cursor > _testing) _failure([]);  
        }  
        if (success) {
         if (first) {      
            first = false;
            reps = [$$];
            testing1 = _testing;                  
          } else {
            reps.add($$);
          }
          _testing = _cursor;   
        } else {
          success = !first;
          if (success) {      
            _testing = testing1;
            $$ = reps;      
          } else $$ = null;
          break;
        }  
      }
      if (!success) break;
      seq[2] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[3] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["NUMBER"]);
    }
    return $$;
  }
  
  dynamic _parse_FALSE() {
    // TERMINAL
    // FALSE <- "false" _WS
    var $$;  
    _terminal = const ["false"];  
    // "false" _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "false"
      $$ = _matchString(_strings0, 'false');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["false"]);
    }
    return $$;
  }
  
  dynamic _parse_FRAC() {
    // TERMINAL
    // FRAC <- DECIMAL_POINT DIGIT* _WS
    var $$;  
    // DECIMAL_POINT DIGIT* _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // DECIMAL_POINT
      $$ = null;
      success = _ch == 46; // '.'
      // Lookahead (DECIMAL_POINT)
      if (success) $$ = _parse_DECIMAL_POINT();
      if (!success) {
        if (_cursor > _testing) _failure(["NUMBER"]);  
        break;  
      }
      var seq = new List(3)..[0] = $$;
      // DIGIT*
      var testing0 = _testing; 
      for (var reps = []; ; ) {
        _testing = _cursor;
        // DIGIT
        $$ = null;
        success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];
        // Lookahead (DIGIT)
        if (success) $$ = _parse_DIGIT();    
        if (!success) {    
          if (_cursor > _testing) _failure([]);
        }
        if (success) {  
          reps.add($$);
        } else {
          success = true;
          _testing = testing0;
          $$ = reps;
          break; 
        }
      }
      if (!success) break;
      seq[1] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[2] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["NUMBER"]);
    }
    return $$;
  }
  
  dynamic _parse_HEXDIG() {
    // TERMINAL
    // HEXDIG <- DIGIT / [a-f] / [A-F]
    var $$;  
    // DIGIT / [a-f] / [A-F]
    while (true) {
      // DIGIT
      $$ = null;
      success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];
      // Lookahead (DIGIT)
      if (success) $$ = _parse_DIGIT();    
      if (!success) {    
        if (_cursor > _testing) _failure([]);
      }
      if (success) break;
      // [a-f]
      $$ = _matchRange(97, 102);
      if (success) break;
      // [A-F]
      $$ = _matchRange(65, 70);
      break;
    }
    if (!success && _cursor > _testing) {
      _failure(["STRING"]);
    }
    return $$;
  }
  
  dynamic _parse_INT() {
    // TERMINAL
    // INT <- (DIGIT DIGIT*) _WS
    var $$;  
    // (DIGIT DIGIT*) _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // DIGIT DIGIT*
      var ch1 = _ch, pos1 = _cursor;
      while (true) {  
        // DIGIT
        $$ = null;
        success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];
        // Lookahead (DIGIT)
        if (success) $$ = _parse_DIGIT();    
        if (!success) {    
          if (_cursor > _testing) _failure([]);
          break;  
        }
        var seq = new List(2)..[0] = $$;
        // DIGIT*
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          // DIGIT
          $$ = null;
          success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];
          // Lookahead (DIGIT)
          if (success) $$ = _parse_DIGIT();    
          if (!success) {    
            if (_cursor > _testing) _failure([]);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        break;  
      }
      if (!success) {
        _ch = ch1;
        _cursor = pos1;
      }
      if (!success && _cursor > _testing) {
        _failure(["NUMBER"]);
      }
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["NUMBER"]);
    }
    return $$;
  }
  
  dynamic _parse_MINUS() {
    // TERMINAL
    // MINUS <- [\-] _WS
    var $$;  
    // [\-] _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // [\-]
      $$ = _matchChar(45, '45');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure([]);
    }
    return $$;
  }
  
  dynamic _parse_NAME_SEPARATOR() {
    // TERMINAL
    // NAME_SEPARATOR <- [:] _WS
    var $$;  
    _terminal = const [":"];  
    // [:] _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // [:]
      $$ = _matchChar(58, '58');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure([":"]);
    }
    return $$;
  }
  
  dynamic _parse_NULL() {
    // TERMINAL
    // NULL <- "null" _WS
    var $$;  
    _terminal = const ["null"];  
    // "null" _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "null"
      $$ = _matchString(_strings1, 'null');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["null"]);
    }
    return $$;
  }
  
  dynamic _parse_NUMBER() {
    // TERMINAL
    // NUMBER <- MINUS? INT FRAC? EXP? _WS
    var $$;  
    _terminal = const ["NUMBER"];  
    // MINUS? INT FRAC? EXP? _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // MINUS?
      var testing0 = _testing;
      _testing = _cursor;
      // MINUS
      $$ = null;
      success = _ch == 45; // '-'
      // Lookahead (MINUS)
      if (success) $$ = _parse_MINUS();
      if (!success) {
        if (_cursor > _testing) _failure([]);  
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      var seq = new List(5)..[0] = $$;
      // INT
      $$ = null;
      success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];
      // Lookahead (INT)
      if (success) $$ = _parse_INT();    
      if (!success) {    
        if (_cursor > _testing) _failure(["NUMBER"]);
        break;  
      }
      seq[1] = $$;
      // FRAC?
      var testing1 = _testing;
      _testing = _cursor;
      // FRAC
      $$ = null;
      success = _ch == 46; // '.'
      // Lookahead (FRAC)
      if (success) $$ = _parse_FRAC();
      if (!success) {
        if (_cursor > _testing) _failure(["NUMBER"]);  
      }
      success = true; 
      _testing = testing1;
      if (!success) break;
      seq[2] = $$;
      // EXP?
      var testing2 = _testing;
      _testing = _cursor;
      // EXP
      $$ = null;
      success = _ch >= 69 && _ch <= 101 && _lookahead[_ch + 13];
      // Lookahead (EXP)
      if (success) $$ = _parse_EXP();    
      if (!success) {    
        if (_cursor > _testing) _failure(["NUMBER"]);
      }
      success = true; 
      _testing = testing2;
      if (!success) break;
      seq[3] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[4] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["NUMBER"]);
    }
    return $$;
  }
  
  dynamic _parse_PLUS() {
    // TERMINAL
    // PLUS <- [+] _WS
    var $$;  
    // [+] _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // [+]
      $$ = _matchChar(43, '43');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["NUMBER"]);
    }
    return $$;
  }
  
  dynamic _parse_QUOTATION_MARK() {
    // TERMINAL
    // QUOTATION_MARK <- ["]
    var $$;  
    // ["]
    $$ = _matchChar(34, '34');
    if (!success && _cursor > _testing) {
      _failure(["STRING"]);
    }
    return $$;
  }
  
  dynamic _parse_STRING() {
    // TERMINAL
    // STRING <- QUOTATION_MARK CHAR* QUOTATION_MARK _WS
    var $$;  
    _terminal = const ["STRING"];  
    // QUOTATION_MARK CHAR* QUOTATION_MARK _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // QUOTATION_MARK
      $$ = null;
      success = _ch == 34; // '"'
      // Lookahead (QUOTATION_MARK)
      if (success) $$ = _parse_QUOTATION_MARK();
      if (!success) {
        if (_cursor > _testing) _failure(["STRING"]);  
        break;  
      }
      var seq = new List(4)..[0] = $$;
      // CHAR*
      var testing0 = _testing; 
      for (var reps = []; ; ) {
        _testing = _cursor;
        // CHAR
        $$ = _parse_CHAR();
        if (success) {  
          reps.add($$);
        } else {
          success = true;
          _testing = testing0;
          $$ = reps;
          break; 
        }
      }
      if (!success) break;
      seq[1] = $$;
      // QUOTATION_MARK
      $$ = null;
      success = _ch == 34; // '"'
      // Lookahead (QUOTATION_MARK)
      if (success) $$ = _parse_QUOTATION_MARK();
      if (!success) {
        if (_cursor > _testing) _failure(["STRING"]);  
        break;  
      }
      seq[2] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[3] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["STRING"]);
    }
    return $$;
  }
  
  dynamic _parse_TRUE() {
    // TERMINAL
    // TRUE <- "true" _WS
    var $$;  
    _terminal = const ["true"];  
    // "true" _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "true"
      $$ = _matchString(_strings2, 'true');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["true"]);
    }
    return $$;
  }
  
  dynamic _parse_UNESCAPED() {
    // TERMINAL
    // UNESCAPED <- [ -!] / [#-\[] / [\]-~] / [\]-\u10ffff]
    var $$;  
    // [ -!] / [#-\[] / [\]-~] / [\]-\u10ffff]
    while (true) {
      // [ -!]
      $$ = _matchRange(32, 33);
      if (success) break;
      // [#-\[]
      $$ = _matchRange(35, 91);
      if (success) break;
      // [\]-~]
      $$ = _matchRange(93, 126);
      if (success) break;
      // [\]-\u10ffff]
      $$ = _matchRange(93, 1114111);
      break;
    }
    if (!success && _cursor > _testing) {
      _failure(["STRING"]);
    }
    return $$;
  }
  
  dynamic _parse_VALUE_SEPARATOR() {
    // TERMINAL
    // VALUE_SEPARATOR <- [,] _WS
    var $$;  
    _terminal = const [","];  
    // [,] _WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // [,]
      $$ = _matchChar(44, '44');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // _WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (_WS is optional)
      if (success) $$ = _parse__WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure([","]);
    }
    return $$;
  }
  
  dynamic _parse_WS() {
    // TERMINAL
    // WS <- _WS
    var $$;  
    _terminal = const ["WS"];  
    // _WS
    $$ = null;
    success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
    // Lookahead (_WS is optional)
    if (success) $$ = _parse__WS();
    else success = true;
    if (!success && _cursor > _testing) {
      _failure(["WS"]);
    }
    return $$;
  }
  
  dynamic _parse__WS() {
    // TERMINAL
    // _WS <- [\t-\n\r ]*
    var $$;  
    // [\t-\n\r ]*
    var testing0 = _testing; 
    for (var reps = []; ; ) {
      _testing = _cursor;
      // [\t-\n\r ]
      $$ = _matchMapping(9, 32, _mapping1);
      if (success) {  
        reps.add($$);
      } else {
        success = true;
        _testing = testing0;
        $$ = reps;
        break; 
      }
    }
    if (!success && _cursor > _testing) {
      _failure([]);
    }
    return $$;
  }
  
  dynamic _parse_array() {
    // NONTERMINAL
    // array <- BEGIN_ARRAY (value (VALUE_SEPARATOR value)*)? END_ARRAY
    var $$;  
    // BEGIN_ARRAY (value (VALUE_SEPARATOR value)*)? END_ARRAY
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // BEGIN_ARRAY
      $$ = null;
      success = _ch == 91; // '['
      // Lookahead (BEGIN_ARRAY)
      if (success) $$ = _parse_BEGIN_ARRAY();
      if (!success) {
        if (_cursor > _testing) _failure(["["]);  
        break;  
      }
      var seq = new List(3)..[0] = $$;
      // (value (VALUE_SEPARATOR value)*)?
      var testing0 = _testing;
      _testing = _cursor;
      // value (VALUE_SEPARATOR value)*
      var ch1 = _ch, pos1 = _cursor;
      while (true) {  
        // value
        $$ = null;
        success = _ch >= 34 && _ch <= 123 && _lookahead[_ch + 81];
        // Lookahead (value)
        if (success) $$ = _parse_value();    
        if (!success) {    
          if (_cursor > _testing) _failure(["false", "null", "true", "[", "NUMBER", "STRING", "{"]);
          break;  
        }
        var seq = new List(2)..[0] = $$;
        // (VALUE_SEPARATOR value)*
        var testing1 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          // VALUE_SEPARATOR value
          var ch2 = _ch, pos2 = _cursor;
          while (true) {  
            // VALUE_SEPARATOR
            $$ = null;
            success = _ch == 44; // ','
            // Lookahead (VALUE_SEPARATOR)
            if (success) $$ = _parse_VALUE_SEPARATOR();
            if (!success) {
              if (_cursor > _testing) _failure([","]);  
              break;  
            }
            var seq = new List(2)..[0] = $$;
            // value
            $$ = null;
            success = _ch >= 34 && _ch <= 123 && _lookahead[_ch + 81];
            // Lookahead (value)
            if (success) $$ = _parse_value();    
            if (!success) {    
              if (_cursor > _testing) _failure(["false", "null", "true", "[", "NUMBER", "STRING", "{"]);
              break;  
            }
            seq[1] = $$;
            $$ = seq;
            break;  
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          if (!success && _cursor > _testing) {
            _failure([",", "["]);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing1;
            $$ = reps;
            break; 
          }
        }
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        break;  
      }
      if (!success) {
        _ch = ch1;
        _cursor = pos1;
      }
      if (!success && _cursor > _testing) {
        _failure(["false", "null", "true", "[", "NUMBER", "STRING", "{"]);
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      seq[1] = $$;
      // END_ARRAY
      $$ = null;
      success = _ch == 93; // ']'
      // Lookahead (END_ARRAY)
      if (success) $$ = _parse_END_ARRAY();
      if (!success) {
        if (_cursor > _testing) _failure(["]"]);  
        break;  
      }
      seq[2] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["["]);
    }
    return $$;
  }
  
  dynamic _parse_member() {
    // NONTERMINAL
    // member <- STRING NAME_SEPARATOR value
    var $$;  
    // STRING NAME_SEPARATOR value
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // STRING
      $$ = null;
      success = _ch == 34; // '"'
      // Lookahead (STRING)
      if (success) $$ = _parse_STRING();
      if (!success) {
        if (_cursor > _testing) _failure(["STRING"]);  
        break;  
      }
      var seq = new List(3)..[0] = $$;
      // NAME_SEPARATOR
      $$ = null;
      success = _ch == 58; // ':'
      // Lookahead (NAME_SEPARATOR)
      if (success) $$ = _parse_NAME_SEPARATOR();
      if (!success) {
        if (_cursor > _testing) _failure([":"]);  
        break;  
      }
      seq[1] = $$;
      // value
      $$ = null;
      success = _ch >= 34 && _ch <= 123 && _lookahead[_ch + 81];
      // Lookahead (value)
      if (success) $$ = _parse_value();    
      if (!success) {    
        if (_cursor > _testing) _failure(["false", "null", "true", "[", "NUMBER", "STRING", "{"]);
        break;  
      }
      seq[2] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["STRING"]);
    }
    return $$;
  }
  
  dynamic _parse_object() {
    // NONTERMINAL
    // object <- BEGIN_OBJECT (member (VALUE_SEPARATOR member)*)? END_OBJECT
    var $$;  
    // BEGIN_OBJECT (member (VALUE_SEPARATOR member)*)? END_OBJECT
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // BEGIN_OBJECT
      $$ = null;
      success = _ch == 123; // '{'
      // Lookahead (BEGIN_OBJECT)
      if (success) $$ = _parse_BEGIN_OBJECT();
      if (!success) {
        if (_cursor > _testing) _failure(["{"]);  
        break;  
      }
      var seq = new List(3)..[0] = $$;
      // (member (VALUE_SEPARATOR member)*)?
      var testing0 = _testing;
      _testing = _cursor;
      // member (VALUE_SEPARATOR member)*
      var ch1 = _ch, pos1 = _cursor;
      while (true) {  
        // member
        $$ = null;
        success = _ch == 34; // '"'
        // Lookahead (member)
        if (success) $$ = _parse_member();
        if (!success) {
          if (_cursor > _testing) _failure(["STRING"]);  
          break;  
        }
        var seq = new List(2)..[0] = $$;
        // (VALUE_SEPARATOR member)*
        var testing1 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          // VALUE_SEPARATOR member
          var ch2 = _ch, pos2 = _cursor;
          while (true) {  
            // VALUE_SEPARATOR
            $$ = null;
            success = _ch == 44; // ','
            // Lookahead (VALUE_SEPARATOR)
            if (success) $$ = _parse_VALUE_SEPARATOR();
            if (!success) {
              if (_cursor > _testing) _failure([","]);  
              break;  
            }
            var seq = new List(2)..[0] = $$;
            // member
            $$ = null;
            success = _ch == 34; // '"'
            // Lookahead (member)
            if (success) $$ = _parse_member();
            if (!success) {
              if (_cursor > _testing) _failure(["STRING"]);  
              break;  
            }
            seq[1] = $$;
            $$ = seq;
            break;  
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          if (!success && _cursor > _testing) {
            _failure([",", "{"]);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing1;
            $$ = reps;
            break; 
          }
        }
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        break;  
      }
      if (!success) {
        _ch = ch1;
        _cursor = pos1;
      }
      if (!success && _cursor > _testing) {
        _failure(["STRING", "{"]);
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      seq[1] = $$;
      // END_OBJECT
      $$ = null;
      success = _ch == 125; // '}'
      // Lookahead (END_OBJECT)
      if (success) $$ = _parse_END_OBJECT();
      if (!success) {
        if (_cursor > _testing) _failure(["}"]);  
        break;  
      }
      seq[2] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["{"]);
    }
    return $$;
  }
  
  dynamic _parse_value() {
    // NONTERMINAL
    // value <- FALSE / NULL / TRUE / object / array / NUMBER / STRING
    var $$;  
    // FALSE / NULL / TRUE / object / array / NUMBER / STRING
    while (true) {
      // FALSE
      $$ = null;
      success = _ch == 102; // 'f'
      // Lookahead (FALSE)
      if (success) $$ = _parse_FALSE();
      if (!success) {
        if (_cursor > _testing) _failure(["false"]);  
      }
      if (success) break;
      // NULL
      $$ = null;
      success = _ch == 110; // 'n'
      // Lookahead (NULL)
      if (success) $$ = _parse_NULL();
      if (!success) {
        if (_cursor > _testing) _failure(["null"]);  
      }
      if (success) break;
      // TRUE
      $$ = null;
      success = _ch == 116; // 't'
      // Lookahead (TRUE)
      if (success) $$ = _parse_TRUE();
      if (!success) {
        if (_cursor > _testing) _failure(["true"]);  
      }
      if (success) break;
      // object
      $$ = null;
      success = _ch == 123; // '{'
      // Lookahead (object)
      if (success) $$ = _parse_object();
      if (!success) {
        if (_cursor > _testing) _failure(["{"]);  
      }
      if (success) break;
      // array
      $$ = null;
      success = _ch == 91; // '['
      // Lookahead (array)
      if (success) $$ = _parse_array();
      if (!success) {
        if (_cursor > _testing) _failure(["["]);  
      }
      if (success) break;
      // NUMBER
      $$ = null;
      success = _ch >= 45 && _ch <= 57 && _lookahead[_ch + 81];
      // Lookahead (NUMBER)
      if (success) $$ = _parse_NUMBER();    
      if (!success) {    
        if (_cursor > _testing) _failure(["NUMBER"]);
      }
      if (success) break;
      // STRING
      $$ = null;
      success = _ch == 34; // '"'
      // Lookahead (STRING)
      if (success) $$ = _parse_STRING();
      if (!success) {
        if (_cursor > _testing) _failure(["STRING"]);  
      }
      break;
    }
    if (!success && _cursor > _testing) {
      _failure(["false", "null", "true", "[", "NUMBER", "STRING", "{"]);
    }
    return $$;
  }
  
  dynamic parse_jsonText() {
    // NONTERMINAL
    // jsonText <- WS? (object / array) EOF
    var $$;  
    // WS? (object / array) EOF
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // WS?
      var testing0 = _testing;
      _testing = _cursor;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      success = true; 
      _testing = testing0;
      if (!success) break;
      var seq = new List(3)..[0] = $$;
      // object / array
      while (true) {
        // object
        $$ = null;
        success = _ch == 123; // '{'
        // Lookahead (object)
        if (success) $$ = _parse_object();
        if (!success) {
          if (_cursor > _testing) _failure(["{"]);  
        }
        if (success) break;
        // array
        $$ = null;
        success = _ch == 91; // '['
        // Lookahead (array)
        if (success) $$ = _parse_array();
        if (!success) {
          if (_cursor > _testing) _failure(["["]);  
        }
        break;
      }
      if (!success && _cursor > _testing) {
        _failure(["{", "["]);
      }
      if (!success) break;
      seq[1] = $$;
      // EOF
      $$ = _parse_EOF();
      if (!success) break;
      seq[2] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(["{", "["]);
    }
    return $$;
  }
  
  void _addToCache(dynamic result, int start, int id) {  
    var cached = _cache[start];
    if (cached == null) {
      _cacheRule[start] = id;
      _cache[start] = [result, _cursor, success];
    } else {    
      var slot = start >> 5;
      var r1 = (slot << 5) & 0x3fffffff;    
      var mask = 1 << (start - r1);    
      if ((_cacheState[slot] & mask) == 0) {
        _cacheState[slot] |= mask;   
        cached = [new List.filled(3, 0), new Map<int, List>()];
        _cache[start] = cached;                                      
      }
      slot = id >> 5;
      r1 = (slot << 5) & 0x3fffffff;    
      mask = 1 << (id - r1);    
      cached[0][slot] |= mask;
      cached[1][id] = [result, _cursor, success];      
    }
    if (_cachePos < start) {
      _cachePos = start;
    }    
  }
  
  void _calculatePos(int pos) {
    if (pos == null || pos < 0 || pos > _inputLen) {
      return;
    }
    _line = 1;
    _column = 1;
    for (var i = 0; i < _inputLen && i < pos; i++) {
      var c = _runes[i];
      if (c == 13) {
        _line++;
        _column = 1;
        if (i + 1 < _inputLen && _runes[i + 1] == 10) {
          i++;
        }
      } else if (c == 10) {
        _line++;
        _column = 1;
      } else {
        _column++;
      }
    }
  }
  
  void _failure([List<String> expected]) {  
    if (_failurePos > _cursor) {
      return;
    }
    if (_cursor > _failurePos) {    
      _expected = [];
     _failurePos = _cursor;
    }
    if (expected == null) {
      _expected.add(null);
    } else if (expected.length != 0) {
      _expected.addAll(expected);
    } else {
      _expected.addAll(_terminal);
    }   
  }
  
  List _flatten(dynamic value) {
    if (value is List) {
      var result = [];
      var length = value.length;
      for (var i = 0; i < length; i++) {
        var element = value[i];
        if (element is Iterable) {
          result.addAll(_flatten(element));
        } else {
          result.add(element);
        }
      }
      return result;
    } else if (value is Iterable) {
      var result = [];
      for (var element in value) {
        if (element is! List) {
          result.add(element);
        } else {
          result.addAll(_flatten(element));
        }
      }
    }
    return [value];
  }
  
  dynamic _getFromCache(int id) {  
    var result = _cache[_cursor];
    if (result == null) {
      return null;
    }    
    var slot = _cursor >> 5;
    var r1 = (slot << 5) & 0x3fffffff;  
    var mask = 1 << (_cursor - r1);
    if ((_cacheState[slot] & mask) == 0) {
      if (_cacheRule[_cursor] == id) {      
        _cursor = result[1];
        success = result[2];      
        if (_cursor < _inputLen) {
          _ch = _runes[_cursor];
        } else {
          _ch = EOF;
        }      
        return result;
      } else {
        return null;
      }    
    }
    slot = id >> 5;
    r1 = (slot << 5) & 0x3fffffff;  
    mask = 1 << (id - r1);
    if ((result[0][slot] & mask) == 0) {
      return null;
    }
    var data = result[1][id];  
    _cursor = data[1];
    success = data[2];
    if (_cursor < _inputLen) {
      _ch = _runes[_cursor];
    } else {
      _ch = EOF;
    }   
    return data;  
  }
  
  String _matchAny() {
    success = _cursor < _inputLen;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }    
      if (++_cursor < _inputLen) {
        _ch = _runes[_cursor];
      } else {
        _ch = EOF;
      }    
      return result;
    }    
    return null;  
  }
  
  String _matchChar(int ch, String string) {
    success = _ch == ch;
    if (success) {
      var result = string;  
      if (++_cursor < _inputLen) {
        _ch = _runes[_cursor];
      } else {
        _ch = EOF;
      }    
      return result;
    }  
    return null;  
  }
  
  String _matchMapping(int start, int end, List<bool> mapping) {
    success = _ch >= start && _ch <= end;
    if (success) {    
      if(mapping[_ch - start]) {
        String result;
        if (_ch < 128) {
          result = _ascii[_ch];  
        } else {
          result = new String.fromCharCode(_ch);
        }     
        if (++_cursor < _inputLen) {
          _ch = _runes[_cursor];
        } else {
          _ch = EOF;
        }      
        return result;
      }
      success = false;
    }  
    return null;  
  }
  
  String _matchRange(int start, int end) {
    success = _ch >= start && _ch <= end;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }        
      if (++_cursor < _inputLen) {
        _ch = _runes[_cursor];
      } else {
        _ch = EOF;
      }  
      return result;
    }  
    return null;  
  }
  
  String _matchRanges(List<int> ranges) {
    var length = ranges.length;
    for (var i = 0; i < length; i += 2) {
      if (_ch <= ranges[i + 1]) {
        if (_ch >= ranges[i]) {
          String result;
          if (_ch < 128) {
            result = _ascii[_ch];  
          } else {
            result = new String.fromCharCode(_ch);
          }          
          if (++_cursor < _inputLen) {
            _ch = _runes[_cursor];
          } else {
             _ch = EOF;
          }
          success = true;    
          return result;
        }      
      } else break;  
    }
    success = false;  
    return null;  
  }
  
  String _matchString(List<int> runes, String string) {
    var length = runes.length;  
    success = true;  
    if (_cursor + length < _inputLen) {
      for (var i = 0; i < length; i++) {
        if (runes[i] != _runes[_cursor + i]) {
          success = false;
          break;
        }
      }
    } else {
      success = false;
    }  
    if (success) {
      _cursor += length;      
      if (_cursor < _inputLen) {
        _ch = _runes[_cursor];
      } else {
        _ch = EOF;
      }    
      return string;      
    }  
    return null; 
  }
  
  void _nextChar([int count = 1]) {  
    success = true;
    _cursor += count; 
    if (_cursor < _inputLen) {
      _ch = _runes[_cursor];
    } else {
      _ch = EOF;
    }    
  }
  
  bool _testChar(int c, int flag) {
    if (c < 0 || c > 127) {
      return false;
    }    
    int slot = (c & 0xff) >> 6;  
    int mask = 1 << c - ((slot << 6) & 0x3fffffff);  
    if ((flag & mask) != 0) {    
      return true;
    }
    return false;           
  }
  
  bool _testInput(int flag) {
    if (_cursor >= _inputLen) {
      return false;
    }
    var c = _runes[_cursor];
    if (c < 0 || c > 127) {
      return false;
    }    
    int slot = (c & 0xff) >> 6;  
    int mask = 1 << c - ((slot << 6) & 0x3fffffff);  
    if ((flag & mask) != 0) {    
      return true;
    }
    return false;           
  }
  
  int _toRune(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      throw new StateError("An empty string contains no elements.");
    }
  
    var start = string.codeUnitAt(0);
    if (length == 1) {
      return start;
    }
  
    if ((start & 0xFC00) == 0xD800) {
      var end = string.codeUnitAt(1);
      if ((end & 0xFC00) == 0xDC00) {
        return (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
      }
    }
  
    return start;
  }
  
  List<int> _toRunes(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      return const <int>[];
    }
  
    var runes = <int>[];
    runes.length = length;
    var i = 0;
    var pos = 0;
    for ( ; i < length; pos++) {
      var start = string.codeUnitAt(i);
      i++;
      if ((start & 0xFC00) == 0xD800 && i < length) {
        var end = string.codeUnitAt(i);
        if ((end & 0xFC00) == 0xDC00) {
          runes[pos] = (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
          i++;
        } else {
          runes[pos] = start;
        }
      } else {
        runes[pos] = start;
      }
    }
  
    runes.length = pos;
    return runes;
  }
  
  static List<bool> _unmap(List<int> mapping) {
    var length = mapping.length;
    var result = new List<bool>(length * 31);
    var offset = 0;
    for (var i = 0; i < length; i++) {
      var v = mapping[i];
      for (var j = 0; j < 31; j++) {
        result[offset++] = v & (1 << j) == 0 ? false : true;
      }
    }
    return result;
  }
  
  List<String> get expected {
    var set = new Set<String>();  
    set.addAll(_expected);
    if (set.contains(null)) {
      set.clear();
    }  
    var result = set.toList();
    result.sort(); 
    return result;        
  }
  
  void reset(int pos) {
    if (pos == null) {
      throw new ArgumentError('pos: $pos');
    }
    if (pos < 0 || pos > _inputLen) {
      throw new RangeError('pos');
    }      
    _cursor = pos;
    _cache = new List(_inputLen + 1);
    _cachePos = -1;
    _cacheRule = new List(_inputLen + 1);
    _cacheState = new List.filled(((_inputLen + 1) >> 5) + 1, 0);
    _ch = EOF;  
    _column = -1; 
    _expected = [];
    _failurePos = -1;
    _flag = 0;  
    _line = -1;
    success = true;
    _terminal = const <String>[];    
    _testing = -1;
    if (_cursor < _inputLen) {
      _ch = _runes[_cursor];
    }    
  }
  
  String get unexpected {
    if (_failurePos < 0 || _failurePos >= _inputLen) {
      return '';    
    }
    return new String.fromCharCode(_runes[_failurePos]);  
  }
  
}

