// This code was generated by a tool.
// Processing tool available at https://github.com/mezoni/peg

import 'package:peg/grammar/expressions.dart';
import 'package:peg/grammar/grammar.dart';
import 'package:peg/grammar/production_rule.dart';

int _escape(int c) {
  switch (c) {
    case 110:
      return 10;      
    case 114:
      return 13;      
    case 116:
      return 9;      
  }    
  return c;
}

Expression _prefix(dynamic prefix, Expression expression, String action) {  
  switch (prefix) {
    case '&':
     expression = new AndPredicateExpression(expression);
     break;
    case '!':
     expression = new NotPredicateExpression(expression);
     break;        
  }
  expression.action = action;
  return expression;
}

Expression _suffix(String suffix, Expression expression) {
  switch (suffix) {
    case '?':
      return new OptionalExpression(expression);
    case '*':
      return  new ZeroOrMoreExpression(expression);
    case '+':
      return new OneOrMoreExpression(expression);        
  }
  return expression;
}
class PegParser {
  static final List<String> _ascii = new List<String>.generate(128, (c) => new String.fromCharCode(c));
  
  static final List<String> _expect0 = <String>["\'%{\'"];
  
  static final List<String> _expect1 = <String>["{"];
  
  static final List<String> _expect10 = <String>["\'?\'"];
  
  static final List<String> _expect11 = <String>["\'*\'"];
  
  static final List<String> _expect12 = <String>["\'+\'"];
  
  static final List<String> _expect13 = <String>["\'*\'", "\'+\'", "\'?\'"];
  
  static final List<String> _expect14 = <String>["\'(\'"];
  
  static final List<String> _expect15 = <String>["\')\'"];
  
  static final List<String> _expect16 = <String>["LITERAL"];
  
  static final List<String> _expect17 = <String>["\'[\'"];
  
  static final List<String> _expect18 = <String>["\'.\'"];
  
  static final List<String> _expect19 = <String>["HEX_NUMBER"];
  
  static final List<String> _expect2 = <String>["IDENTIFIER"];
  
  static final List<String> _expect20 = <String>["EOL"];
  
  static final List<String> _expect21 = <String>["CHAR"];
  
  static final List<String> _expect22 = <String>["RANGE"];
  
  static final List<String> _expect23 = <String>["EOF"];
  
  static final List<String> _expect24 = <String>["GLOBALS_BODY"];
  
  static final List<String> _expect25 = <String>["IDENT_START"];
  
  static final List<String> _expect26 = <String>["IDENT_CONT"];
  
  static final List<String> _expect27 = <String>[null];
  
  static final List<String> _expect28 = <String>["\'#\'"];
  
  static final List<String> _expect29 = <String>["SPACE"];
  
  static final List<String> _expect3 = <String>[null, "{"];
  
  static final List<String> _expect30 = <String>["\'#\'", "SPACE"];
  
  static final List<String> _expect31 = <String>["SPACING"];
  
  static final List<String> _expect4 = <String>["\'<-\'"];
  
  static final List<String> _expect5 = <String>["\'(\'", "\'.\'", "\'[\'", "IDENTIFIER", "LITERAL"];
  
  static final List<String> _expect6 = <String>["\'/\'"];
  
  static final List<String> _expect7 = <String>["\'&\'"];
  
  static final List<String> _expect8 = <String>["\'!\'"];
  
  static final List<String> _expect9 = <String>["\'!\'", "\'&\'"];
  
  static final List<bool> _lookahead = _unmap([0x14800013, 0x7e000000, 0x7d0fffff, 0x38ffffff, 0x7f800010, 0x7f47ffff, 0x30fffff, 0x7ff80001, 0x7ff47fff, 0x1ffffff, 0x7fffffe, 0xffffffd]);
  
  // '\"', '\'', '-', '[', '\\', ']', 'n', 'r', 't'
  static final List<bool> _mapping0 = _unmap([0x821, 0x1c000000, 0x144000]);
  
  // 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '_', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'
  static final List<bool> _mapping1 = _unmap([0x43ffffff, 0x7fffffe]);
  
  // '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'a', 'b', 'c', 'd', 'e', 'f'
  static final List<bool> _mapping2 = _unmap([0x7e03ff, 0xfc0000]);
  
  // '\t', ' '
  static final List<bool> _mapping3 = _unmap([0x800001]);
  
  // '\n', '\r'
  static final List<bool> _mapping4 = _unmap([0x9]);
  
  // '%{'
  static final List<int> _strings0 = <int>[37, 123];
  
  // '}%'
  static final List<int> _strings1 = <int>[125, 37];
  
  // '<-'
  static final List<int> _strings2 = <int>[60, 45];
  
  // '\r\n'
  static final List<int> _strings3 = <int>[13, 10];
  
  final List<int> _tokenFlags = [1, 1, 1, 0, 1, 0, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];
  
  final List<String> _tokenNames = ["CHAR", "\'[\'", "LITERAL", "EOF", "\'%{\'", "GLOBALS_BODY", "IDENTIFIER", "IDENT_START", "IDENT_CONT", "\'<-\'", "RANGE", "\'/\'", "\'&\'", "\'!\'", "\'?\'", "\'*\'", "\'+\'", "\'(\'", "\')\'", "\'.\'", "HEX_NUMBER", "\'#\'", "SPACE", "SPACING", "EOL"];
  
  List _cache;
  
  int _cachePos;
  
  List<int> _cacheRule;
  
  List<int> _cacheState;
  
  int _ch;
  
  int _cursor;
  
  List<PegParserError> _errors;
  
  List<String> _expected;
  
  int _failurePos;
  
  List<int> _input;
  
  int _inputLen;
  
  int _testing;
  
  int _token;
  
  int _tokenLevel;
  
  int _tokenStart;
  
  bool success;
  
  final String text;
  
  PegParser(this.text) {
    if (text == null) {
      throw new ArgumentError('text: $text');
    }    
    _input = _toCodePoints(text);
    _inputLen = _input.length;
    if (_inputLen >= 0x3fffffe8 / 32) {
      throw new StateError('File size to big: $_inputLen');
    }  
    reset(0);    
  }
  
  Iterable _compact(Iterable iterable) {  
    if (iterable is List) {
      var hasNull = false;
      var length = iterable.length;
      for (var i = 0; i < length; i++) {
        if (iterable[i] == null) {
          hasNull = true;
          break;
        }
      }
      if (!hasNull) {
        return iterable;
      }
      var result = [];
      for (var i = 0; i < length; i++) {
        var element = iterable[i];
        if (element != null) {
          result.add(element);
        }
      }
      return result;
    }   
    var result = [];
    for (var element in iterable) {   
      if (element != null) {
        result.add(element);
      }
    }
    return result;  
  }
  
  void _failure([List<String> expected]) {  
    if (_failurePos > _cursor) {
      return;
    }
    if (_failurePos < _cursor) {    
      _expected = [];
     _failurePos = _cursor;
    }
    if (_token != null) {
      var flag = _tokenFlags[_token];
      var name = _tokenNames[_token];
      if (_failurePos == _inputLen && (flag & 1) != 0) {             
        var message = "Unterminated $name";
        _errors.add(new PegParserError(PegParserError.UNTERMINATED, _failurePos, _tokenStart, message));            
      }
      else if (_failurePos > _tokenStart && (flag & 1) != 0) {             
        var message = "Malformed $name";
        _errors.add(new PegParserError(PegParserError.MALFORMED, _failurePos, _tokenStart, message));            
      }
      _expected.add(name);        
    } else if (expected == null) {
      _expected.add(null);
    } else {
      _expected.addAll(expected);
    }   
  }
  
  List _flatten(dynamic value) {
    if (value is List) {
      var result = [];
      var length = value.length;
      for (var i = 0; i < length; i++) {
        var element = value[i];
        if (element is Iterable) {
          result.addAll(_flatten(element));
        } else {
          result.add(element);
        }
      }
      return result;
    } else if (value is Iterable) {
      var result = [];
      for (var element in value) {
        if (element is! List) {
          result.add(element);
        } else {
          result.addAll(_flatten(element));
        }
      }
    }
    return [value];
  }
  
  String _matchAny() {
    success = _cursor < _inputLen;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }    
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }    
    return null;  
  }
  
  String _matchChar(int ch, String string) {
    success = _ch == ch;
    if (success) {
      var result = string;  
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }  
    return null;  
  }
  
  String _matchMapping(int start, int end, List<bool> mapping) {
    success = _ch >= start && _ch <= end;
    if (success) {    
      if(mapping[_ch - start]) {
        String result;
        if (_ch < 128) {
          result = _ascii[_ch];  
        } else {
          result = new String.fromCharCode(_ch);
        }     
        if (++_cursor < _inputLen) {
          _ch = _input[_cursor];
        } else {
          _ch = -1;
        }      
        return result;
      }
      success = false;
    }  
    return null;  
  }
  
  String _matchRange(int start, int end) {
    success = _ch >= start && _ch <= end;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }        
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }  
      return result;
    }  
    return null;  
  }
  
  String _matchRanges(List<int> ranges) {
    var length = ranges.length;
    for (var i = 0; i < length; i += 2) {
      if (_ch <= ranges[i + 1]) {
        if (_ch >= ranges[i]) {
          String result;
          if (_ch < 128) {
            result = _ascii[_ch];  
          } else {
            result = new String.fromCharCode(_ch);
          }          
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
             _ch = -1;
          }
          success = true;    
          return result;
        }      
      } else break;  
    }
    success = false;  
    return null;  
  }
  
  String _matchString(List<int> runes, String string) {
    var length = runes.length;  
    success = true;  
    if (_cursor + length <= _inputLen) {
      for (var i = 0; i < length; i++) {
        if (runes[i] != _input[_cursor + i]) {
          success = false;
          break;
        }
      }
    } else {
      success = false;
    }  
    if (success) {
      _cursor += length;      
      if (_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return string;      
    }  
    return null; 
  }
  
  dynamic _parse_AND() {
    // TERMINAL
    // AND <- "&" SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 12;  
      _tokenStart = _cursor;  
    }  
    // "&" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "&"
      $$ = _matchChar(38, '&');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // "&"
        final $1 = seq[0];
        // SPACING
        final $2 = seq[1];
        $$ = $1;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '&'
      _failure(_expect7);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_Action() {
    // NONTERMINAL
    // Action <- "{" ActionBody* "}" SPACING
    var $$;
    // "{" ActionBody* "}" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "{"
      $$ = _matchChar(123, '{');
      if (!success) break;
      var seq = new List(4)..[0] = $$;
      // ActionBody*
      var testing0 = _testing; 
      for (var reps = []; ; ) {
        _testing = _cursor;
        // ActionBody
        $$ = _parse_ActionBody();
        if (success) {  
          reps.add($$);
        } else {
          success = true;
          _testing = testing0;
          $$ = reps;
          break; 
        }
      }
      if (!success) break;
      seq[1] = $$;
      // "}"
      $$ = _matchChar(125, '}');
      if (!success) break;
      seq[2] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[3] = $$;
      $$ = seq;
      if (success) {    
        // "{"
        final $1 = seq[0];
        // ActionBody*
        final $2 = seq[1];
        // "}"
        final $3 = seq[2];
        // SPACING
        final $4 = seq[3];
        $$ = _normalize([$1, $2, $3, $4]).join();    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_ActionBody() {
    // NONTERMINAL
    // ActionBody <- Action / !"}" .
    var $$;
    // Action / !"}" .
    while (true) {
      // Action
      $$ = null;
      success = _ch == 123; // '{'
      // Lookahead (Action)
      if (success) $$ = _parse_Action();
      if (!success) {
        // Expected: {
        if (_cursor > _testing) _failure(_expect1);  
      }
      if (success) break;
      // !"}" .
      var ch0 = _ch, pos0 = _cursor;
      while (true) {  
        // !"}"
        var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
        _testing = _inputLen + 1;
        // "}"
        $$ = _matchChar(125, '}');
        _ch = ch1;
        _cursor = pos1; 
        _testing = testing0;
        $$ = null;
        success = !success;
        if (!success) break;
        var seq = new List(2)..[0] = $$;
        // .
        $$ = _matchAny();
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        if (success) {    
          // !"}"
          final $1 = seq[0];
          // .
          final $2 = seq[1];
          $$ = $2;    
        }
        break;  
      }
      if (!success) {
        _ch = ch0;
        _cursor = pos0;
      }
      break;
    }
    if (!success && _cursor > _testing) {
      // Expected: {, null
      _failure(_expect3);
    }
    return $$;
  }
  
  dynamic _parse_CHAR() {
    // TERMINAL
    // CHAR <- "\\" ["'\-\[-\]nrt] / HEX_NUMBER / !"\\" !EOL .
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 0;  
      _tokenStart = _cursor;  
    }  
    // "\\" ["'\-\[-\]nrt] / HEX_NUMBER / !"\\" !EOL .
    while (true) {
      // "\\" ["'\-\[-\]nrt]
      var ch0 = _ch, pos0 = _cursor;
      while (true) {  
        // "\\"
        $$ = _matchChar(92, '\\');
        if (!success) break;
        var seq = new List(2)..[0] = $$;
        // ["'\-\[-\]nrt]
        $$ = _matchMapping(34, 116, _mapping0);
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        if (success) {    
          // "\\"
          final $1 = seq[0];
          // ["'\-\[-\]nrt]
          final $2 = seq[1];
          $$ = _escape($2.codeUnitAt(0));    
        }
        break;  
      }
      if (!success) {
        _ch = ch0;
        _cursor = pos0;
      }
      if (success) break;
      // HEX_NUMBER
      $$ = null;
      success = _ch == 92; // '\'
      // Lookahead (HEX_NUMBER)
      if (success) $$ = _parse_HEX_NUMBER();
      if (!success) {
        // Expected: HEX_NUMBER
        if (_cursor > _testing) _failure(_expect19);  
      }
      if (success) break;
      // !"\\" !EOL .
      var ch1 = _ch, pos1 = _cursor;
      while (true) {  
        // !"\\"
        var ch2 = _ch, pos2 = _cursor, testing0 = _testing; 
        _testing = _inputLen + 1;
        // "\\"
        $$ = _matchChar(92, '\\');
        _ch = ch2;
        _cursor = pos2; 
        _testing = testing0;
        $$ = null;
        success = !success;
        if (!success) break;
        var seq = new List(3)..[0] = $$;
        // !EOL
        var ch3 = _ch, pos3 = _cursor, testing1 = _testing; 
        _testing = _inputLen + 1;
        // EOL
        $$ = null;
        success = _ch >= 10 && _ch <= 13 && _lookahead[_ch + -9];
        // Lookahead (EOL)
        if (success) $$ = _parse_EOL();    
        if (!success) {    
          // Expected: EOL    
          if (_cursor > _testing) _failure(_expect20);
        }
        _ch = ch3;
        _cursor = pos3; 
        _testing = testing1;
        $$ = null;
        success = !success;
        if (!success) break;
        seq[1] = $$;
        // .
        $$ = _matchAny();
        if (!success) break;
        seq[2] = $$;
        $$ = seq;
        if (success) {    
          // !"\\"
          final $1 = seq[0];
          // !EOL
          final $2 = seq[1];
          // .
          final $3 = seq[2];
          $$ = _toCodePoint($3);    
        }
        break;  
      }
      if (!success) {
        _ch = ch1;
        _cursor = pos1;
      }
      break;
    }
    if (!success && _cursor > _testing) {
      // Expected: CHAR
      _failure(_expect21);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_CLASS() {
    // TERMINAL
    // CLASS <- "[" (!"]" RANGE)* "]" SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 1;  
      _tokenStart = _cursor;  
    }  
    // "[" (!"]" RANGE)* "]" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "["
      $$ = _matchChar(91, '[');
      if (!success) break;
      var seq = new List(4)..[0] = $$;
      // (!"]" RANGE)*
      var testing0 = _testing; 
      for (var reps = []; ; ) {
        _testing = _cursor;
        // !"]" RANGE
        var ch1 = _ch, pos1 = _cursor;
        while (true) {  
          // !"]"
          var ch2 = _ch, pos2 = _cursor, testing1 = _testing; 
          _testing = _inputLen + 1;
          // "]"
          $$ = _matchChar(93, ']');
          _ch = ch2;
          _cursor = pos2; 
          _testing = testing1;
          $$ = null;
          success = !success;
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // RANGE
          $$ = _parse_RANGE();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // !"]"
            final $1 = seq[0];
            // RANGE
            final $2 = seq[1];
            $$ = $2;    
          }
          break;  
        }
        if (!success) {
          _ch = ch1;
          _cursor = pos1;
        }
        if (!success && _cursor > _testing) {
          // Expected: RANGE
          _failure(_expect22);
        }
        if (success) {  
          reps.add($$);
        } else {
          success = true;
          _testing = testing0;
          $$ = reps;
          break; 
        }
      }
      if (!success) break;
      seq[1] = $$;
      // "]"
      $$ = _matchChar(93, ']');
      if (!success) break;
      seq[2] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[3] = $$;
      $$ = seq;
      if (success) {    
        // "["
        final $1 = seq[0];
        // (!"]" RANGE)*
        final $2 = seq[1];
        // "]"
        final $3 = seq[2];
        // SPACING
        final $4 = seq[3];
        $$ = new CharacterClassExpression($2);    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '['
      _failure(_expect17);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_CLOSE() {
    // TERMINAL
    // CLOSE <- ")" SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 18;  
      _tokenStart = _cursor;  
    }  
    // ")" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // ")"
      $$ = _matchChar(41, ')');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: ')'
      _failure(_expect15);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_COMMENT() {
    // TERMINAL
    // COMMENT <- "#" (!EOL .)* EOL?
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 21;  
      _tokenStart = _cursor;  
    }  
    // "#" (!EOL .)* EOL?
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "#"
      $$ = _matchChar(35, '#');
      if (!success) break;
      var seq = new List(3)..[0] = $$;
      // (!EOL .)*
      var testing0 = _testing; 
      for (var reps = []; ; ) {
        _testing = _cursor;
        // !EOL .
        var ch1 = _ch, pos1 = _cursor;
        while (true) {  
          // !EOL
          var ch2 = _ch, pos2 = _cursor, testing1 = _testing; 
          _testing = _inputLen + 1;
          // EOL
          $$ = null;
          success = _ch >= 10 && _ch <= 13 && _lookahead[_ch + -9];
          // Lookahead (EOL)
          if (success) $$ = _parse_EOL();    
          if (!success) {    
            // Expected: EOL    
            if (_cursor > _testing) _failure(_expect20);
          }
          _ch = ch2;
          _cursor = pos2; 
          _testing = testing1;
          $$ = null;
          success = !success;
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          // .
          $$ = _matchAny();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          break;  
        }
        if (!success) {
          _ch = ch1;
          _cursor = pos1;
        }
        if (!success && _cursor > _testing) {
          // Expected: null
          _failure(_expect27);
        }
        if (success) {  
          reps.add($$);
        } else {
          success = true;
          _testing = testing0;
          $$ = reps;
          break; 
        }
      }
      if (!success) break;
      seq[1] = $$;
      // EOL?
      var testing2 = _testing;
      _testing = _cursor;
      // EOL
      $$ = null;
      success = _ch >= 10 && _ch <= 13 && _lookahead[_ch + -9];
      // Lookahead (EOL)
      if (success) $$ = _parse_EOL();    
      if (!success) {    
        // Expected: EOL    
        if (_cursor > _testing) _failure(_expect20);
      }
      success = true; 
      _testing = testing2;
      if (!success) break;
      seq[2] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '#'
      _failure(_expect28);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_DOT() {
    // TERMINAL
    // DOT <- "." SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 19;  
      _tokenStart = _cursor;  
    }  
    // "." SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "."
      $$ = _matchChar(46, '.');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '.'
      _failure(_expect18);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_Definition() {
    // NONTERMINAL
    // Definition <- IDENTIFIER LEFTARROW Expression
    var $$;
    // IDENTIFIER LEFTARROW Expression
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // IDENTIFIER
      $$ = null;
      success = _ch >= 65 && _ch <= 122 && _lookahead[_ch + -9];
      // Lookahead (IDENTIFIER)
      if (success) $$ = _parse_IDENTIFIER();    
      if (!success) {    
        // Expected: IDENTIFIER    
        if (_cursor > _testing) _failure(_expect2);
        break;  
      }
      var seq = new List(3)..[0] = $$;
      // LEFTARROW
      $$ = null;
      success = _ch == 60; // '<'
      // Lookahead (LEFTARROW)
      if (success) $$ = _parse_LEFTARROW();
      if (!success) {
        // Expected: '<-'
        if (_cursor > _testing) _failure(_expect4);  
        break;  
      }
      seq[1] = $$;
      // Expression
      $$ = null;
      success = _ch >= 33 && _ch <= 122 && _lookahead[_ch + 82];
      // Lookahead (Expression)
      if (success) $$ = _parse_Expression();    
      if (!success) {    
        // Expected: IDENTIFIER, '(', LITERAL, '[', '.'    
        if (_cursor > _testing) _failure(_expect5);
        break;  
      }
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        // IDENTIFIER
        final $1 = seq[0];
        // LEFTARROW
        final $2 = seq[1];
        // Expression
        final $3 = seq[2];
        $$ = new ProductionRule($1, $3);    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER
      _failure(_expect2);
    }
    return $$;
  }
  
  dynamic _parse_EOF() {
    // TERMINAL
    // EOF <- !.
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 3;  
      _tokenStart = _cursor;  
    }  
    // !.
    var ch0 = _ch, pos0 = _cursor, testing0 = _testing; 
    _testing = _inputLen + 1;
    // .
    $$ = _matchAny();
    _ch = ch0;
    _cursor = pos0; 
    _testing = testing0;
    $$ = null;
    success = !success;
    if (!success && _cursor > _testing) {
      // Expected: EOF
      _failure(_expect23);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_EOL() {
    // TERMINAL
    // EOL <- "\r\n" / [\n\r]
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 24;  
      _tokenStart = _cursor;  
    }  
    // "\r\n" / [\n\r]
    while (true) {
      // "\r\n"
      $$ = _matchString(_strings3, '\r\n');
      if (success) break;
      // [\n\r]
      $$ = _matchMapping(10, 13, _mapping4);
      break;
    }
    if (!success && _cursor > _testing) {
      // Expected: EOL
      _failure(_expect20);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_Expression() {
    // NONTERMINAL
    // Expression <- Sequence (SLASH Sequence)*
    var $$;
    // Sequence (SLASH Sequence)*
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // Sequence
      $$ = null;
      success = _ch >= 33 && _ch <= 122 && _lookahead[_ch + 82];
      // Lookahead (Sequence)
      if (success) $$ = _parse_Sequence();    
      if (!success) {    
        // Expected: IDENTIFIER, '(', LITERAL, '[', '.'    
        if (_cursor > _testing) _failure(_expect5);
        break;  
      }
      var seq = new List(2)..[0] = $$;
      // (SLASH Sequence)*
      var testing0 = _testing; 
      for (var reps = []; ; ) {
        _testing = _cursor;
        // SLASH Sequence
        var ch1 = _ch, pos1 = _cursor;
        while (true) {  
          // SLASH
          $$ = null;
          success = _ch == 47; // '/'
          // Lookahead (SLASH)
          if (success) $$ = _parse_SLASH();
          if (!success) {
            // Expected: '/'
            if (_cursor > _testing) _failure(_expect6);  
            break;  
          }
          var seq = new List(2)..[0] = $$;
          // Sequence
          $$ = null;
          success = _ch >= 33 && _ch <= 122 && _lookahead[_ch + 82];
          // Lookahead (Sequence)
          if (success) $$ = _parse_Sequence();    
          if (!success) {    
            // Expected: IDENTIFIER, '(', LITERAL, '[', '.'    
            if (_cursor > _testing) _failure(_expect5);
            break;  
          }
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            // SLASH
            final $1 = seq[0];
            // Sequence
            final $2 = seq[1];
            $$ = $2;    
          }
          break;  
        }
        if (!success) {
          _ch = ch1;
          _cursor = pos1;
        }
        if (!success && _cursor > _testing) {
          // Expected: '/'
          _failure(_expect6);
        }
        if (success) {  
          reps.add($$);
        } else {
          success = true;
          _testing = testing0;
          $$ = reps;
          break; 
        }
      }
      if (!success) break;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // Sequence
        final $1 = seq[0];
        // (SLASH Sequence)*
        final $2 = seq[1];
        $$ = new OrderedChoiceExpression(_flatten([$1, $2]));    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, '(', LITERAL, '[', '.'
      _failure(_expect5);
    }
    return $$;
  }
  
  dynamic _parse_GLOBALS() {
    // TERMINAL
    // GLOBALS <- "%{" GLOBALS_BODY* "}%" SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 4;  
      _tokenStart = _cursor;  
    }  
    // "%{" GLOBALS_BODY* "}%" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "%{"
      $$ = _matchString(_strings0, '%{');
      if (!success) break;
      var seq = new List(4)..[0] = $$;
      // GLOBALS_BODY*
      var testing0 = _testing; 
      for (var reps = []; ; ) {
        _testing = _cursor;
        // GLOBALS_BODY
        $$ = _parse_GLOBALS_BODY();
        if (success) {  
          reps.add($$);
        } else {
          success = true;
          _testing = testing0;
          $$ = reps;
          break; 
        }
      }
      if (!success) break;
      seq[1] = $$;
      // "}%"
      $$ = _matchString(_strings1, '}%');
      if (!success) break;
      seq[2] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[3] = $$;
      $$ = seq;
      if (success) {    
        // "%{"
        final $1 = seq[0];
        // GLOBALS_BODY*
        final $2 = seq[1];
        // "}%"
        final $3 = seq[2];
        // SPACING
        final $4 = seq[3];
        $$ = _normalize(["{", $2, "}", $4]).join();    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '%{'
      _failure(_expect0);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_GLOBALS_BODY() {
    // TERMINAL
    // GLOBALS_BODY <- !"}%" .
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 5;  
      _tokenStart = _cursor;  
    }  
    // !"}%" .
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // !"}%"
      var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
      _testing = _inputLen + 1;
      // "}%"
      $$ = _matchString(_strings1, '}%');
      _ch = ch1;
      _cursor = pos1; 
      _testing = testing0;
      $$ = null;
      success = !success;
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // .
      $$ = _matchAny();
      if (!success) break;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // !"}%"
        final $1 = seq[0];
        // .
        final $2 = seq[1];
        $$ = $2;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: GLOBALS_BODY
      _failure(_expect24);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_HEX_NUMBER() {
    // TERMINAL
    // HEX_NUMBER <- [\] "u" [0-9A-Fa-f]+
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 20;  
      _tokenStart = _cursor;  
    }  
    // [\] "u" [0-9A-Fa-f]+
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // [\]
      $$ = _matchChar(92, '\\');
      if (!success) break;
      var seq = new List(3)..[0] = $$;
      // "u"
      $$ = _matchChar(117, 'u');
      if (!success) break;
      seq[1] = $$;
      // [0-9A-Fa-f]+
      var testing0;
      for (var first = true, reps; ;) {  
        // [0-9A-Fa-f]  
        $$ = _matchMapping(48, 102, _mapping2);  
        if (success) {
         if (first) {      
            first = false;
            reps = [$$];
            testing0 = _testing;                  
          } else {
            reps.add($$);
          }
          _testing = _cursor;   
        } else {
          success = !first;
          if (success) {      
            _testing = testing0;
            $$ = reps;      
          } else $$ = null;
          break;
        }  
      }
      if (!success) break;
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        // [\]
        final $1 = seq[0];
        // "u"
        final $2 = seq[1];
        // [0-9A-Fa-f]+
        final $3 = seq[2];
        $$ = int.parse($3.join(), radix: 16);    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: HEX_NUMBER
      _failure(_expect19);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_IDENTIFIER() {
    // TERMINAL
    // IDENTIFIER <- IDENT_START IDENT_CONT* SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 6;  
      _tokenStart = _cursor;  
    }  
    // IDENT_START IDENT_CONT* SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // IDENT_START
      $$ = null;
      success = _ch >= 65 && _ch <= 122 && _lookahead[_ch + -9];
      // Lookahead (IDENT_START)
      if (success) $$ = _parse_IDENT_START();    
      if (!success) {    
        // Expected: IDENT_START    
        if (_cursor > _testing) _failure(_expect25);
        break;  
      }
      var seq = new List(3)..[0] = $$;
      // IDENT_CONT*
      var testing0 = _testing; 
      for (var reps = []; ; ) {
        _testing = _cursor;
        // IDENT_CONT
        $$ = null;
        success = _ch >= 48 && _ch <= 122 && _lookahead[_ch + 246];
        // Lookahead (IDENT_CONT)
        if (success) $$ = _parse_IDENT_CONT();    
        if (!success) {    
          // Expected: IDENT_CONT    
          if (_cursor > _testing) _failure(_expect26);
        }
        if (success) {  
          reps.add($$);
        } else {
          success = true;
          _testing = testing0;
          $$ = reps;
          break; 
        }
      }
      if (!success) break;
      seq[1] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        // IDENT_START
        final $1 = seq[0];
        // IDENT_CONT*
        final $2 = seq[1];
        // SPACING
        final $3 = seq[2];
        $$ = _flatten([$1, $2]).join();    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER
      _failure(_expect2);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_IDENT_CONT() {
    // TERMINAL
    // IDENT_CONT <- IDENT_START / [0-9]
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 8;  
      _tokenStart = _cursor;  
    }  
    // IDENT_START / [0-9]
    while (true) {
      // IDENT_START
      $$ = null;
      success = _ch >= 65 && _ch <= 122 && _lookahead[_ch + -9];
      // Lookahead (IDENT_START)
      if (success) $$ = _parse_IDENT_START();    
      if (!success) {    
        // Expected: IDENT_START    
        if (_cursor > _testing) _failure(_expect25);
      }
      if (success) break;
      // [0-9]
      $$ = _matchRange(48, 57);
      break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENT_CONT
      _failure(_expect26);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_IDENT_START() {
    // TERMINAL
    // IDENT_START <- [A-Z_a-z]
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 7;  
      _tokenStart = _cursor;  
    }  
    // [A-Z_a-z]
    $$ = _matchMapping(65, 122, _mapping1);
    if (!success && _cursor > _testing) {
      // Expected: IDENT_START
      _failure(_expect25);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_LEFTARROW() {
    // TERMINAL
    // LEFTARROW <- "<-" SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 9;  
      _tokenStart = _cursor;  
    }  
    // "<-" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "<-"
      $$ = _matchString(_strings2, '<-');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '<-'
      _failure(_expect4);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_LITERAL() {
    // TERMINAL
    // LITERAL <- "\'" (!"\'" CHAR)* "\'" SPACING / "\"" (!"\"" CHAR)* "\"" SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 2;  
      _tokenStart = _cursor;  
    }  
    // "\'" (!"\'" CHAR)* "\'" SPACING / "\"" (!"\"" CHAR)* "\"" SPACING
    while (true) {
      // "\'" (!"\'" CHAR)* "\'" SPACING
      var ch0 = _ch, pos0 = _cursor;
      while (true) {  
        // "\'"
        $$ = _matchChar(39, '\'');
        if (!success) break;
        var seq = new List(4)..[0] = $$;
        // (!"\'" CHAR)*
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          // !"\'" CHAR
          var ch1 = _ch, pos1 = _cursor;
          while (true) {  
            // !"\'"
            var ch2 = _ch, pos2 = _cursor, testing1 = _testing; 
            _testing = _inputLen + 1;
            // "\'"
            $$ = _matchChar(39, '\'');
            _ch = ch2;
            _cursor = pos2; 
            _testing = testing1;
            $$ = null;
            success = !success;
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // CHAR
            $$ = _parse_CHAR();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // !"\'"
              final $1 = seq[0];
              // CHAR
              final $2 = seq[1];
              $$ = $2;    
            }
            break;  
          }
          if (!success) {
            _ch = ch1;
            _cursor = pos1;
          }
          if (!success && _cursor > _testing) {
            // Expected: CHAR
            _failure(_expect21);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        if (!success) break;
        seq[1] = $$;
        // "\'"
        $$ = _matchChar(39, '\'');
        if (!success) break;
        seq[2] = $$;
        // SPACING
        $$ = null;
        success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
        // Lookahead (SPACING is optional)
        if (success) $$ = _parse_SPACING();
        else success = true;
        seq[3] = $$;
        $$ = seq;
        if (success) {    
          // "\'"
          final $1 = seq[0];
          // (!"\'" CHAR)*
          final $2 = seq[1];
          // "\'"
          final $3 = seq[2];
          // SPACING
          final $4 = seq[3];
          $$ = new LiteralExpression(new String.fromCharCodes($2));    
        }
        break;  
      }
      if (!success) {
        _ch = ch0;
        _cursor = pos0;
      }
      if (success) break;
      // "\"" (!"\"" CHAR)* "\"" SPACING
      var ch3 = _ch, pos3 = _cursor;
      while (true) {  
        // "\""
        $$ = _matchChar(34, '\"');
        if (!success) break;
        var seq = new List(4)..[0] = $$;
        // (!"\"" CHAR)*
        var testing2 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          // !"\"" CHAR
          var ch4 = _ch, pos4 = _cursor;
          while (true) {  
            // !"\""
            var ch5 = _ch, pos5 = _cursor, testing3 = _testing; 
            _testing = _inputLen + 1;
            // "\""
            $$ = _matchChar(34, '\"');
            _ch = ch5;
            _cursor = pos5; 
            _testing = testing3;
            $$ = null;
            success = !success;
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            // CHAR
            $$ = _parse_CHAR();
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // !"\""
              final $1 = seq[0];
              // CHAR
              final $2 = seq[1];
              $$ = $2;    
            }
            break;  
          }
          if (!success) {
            _ch = ch4;
            _cursor = pos4;
          }
          if (!success && _cursor > _testing) {
            // Expected: CHAR
            _failure(_expect21);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing2;
            $$ = reps;
            break; 
          }
        }
        if (!success) break;
        seq[1] = $$;
        // "\""
        $$ = _matchChar(34, '\"');
        if (!success) break;
        seq[2] = $$;
        // SPACING
        $$ = null;
        success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
        // Lookahead (SPACING is optional)
        if (success) $$ = _parse_SPACING();
        else success = true;
        seq[3] = $$;
        $$ = seq;
        if (success) {    
          // "\""
          final $1 = seq[0];
          // (!"\"" CHAR)*
          final $2 = seq[1];
          // "\""
          final $3 = seq[2];
          // SPACING
          final $4 = seq[3];
          $$ = new LiteralExpression(new String.fromCharCodes($2));    
        }
        break;  
      }
      if (!success) {
        _ch = ch3;
        _cursor = pos3;
      }
      break;
    }
    if (!success && _cursor > _testing) {
      // Expected: LITERAL
      _failure(_expect16);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_Members() {
    // NONTERMINAL
    // Members <- "{" ActionBody* "}" SPACING
    var $$;
    // "{" ActionBody* "}" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "{"
      $$ = _matchChar(123, '{');
      if (!success) break;
      var seq = new List(4)..[0] = $$;
      // ActionBody*
      var testing0 = _testing; 
      for (var reps = []; ; ) {
        _testing = _cursor;
        // ActionBody
        $$ = _parse_ActionBody();
        if (success) {  
          reps.add($$);
        } else {
          success = true;
          _testing = testing0;
          $$ = reps;
          break; 
        }
      }
      if (!success) break;
      seq[1] = $$;
      // "}"
      $$ = _matchChar(125, '}');
      if (!success) break;
      seq[2] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[3] = $$;
      $$ = seq;
      if (success) {    
        // "{"
        final $1 = seq[0];
        // ActionBody*
        final $2 = seq[1];
        // "}"
        final $3 = seq[2];
        // SPACING
        final $4 = seq[3];
        $$ = _normalize([$1, $2, $3, $4]).join();    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: {
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_NOT() {
    // TERMINAL
    // NOT <- "!" SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 13;  
      _tokenStart = _cursor;  
    }  
    // "!" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "!"
      $$ = _matchChar(33, '!');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // "!"
        final $1 = seq[0];
        // SPACING
        final $2 = seq[1];
        $$ = $1;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '!'
      _failure(_expect8);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_OPEN() {
    // TERMINAL
    // OPEN <- "(" SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 17;  
      _tokenStart = _cursor;  
    }  
    // "(" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "("
      $$ = _matchChar(40, '(');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '('
      _failure(_expect14);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_PLUS() {
    // TERMINAL
    // PLUS <- "+" SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 16;  
      _tokenStart = _cursor;  
    }  
    // "+" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "+"
      $$ = _matchChar(43, '+');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // "+"
        final $1 = seq[0];
        // SPACING
        final $2 = seq[1];
        $$ = $1;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '+'
      _failure(_expect12);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_Prefix() {
    // NONTERMINAL
    // Prefix <- (AND / NOT)? Suffix Action?
    var $$;
    // (AND / NOT)? Suffix Action?
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // (AND / NOT)?
      var testing0 = _testing;
      _testing = _cursor;
      // AND / NOT
      while (true) {
        // AND
        $$ = null;
        success = _ch == 38; // '&'
        // Lookahead (AND)
        if (success) $$ = _parse_AND();
        if (!success) {
          // Expected: '&'
          if (_cursor > _testing) _failure(_expect7);  
        }
        if (success) break;
        // NOT
        $$ = null;
        success = _ch == 33; // '!'
        // Lookahead (NOT)
        if (success) $$ = _parse_NOT();
        if (!success) {
          // Expected: '!'
          if (_cursor > _testing) _failure(_expect8);  
        }
        break;
      }
      if (!success && _cursor > _testing) {
        // Expected: '&', '!'
        _failure(_expect9);
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      var seq = new List(3)..[0] = $$;
      // Suffix
      $$ = null;
      success = _ch >= 34 && _ch <= 122 && _lookahead[_ch + 171];
      // Lookahead (Suffix)
      if (success) $$ = _parse_Suffix();    
      if (!success) {    
        // Expected: IDENTIFIER, '(', LITERAL, '[', '.'    
        if (_cursor > _testing) _failure(_expect5);
        break;  
      }
      seq[1] = $$;
      // Action?
      var testing1 = _testing;
      _testing = _cursor;
      // Action
      $$ = null;
      success = _ch == 123; // '{'
      // Lookahead (Action)
      if (success) $$ = _parse_Action();
      if (!success) {
        // Expected: {
        if (_cursor > _testing) _failure(_expect1);  
      }
      success = true; 
      _testing = testing1;
      if (!success) break;
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        // (AND / NOT)?
        final $1 = seq[0];
        // Suffix
        final $2 = seq[1];
        // Action?
        final $3 = seq[2];
        $$ = _prefix($1, $2, $3);    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, '(', LITERAL, '[', '.'
      _failure(_expect5);
    }
    return $$;
  }
  
  dynamic _parse_Primary() {
    // NONTERMINAL
    // Primary <- IDENTIFIER !LEFTARROW / OPEN Expression CLOSE / LITERAL / CLASS / DOT
    var $$;
    // IDENTIFIER !LEFTARROW / OPEN Expression CLOSE / LITERAL / CLASS / DOT
    while (true) {
      // IDENTIFIER !LEFTARROW
      var ch0 = _ch, pos0 = _cursor;
      while (true) {  
        // IDENTIFIER
        $$ = null;
        success = _ch >= 65 && _ch <= 122 && _lookahead[_ch + -9];
        // Lookahead (IDENTIFIER)
        if (success) $$ = _parse_IDENTIFIER();    
        if (!success) {    
          // Expected: IDENTIFIER    
          if (_cursor > _testing) _failure(_expect2);
          break;  
        }
        var seq = new List(2)..[0] = $$;
        // !LEFTARROW
        var ch1 = _ch, pos1 = _cursor, testing0 = _testing; 
        _testing = _inputLen + 1;
        // LEFTARROW
        $$ = null;
        success = _ch == 60; // '<'
        // Lookahead (LEFTARROW)
        if (success) $$ = _parse_LEFTARROW();
        if (!success) {
          // Expected: '<-'
          if (_cursor > _testing) _failure(_expect4);  
        }
        _ch = ch1;
        _cursor = pos1; 
        _testing = testing0;
        $$ = null;
        success = !success;
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        if (success) {    
          // IDENTIFIER
          final $1 = seq[0];
          // !LEFTARROW
          final $2 = seq[1];
          $$ = new RuleExpression($1);    
        }
        break;  
      }
      if (!success) {
        _ch = ch0;
        _cursor = pos0;
      }
      if (success) break;
      // OPEN Expression CLOSE
      var ch2 = _ch, pos2 = _cursor;
      while (true) {  
        // OPEN
        $$ = null;
        success = _ch == 40; // '('
        // Lookahead (OPEN)
        if (success) $$ = _parse_OPEN();
        if (!success) {
          // Expected: '('
          if (_cursor > _testing) _failure(_expect14);  
          break;  
        }
        var seq = new List(3)..[0] = $$;
        // Expression
        $$ = null;
        success = _ch >= 33 && _ch <= 122 && _lookahead[_ch + 82];
        // Lookahead (Expression)
        if (success) $$ = _parse_Expression();    
        if (!success) {    
          // Expected: IDENTIFIER, '(', LITERAL, '[', '.'    
          if (_cursor > _testing) _failure(_expect5);
          break;  
        }
        seq[1] = $$;
        // CLOSE
        $$ = null;
        success = _ch == 41; // ')'
        // Lookahead (CLOSE)
        if (success) $$ = _parse_CLOSE();
        if (!success) {
          // Expected: ')'
          if (_cursor > _testing) _failure(_expect15);  
          break;  
        }
        seq[2] = $$;
        $$ = seq;
        if (success) {    
          // OPEN
          final $1 = seq[0];
          // Expression
          final $2 = seq[1];
          // CLOSE
          final $3 = seq[2];
          $$ = $2;    
        }
        break;  
      }
      if (!success) {
        _ch = ch2;
        _cursor = pos2;
      }
      if (success) break;
      // LITERAL
      $$ = null;
      success = _ch >= 34 && _ch <= 39 && _lookahead[_ch + 47];
      // Lookahead (LITERAL)
      if (success) $$ = _parse_LITERAL();    
      if (!success) {    
        // Expected: LITERAL    
        if (_cursor > _testing) _failure(_expect16);
      }
      if (success) break;
      // CLASS
      $$ = null;
      success = _ch == 91; // '['
      // Lookahead (CLASS)
      if (success) $$ = _parse_CLASS();
      if (!success) {
        // Expected: '['
        if (_cursor > _testing) _failure(_expect17);  
      }
      if (success) break;
      // DOT
      $$ = null;
      success = _ch == 46; // '.'
      // Lookahead (DOT)
      if (success) $$ = _parse_DOT();
      if (!success) {
        // Expected: '.'
        if (_cursor > _testing) _failure(_expect18);  
      }
      if (success) {    
        // DOT
        final $1 = $$;
        $$ = new AnyCharacterExpression();    
      }
      break;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, '(', LITERAL, '[', '.'
      _failure(_expect5);
    }
    return $$;
  }
  
  dynamic _parse_QUESTION() {
    // TERMINAL
    // QUESTION <- "?" SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 14;  
      _tokenStart = _cursor;  
    }  
    // "?" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "?"
      $$ = _matchChar(63, '?');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // "?"
        final $1 = seq[0];
        // SPACING
        final $2 = seq[1];
        $$ = $1;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '?'
      _failure(_expect10);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_RANGE() {
    // TERMINAL
    // RANGE <- CHAR "-" CHAR / CHAR
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 10;  
      _tokenStart = _cursor;  
    }  
    // CHAR "-" CHAR / CHAR
    while (true) {
      // CHAR "-" CHAR
      var ch0 = _ch, pos0 = _cursor;
      while (true) {  
        // CHAR
        $$ = _parse_CHAR();
        if (!success) break;
        var seq = new List(3)..[0] = $$;
        // "-"
        $$ = _matchChar(45, '-');
        if (!success) break;
        seq[1] = $$;
        // CHAR
        $$ = _parse_CHAR();
        if (!success) break;
        seq[2] = $$;
        $$ = seq;
        if (success) {    
          // CHAR
          final $1 = seq[0];
          // "-"
          final $2 = seq[1];
          // CHAR
          final $3 = seq[2];
          $$ = [$1, $3];    
        }
        break;  
      }
      if (!success) {
        _ch = ch0;
        _cursor = pos0;
      }
      if (success) break;
      // CHAR
      $$ = _parse_CHAR();
      if (success) {    
        // CHAR
        final $1 = $$;
        $$ = [$1, $1];    
      }
      break;
    }
    if (!success && _cursor > _testing) {
      // Expected: RANGE
      _failure(_expect22);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_SLASH() {
    // TERMINAL
    // SLASH <- "/" SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 11;  
      _tokenStart = _cursor;  
    }  
    // "/" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "/"
      $$ = _matchChar(47, '/');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '/'
      _failure(_expect6);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_SPACE() {
    // TERMINAL
    // SPACE <- [\t ] / EOL
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 22;  
      _tokenStart = _cursor;  
    }  
    // [\t ] / EOL
    while (true) {
      // [\t ]
      $$ = _matchMapping(9, 32, _mapping3);
      if (success) break;
      // EOL
      $$ = null;
      success = _ch >= 10 && _ch <= 13 && _lookahead[_ch + -9];
      // Lookahead (EOL)
      if (success) $$ = _parse_EOL();    
      if (!success) {    
        // Expected: EOL    
        if (_cursor > _testing) _failure(_expect20);
      }
      break;
    }
    if (!success && _cursor > _testing) {
      // Expected: SPACE
      _failure(_expect29);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_SPACING() {
    // TERMINAL
    // SPACING <- (SPACE / COMMENT)*
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 23;  
      _tokenStart = _cursor;  
    }  
    // (SPACE / COMMENT)*
    var testing0 = _testing; 
    for (var reps = []; ; ) {
      _testing = _cursor;
      // SPACE / COMMENT
      while (true) {
        // SPACE
        $$ = null;
        success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
        // Lookahead (SPACE)
        if (success) $$ = _parse_SPACE();    
        if (!success) {    
          // Expected: SPACE    
          if (_cursor > _testing) _failure(_expect29);
        }
        if (success) break;
        // COMMENT
        $$ = null;
        success = _ch == 35; // '#'
        // Lookahead (COMMENT)
        if (success) $$ = _parse_COMMENT();
        if (!success) {
          // Expected: '#'
          if (_cursor > _testing) _failure(_expect28);  
        }
        break;
      }
      if (!success && _cursor > _testing) {
        // Expected: SPACE, '#'
        _failure(_expect30);
      }
      if (success) {  
        reps.add($$);
      } else {
        success = true;
        _testing = testing0;
        $$ = reps;
        break; 
      }
    }
    if (!success && _cursor > _testing) {
      // Expected: SPACING
      _failure(_expect31);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_STAR() {
    // TERMINAL
    // STAR <- "*" SPACING
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 15;  
      _tokenStart = _cursor;  
    }  
    // "*" SPACING
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "*"
      $$ = _matchChar(42, '*');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // "*"
        final $1 = seq[0];
        // SPACING
        final $2 = seq[1];
        $$ = $1;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '*'
      _failure(_expect11);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_Sequence() {
    // NONTERMINAL
    // Sequence <- Prefix+
    var $$;
    // Prefix+
    var testing0;
    for (var first = true, reps; ;) {  
      // Prefix  
      $$ = null;  
      success = _ch >= 33 && _ch <= 122 && _lookahead[_ch + 82];  
      // Lookahead (Prefix)  
      if (success) $$ = _parse_Prefix();      
      if (!success) {      
        // Expected: IDENTIFIER, '(', LITERAL, '[', '.'      
        if (_cursor > _testing) _failure(_expect5);  
      }  
      if (success) {
       if (first) {      
          first = false;
          reps = [$$];
          testing0 = _testing;                  
        } else {
          reps.add($$);
        }
        _testing = _cursor;   
      } else {
        success = !first;
        if (success) {      
          _testing = testing0;
          $$ = reps;      
        } else $$ = null;
        break;
      }  
    }
    if (success) {    
      // Prefix+
      final $1 = $$;
      $$ = new SequenceExpression($1);    
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, '(', LITERAL, '[', '.'
      _failure(_expect5);
    }
    return $$;
  }
  
  dynamic _parse_Suffix() {
    // NONTERMINAL
    // Suffix <- Primary (QUESTION / STAR / PLUS)?
    var $$;
    // Primary (QUESTION / STAR / PLUS)?
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // Primary
      $$ = null;
      success = _ch >= 34 && _ch <= 122 && _lookahead[_ch + 171];
      // Lookahead (Primary)
      if (success) $$ = _parse_Primary();    
      if (!success) {    
        // Expected: IDENTIFIER, '(', LITERAL, '[', '.'    
        if (_cursor > _testing) _failure(_expect5);
        break;  
      }
      var seq = new List(2)..[0] = $$;
      // (QUESTION / STAR / PLUS)?
      var testing0 = _testing;
      _testing = _cursor;
      // QUESTION / STAR / PLUS
      while (true) {
        // QUESTION
        $$ = null;
        success = _ch == 63; // '?'
        // Lookahead (QUESTION)
        if (success) $$ = _parse_QUESTION();
        if (!success) {
          // Expected: '?'
          if (_cursor > _testing) _failure(_expect10);  
        }
        if (success) break;
        // STAR
        $$ = null;
        success = _ch == 42; // '*'
        // Lookahead (STAR)
        if (success) $$ = _parse_STAR();
        if (!success) {
          // Expected: '*'
          if (_cursor > _testing) _failure(_expect11);  
        }
        if (success) break;
        // PLUS
        $$ = null;
        success = _ch == 43; // '+'
        // Lookahead (PLUS)
        if (success) $$ = _parse_PLUS();
        if (!success) {
          // Expected: '+'
          if (_cursor > _testing) _failure(_expect12);  
        }
        break;
      }
      if (!success && _cursor > _testing) {
        // Expected: '?', '*', '+'
        _failure(_expect13);
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // Primary
        final $1 = seq[0];
        // (QUESTION / STAR / PLUS)?
        final $2 = seq[1];
        $$ = _suffix($2, $1);    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER, '(', LITERAL, '[', '.'
      _failure(_expect5);
    }
    return $$;
  }
  
  int _toCodePoint(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      throw new StateError("An empty string contains no elements.");
    }
  
    var start = string.codeUnitAt(0);
    if (length == 1) {
      return start;
    }
  
    if ((start & 0xFC00) == 0xD800) {
      var end = string.codeUnitAt(1);
      if ((end & 0xFC00) == 0xDC00) {
        return (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
      }
    }
  
    return start;
  }
  
  List<int> _toCodePoints(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      return const <int>[];
    }
  
    var codePoints = <int>[];
    codePoints.length = length;
    var i = 0;
    var pos = 0;
    for ( ; i < length; pos++) {
      var start = string.codeUnitAt(i);
      i++;
      if ((start & 0xFC00) == 0xD800 && i < length) {
        var end = string.codeUnitAt(i);
        if ((end & 0xFC00) == 0xDC00) {
          codePoints[pos] = (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
          i++;
        } else {
          codePoints[pos] = start;
        }
      } else {
        codePoints[pos] = start;
      }
    }
  
    codePoints.length = pos;
    return codePoints;
  }
  
  static List<bool> _unmap(List<int> mapping) {
    var length = mapping.length;
    var result = new List<bool>(length * 31);
    var offset = 0;
    for (var i = 0; i < length; i++) {
      var v = mapping[i];
      for (var j = 0; j < 31; j++) {
        result[offset++] = v & (1 << j) == 0 ? false : true;
      }
    }
    return result;
  }
  
  List<PegParserError> errors() {
    if (success) {
      return <PegParserError>[];
    }
  
    String escape(int c) {
      switch (c) {
        case 10:
          return r"\n";
        case 13:
          return r"\r";
        case 09:
          return r"\t";
        case -1:
          return "";
      }
      return new String.fromCharCode(c);
    } 
    
    String getc(int position) {  
      if (position < _inputLen) {
        return "'${escape(_input[position])}'";      
      }       
      return "end of file";
    }
  
    var errors = <PegParserError>[];
    if (_failurePos >= _cursor) {
      var set = new Set<PegParserError>();
      set.addAll(_errors);
      for (var error in set) {
        if (error.position >= _failurePos) {
          errors.add(error);
        }
      }
      var names = new Set<String>();  
      names.addAll(_expected);
      if (names.contains(null)) {
        var string = getc(_failurePos);
        var message = "Unexpected $string";
        var error = new PegParserError(PegParserError.UNEXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      } else {      
        var found = getc(_failurePos);      
        var list = names.toList();
        list.sort();
        var message = "Expected ${list.join(", ")} but found $found";
        var error = new PegParserError(PegParserError.EXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      }        
    }
    errors.sort((a, b) => a.position.compareTo(b.position));
    return errors;  
  }
  
  dynamic parse_Grammar() {
    // NONTERMINAL
    // Grammar <- SPACING? GLOBALS? Members? Definition+ EOF
    var $$;
    // SPACING? GLOBALS? Members? Definition+ EOF
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // SPACING?
      var testing0 = _testing;
      _testing = _cursor;
      // SPACING
      $$ = null;
      success = _ch >= 9 && _ch <= 35 && _lookahead[_ch + -9];
      // Lookahead (SPACING is optional)
      if (success) $$ = _parse_SPACING();
      else success = true;
      success = true; 
      _testing = testing0;
      if (!success) break;
      var seq = new List(5)..[0] = $$;
      // GLOBALS?
      var testing1 = _testing;
      _testing = _cursor;
      // GLOBALS
      $$ = null;
      success = _ch == 37; // '%'
      // Lookahead (GLOBALS)
      if (success) $$ = _parse_GLOBALS();
      if (!success) {
        // Expected: '%{'
        if (_cursor > _testing) _failure(_expect0);  
      }
      success = true; 
      _testing = testing1;
      if (!success) break;
      seq[1] = $$;
      // Members?
      var testing2 = _testing;
      _testing = _cursor;
      // Members
      $$ = null;
      success = _ch == 123; // '{'
      // Lookahead (Members)
      if (success) $$ = _parse_Members();
      if (!success) {
        // Expected: {
        if (_cursor > _testing) _failure(_expect1);  
      }
      success = true; 
      _testing = testing2;
      if (!success) break;
      seq[2] = $$;
      // Definition+
      var testing3;
      for (var first = true, reps; ;) {  
        // Definition  
        $$ = null;  
        success = _ch >= 65 && _ch <= 122 && _lookahead[_ch + -9];  
        // Lookahead (Definition)  
        if (success) $$ = _parse_Definition();      
        if (!success) {      
          // Expected: IDENTIFIER      
          if (_cursor > _testing) _failure(_expect2);  
        }  
        if (success) {
         if (first) {      
            first = false;
            reps = [$$];
            testing3 = _testing;                  
          } else {
            reps.add($$);
          }
          _testing = _cursor;   
        } else {
          success = !first;
          if (success) {      
            _testing = testing3;
            $$ = reps;      
          } else $$ = null;
          break;
        }  
      }
      if (!success) break;
      seq[3] = $$;
      // EOF
      $$ = _parse_EOF();
      if (!success) break;
      seq[4] = $$;
      $$ = seq;
      if (success) {    
        // SPACING?
        final $1 = seq[0];
        // GLOBALS?
        final $2 = seq[1];
        // Members?
        final $3 = seq[2];
        // Definition+
        final $4 = seq[3];
        // EOF
        final $5 = seq[4];
        $$ = new Grammar($4, $2, $3);    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: IDENTIFIER
      _failure(_expect2);
    }
    return $$;
  }
  
  void reset(int pos) {
    if (pos == null) {
      throw new ArgumentError('pos: $pos');
    }
    if (pos < 0 || pos > _inputLen) {
      throw new RangeError('pos');
    }      
    _cursor = pos;
    _cache = new List(_inputLen + 1);
    _cachePos = -1;
    _cacheRule = new List(_inputLen + 1);
    _cacheState = new List.filled(((_inputLen + 1) >> 5) + 1, 0);
    _ch = -1;
    _errors = <PegParserError>[];   
    _expected = <String>[];
    _failurePos = -1;  
    success = true;      
    _testing = -1;
    _token = null;
    _tokenLevel = 0;
    _tokenStart = null;
    if (_cursor < _inputLen) {
      _ch = _input[_cursor];
    }    
  }
  
  List _normalize(Iterable sequence) => _flatten(_compact(sequence)); 
}

class PegParserError {
  static const int EXPECTED = 1;    
      
  static const int MALFORMED = 2;    
      
  static const int MISSING = 3;    
      
  static const int UNEXPECTED = 4;    
      
  static const int UNTERMINATED = 5;    
      
  final int hashCode = 0;
  
  final String message;
  
  final int position;
  
  final int start;
  
  final int type;
  
  PegParserError(this.type, this.position, this.start, this.message);
  
  bool operator ==(other) {
    if (identical(this, other)) return true;
    if (other is PegParserError) {
      return type == other.type && position == other.position &&
      start == other.start && message == other.message;  
    }
    return false;
  }
  
}

