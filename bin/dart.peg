variableDeclaration <-
  declaredIdentifier (COMMA identifier)*

declaredIdentifier <-
  metadata finalConstVarOrType identifier

finalConstVarOrType <-
  final type?
  / const type?
  varOrType

varOrType <-
  var
  / type

initializedVariableDeclaration <-
  declaredIdentifier (ASSIGN expression)? (COMMA initializedIdentifier)*

initializedIdentifier <-
  identifier (ASSIGN expression)?

initializedIdentifierList <-
  initializedIdentifier (COMMA initializedIdentifier)*

returnType <-
  void
  / type

functionBody <-
  async? GTE expression SEMICOLON
  / (async / async_star / sync_star)? block

block <-
  OPEN_BRACE statements CLOSE_BRACE

formalParameterList <-
  OPEN_PAREN CLOSE_PAREN
  / OPEN_PAREN normalFormalParameters (COMMA optionalFormalParameters)? CLOSE_PAREN
  / OPEN_PAREN optionalFormalParameters CLOSE_PAREN

normalFormalParameters <-
  normalFormalParameter (COMMA normalFormalParameter)*

optionalFormalParameters <-
  optionalPositionalFormalParameters
  / namedFormalParameters

optionalPositionalFormalParameters <-
  OPEN_BRACKET defaultFormalParameter (COMMA defaultFormalParameter)* CLOSE_BRACKET

namedFormalParameters <-
  OPEN_BRACE defaultNamedParameter (COMMA defaultNamedParameter)* CLOSE_BRACE

normalFormalParameter <-
  functionSignature
  / fieldFormalParameter
  / simpleFormalParameter

simpleFormalParameter <-
  declaredIdentifier
  / metadata identifier

fieldFormalParameter <-
  metadata finalConstVarOrType? this PERIOD identifier formalParameterList?

defaultFormalParameter <-
  normalFormalParameter (ASSIGN expression)?

defaultNamedParameter <-
  normalFormalParameter (SEMICOLON expression)?

classDefinition <-
  metadata abstract? class identifier typeParameters? (superclass mixins?)? interfaces? OPEN_BRACE (metadata classMemberDefinition)* CLOSE_BRACE 
  / metadata abstract? class mixinApplicationClass

mixins <-
  with typeList

classMemberDefinition <-
  declaration SEMICOLON
  / methodSignature functionBody

methodSignature <-
  constructorSignature initializers?
  / factoryConstructorSignature
  / static? functionSignature
  / static? getterSignature
  / static? setterSignature
  / operatorSignature

declaration <-
  constantConstructorSignature (redirection / initializers)?
  / constructorSignature (redirection / initializers)?
  / external constantConstructorSignature
  / external constructorSignature
  / ((external static ?))? getterSignature
  / ((external static?))? setterSignature
  / external? operatorSignature
  / ((external static?))? functionSignature
  / static (final / const) type? staticFinalDeclarationList
  / final type? initializedIdentifierList
  / static? (var / type) initializedIdentifierList

staticFinalDeclarationList <-
  staticFinalDeclaration (COMMA staticFinalDeclaration)*

staticFinalDeclaration <-
  identifier ASSIGN expression

operatorSignature <-
  returnType? operator operator formalParameterList

operator <-
  TILDE
  binaryOperator
  GET_INDEX
  / SET_INDEX

binaryOperator <-
  multiplicativeOperator
  / additiveOperator
  / shiftOperator
  / relationalOperator
  / EQ
  / bitwiseOperator

getterSignature <-
  returnType? get identifier

setterSignature <-
  returnType? set identifier formalParameterList

constructorSignature <-
  identifier (PERIOD identifier)? formalParameterList

initializers <-
  COLON superCallOrFieldInitializer (COMMA superCallOrFieldInitializer)*

superCallOrFieldInitializer <-
  super arguments
  / super PERIOD identifier arguments
  / fieldInitializer

fieldInitializer <-
  (this PERIOD)? identifier ASSIGN conditionalExpression cascadeSection*

factoryConstructorSignature <-
  factory identifier (PERIOD identifier)? formalParameterList

redirectingFactoryConstructorSignature <-
  const? factory identifier (PERIOD identifier)? formalParameterList ASSIGN type (PERIOD identifier)?

constantConstructorSignature <-
  const qualified formalParameterList

superclass <-
  extends type

interfaces <-
  implements typeList

mixinApplicationClass <-
  identifier typeParameters? ASSIGN mixinApplication SEMICOLON

mixinApplication <-
  type mixins interfaces?

enumType <-
  metadata enum id OPEN_BRACE id [COMMA id]* COMMA? CLOSE_BRACE

typeParameter <-
  metadata identifier (extends type)?

typeParameters <-
  LT typeParameter (COMMA typeParameter)* GT

metadata <-
  (AT_SIGN qualified (PERIOD identifier)? (arguments)?)*

expression <-
  assignableExpression assignmentOperator expression
  / conditionalExpression cascadeSection*
  / throwExpression 

expressionWithoutCascade <-
  assignableExpression assignmentOperator expressionWithoutCascade
  / conditionalExpression
  / throwExpressionWithoutCascade

expressionList <-
  expression (COMMA expression)*

primary <-
  thisExpression
  / super assignableSelector
  / functionExpression
  / literal
  / identifier
  / newExpression
  / constObjectExpression
  / OPEN_PAREN expression CLOSE_PAREN

literal <-
  nullLiteral
  / booleanLiteral
  / numericLiteral
  / stringLiteral
  / symbolLiteral
  / mapLiteral
  / listLiteral

nullLiteral <-
  null

numericLiteral <-
  NUMBER
  / HEX_NUMBER

NUMBER <-
  DIGIT+ (PERIOD DIGIT+)? EXPONENT?
  / PERIOD DIGIT+ EXPONENT?

EXPONENT <-
  ('e' / 'E') ('+' / '-')? DIGIT+

HEX_NUMBER <-
  '0x' HEX DIGIT+
  / '0X' HEX DIGIT+

HEX_DIGIT <-
  [a-fA-F]
  / DIGIT

booleanLiteral <-
  true
  / false

stringLiteral <-
  (multilineString / singleLineString)+

singleLineString <-
 '"' stringContentDQ* '"'
 / "'" stringContentSQ* "'"
 / "r'" (!("'" / NEWLINE))* "'"
 / 'r"' (!('"' / NEWLINE))* '"'

multilineString <-
  '"""' stringContentTDQ* '"""'
  / "'''" stringContentTSQ* "'''"
  / 'r"""' (!'"""')* '"""'
  / "r'''" (!"'''")* "'''"

ESCAPE SEQUENCE <-
  '\\n'
  / '\\r'
  / '\\f'
  / '\\b'
  / '\\t'
  / '\\v'
  / '\\x' HEX_DIGIT HEX_DIGIT
  / '\\u' HEX_DIGIT HEX_DIGIT HEX_DIGIT HEX_DIGIT
  / '\\u{' HEX_DIGIT_SEQUENCE '}'

HEX_DIGIT_SEQUENCE <-
  HEX_DIGIT HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT? HEX_DIGIT?

stringContentDQ <- 
  !('\\' / '"' / '$' / NEWLINE)
  / '\\' !(NEWLINE)
  / stringInterpolation

stringContentSQ <- 
  !('\\' / "'" / '$' / NEWLINE)
  / '\\' !(NEWLINE)
  stringInterpolation

stringContentTDQ <-
  !('\\' / '"""' / '$')
  / stringInterpolation


stringContentTSQ <-
  !('\\' / "'''" / '$')
  / stringInterpolation

NEWLINE <-
  '\r\n'
  / [\n\r]


stringInterpolation <-
  '$' IDENTIFIER_NO_DOLLAR
  / '${' SPACING expression CLOSE_BRACE




AT_SIGN <-
  '@' SPACING

LT <-
  '<' SPACING

GT <-
  '<' SPACING

EQ <-
  '==' SPACING

GET_INDEX <-
  '[]' SPACING

SET_INDEX <-
  '[]=' SPACING

TILDE <-
  '~' SPACING

PERIOD <-
  '.' SPACING

OPEN_BRACE <-
  '{' SPACING

CLOSE_BRACE <-
  '}' SPACING

OPEN_BRACKET <-
  '[' SPACING

CLOSE_BRACKET <-
  ']' SPACING

OPEN_PAREN <-
  '(' SPACING

CLOSE_PAREN <-
  ')' SPACING

async <-
  'ASYNC' SPACING

async_star <-
  'ASYNC*' SPACING

sync_star <-
  'SYNC*' SPACING

sync <-
  'SYNC' SPACING

GTE <-
  '=>' SPACING

SEMICOLON <-
  ';' SPACING

ASSIGN <-
  '=' SPACING

COMMA <-
  ',' SPACING

SPACING <-
  [ ]










