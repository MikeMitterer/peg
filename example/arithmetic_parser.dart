// This code was generated by a tool.
// Processing tool available at https://github.com/mezoni/peg

part of peg.example.arithmetic;

num _binop(num left, List right) {
  for(var r in right) {
    if(r[0] != null && r[0].isNotEmpty) {
      switch(r[0]) {
        case "+":
          left += r[1];
          break;
        case "-":
          left -= r[1];
          break;
        case "*":
          left *= r[1];
          break;
        case "/":
          left /= r[1];
          break;
        default:
          throw "Unsupported operation $op";
      }
    }
  }
  return left;
}

class ArithmeticParser {
  static final List<String> _ascii = new List<String>.generate(128, (c) => new String.fromCharCode(c));
  
  static final List<String> _expect0 = <String>["\'(\'", "NUMBER"];
  
  static final List<String> _expect1 = <String>["\'+\'", "\'-\'"];
  
  static final List<String> _expect10 = <String>["\'(\'"];
  
  static final List<String> _expect11 = <String>["\'+\'"];
  
  static final List<String> _expect12 = <String>[];
  
  static final List<String> _expect2 = <String>["\'*\'", "\'/\'"];
  
  static final List<String> _expect3 = <String>["\')\'"];
  
  static final List<String> _expect4 = <String>["\'/\'"];
  
  static final List<String> _expect5 = <String>["EOF"];
  
  static final List<String> _expect6 = <String>["LEADING_SPACES"];
  
  static final List<String> _expect7 = <String>["\'-\'"];
  
  static final List<String> _expect8 = <String>["\'*\'"];
  
  static final List<String> _expect9 = <String>["NUMBER"];
  
  static final List<bool> _lookahead = _unmap([0x3ff01]);
  
  static final List<bool> _mapping0 = _unmap([0x800013]);
  
  static final List<int> _strings0 = <int>[13, 10];
  
  final List<String> _tokenAliases = ["\')\'", "\'/\'", "EOF", "LEADING_SPACES", "\'-\'", "\'*\'", "NUMBER", "\'(\'", "\'+\'"];
  
  final List<int> _tokenFlags = [1, 1, 0, 1, 1, 1, 1, 1, 1];
  
  final List<String> _tokenNames = ["CLOSE", "DIV", "EOF", "LEADING_SPACES", "MINUS", "MUL", "NUMBER", "OPEN", "PLUS"];
  
  static final List<List<int>> _transitions0 = [[40, 40, 48, 57]];
  
  static final List<List<int>> _transitions1 = [[43, 43, 45, 45]];
  
  static final List<List<int>> _transitions2 = [[43, 43], [45, 45]];
  
  static final List<List<int>> _transitions3 = [[42, 42, 47, 47]];
  
  static final List<List<int>> _transitions4 = [[42, 42], [47, 47]];
  
  static final List<List<int>> _transitions5 = [[40, 40], [48, 57]];
  
  static final List<List<int>> _transitions6 = [[9, 10, 32, 32], [13, 13]];
  
  List<Map<int, List>> _cache;
  
  List<int> _cachePos;
  
  List<bool> _cacheable;
  
  int _ch;
  
  int _cursor;
  
  List<ArithmeticParserError> _errors;
  
  List<String> _expected;
  
  int _failurePos;
  
  List<int> _input;
  
  int _inputLen;
  
  int _startPos;
  
  int _testing;
  
  int _token;
  
  int _tokenStart;
  
  bool success;
  
  final String text;
  
  ArithmeticParser(this.text) {
    if (text == null) {
      throw new ArgumentError('text: $text');
    }    
    _input = _toCodePoints(text);
    _inputLen = _input.length;    
    reset(0);    
  }
  
  void _addToCache(dynamic result, int start, int id) {   
    var map = _cache[id];
    if (map == null) {
      map = <int, List>{};
      _cache[id] = map;
    }
    map[start] = [result, _cursor, success];      
  }
  
  void _failure([List<String> expected]) {  
    if (_failurePos > _cursor) {
      return;
    }
    if (_failurePos < _cursor) {    
      _expected = [];
     _failurePos = _cursor;
    }
    if (_token != null) {
      var alias = _tokenAliases[_token];
      var flag = _tokenFlags[_token];
      var name = _tokenNames[_token];
      if (_failurePos > _tokenStart && _failurePos == _inputLen && (flag & 1) != 0) {             
        var message = "Unterminated '$name'";
        _errors.add(new ArithmeticParserError(ArithmeticParserError.UNTERMINATED, _failurePos, _tokenStart, message));
        _expected.addAll(expected);            
      } else if (_failurePos > _tokenStart && (flag & 1) != 0) {             
        var message = "Malformed '$name'";
        _errors.add(new ArithmeticParserError(ArithmeticParserError.MALFORMED, _failurePos, _tokenStart, message));
        _expected.addAll(expected);            
      } else {
        _expected.add(alias);
      }            
    } else if (expected == null) {
      _expected.add(null);
    } else {
      _expected.addAll(expected);
    }   
  }
  
  List _flatten(dynamic value) {
    if (value is List) {
      var result = [];
      var length = value.length;
      for (var i = 0; i < length; i++) {
        var element = value[i];
        if (element is Iterable) {
          result.addAll(_flatten(element));
        } else {
          result.add(element);
        }
      }
      return result;
    } else if (value is Iterable) {
      var result = [];
      for (var element in value) {
        if (element is! List) {
          result.add(element);
        } else {
          result.addAll(_flatten(element));
        }
      }
    }
    return [value];
  }
  
  dynamic _getFromCache(int id) {  
    if (!_cacheable[id]) {  
      _cacheable[id] = true;  
      return null;
    }
    var map = _cache[id];
    if (map == null) {
      return null;
    }
    var data = map[_cursor];
    if (data == null) {
      return null;
    }
    _cursor = data[1];
    success = data[2];
    if (_cursor < _inputLen) {
      _ch = _input[_cursor];
    } else {
      _ch = -1;
    }
    return data;  
  }
  
  int _getState(List<List<int>> transitions) {
    var count = transitions.length;
    var state = 0;
    for ( ; state < count; state++) {
      var found = false;
      var ranges = transitions[state];    
      while (true) {
        var right = ranges.length ~/ 2;
        if (right == 0) {
          break;
        }
        var left = 0;
        if (right == 1) {
          if (_ch <= ranges[1] && _ch >= ranges[0]) {
            found = true;          
          }
          break;
        }
        int middle;
        while (left < right) {
          middle = (left + right) >> 1;
          var index = middle << 1;
          if (ranges[index + 1] < _ch) {
            left = middle + 1;
          } else {
            if (_ch >= ranges[index]) {
              found = true;
              break;
            }
            right = middle;
          }
        }
        break;
      }
      if (found) {
        return state; 
      }   
    }
    if (_ch != -1) {
      return state;
    }
    return state + 1;  
  }
  
  List _list(Object first, List next) {
    var length = next.length;
    var list = new List(length + 1);
    list[0] = first;
    for (var i = 0; i < length; i++) {
      list[i + 1] = next[i][1];
    }
    return list;
  }
  
  String _matchAny() {
    success = _cursor < _inputLen;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }    
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }    
    return null;  
  }
  
  String _matchChar(int ch, String string) {
    success = _ch == ch;
    if (success) {
      var result = string;  
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }  
    return null;  
  }
  
  String _matchMapping(int start, int end, List<bool> mapping) {
    success = _ch >= start && _ch <= end;
    if (success) {    
      if(mapping[_ch - start]) {
        String result;
        if (_ch < 128) {
          result = _ascii[_ch];  
        } else {
          result = new String.fromCharCode(_ch);
        }     
        if (++_cursor < _inputLen) {
          _ch = _input[_cursor];
        } else {
          _ch = -1;
        }      
        return result;
      }
      success = false;
    }  
    return null;  
  }
  
  String _matchRange(int start, int end) {
    success = _ch >= start && _ch <= end;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }        
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }  
      return result;
    }  
    return null;  
  }
  
  String _matchRanges(List<int> ranges) {
    var length = ranges.length;
    for (var i = 0; i < length; i += 2) {    
      if (_ch >= ranges[i]) {
        if (_ch <= ranges[i + 1]) {
          String result;
          if (_ch < 128) {
            result = _ascii[_ch];  
          } else {
            result = new String.fromCharCode(_ch);
          }          
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
             _ch = -1;
          }
          success = true;    
          return result;
        }      
      } else break;  
    }
    success = false;  
    return null;  
  }
  
  String _matchString(List<int> codePoints, String string) {
    var length = codePoints.length;  
    success = _cursor + length <= _inputLen;
    if (success) {
      for (var i = 0; i < length; i++) {
        if (codePoints[i] != _input[_cursor + i]) {
          success = false;
          break;
        }
      }
    } else {
      success = false;
    }  
    if (success) {
      _cursor += length;      
      if (_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return string;      
    }  
    return null; 
  }
  
  void _nextChar() {
    if (++_cursor < _inputLen) {
      _ch = _input[_cursor];
    } else {
      _ch = -1;
    }  
  }
  
  dynamic _parse_Additive() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[1] >= pos) {
      $$ = _getFromCache(1);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[1] = pos;
    }  
    switch (_getState(_transitions0)) {
      case 0:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_Multiplicative();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing0 = _testing; 
            for (var reps = []; ; ) {
              _testing = _cursor;
              switch (_getState(_transitions1)) {
                case 0:
                  var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                  _startPos = _cursor;
                  while (true) {  
                    switch (_getState(_transitions2)) {
                      case 0:
                        var startPos2 = _startPos;
                        _startPos = _cursor;
                        $$ = _parse_PLUS();
                        _startPos = startPos2;
                        break;
                      case 1:
                        var startPos3 = _startPos;
                        _startPos = _cursor;
                        $$ = _parse_MINUS();
                        _startPos = startPos3;
                        break;
                      case 2:
                      case 3:
                        $$ = null;
                        success = false;
                        break;
                    }
                    if (!success && _cursor > _testing) {
                      _failure(_expect1);
                    }
                    if (!success) break;
                    var seq = new List(2)..[0] = $$;
                    $$ = _parse_Multiplicative();
                    if (!success) break;
                    seq[1] = $$;
                    $$ = seq;
                    break;
                  }
                  if (!success) {
                    _ch = ch1;
                    _cursor = pos1;
                  }
                  _startPos = startPos1;
                  break;
                case 1:
                case 2:
                  $$ = null;
                  success = false;
                  break;
              }
              if (!success && _cursor > _testing) {
                _failure(_expect1);
              }
              if (success) {  
                reps.add($$);
              } else {
                success = true;
                _testing = testing0;
                $$ = reps;
                break; 
              }
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos0;
              $$ = _binop($1, $2);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var startPos4 = _startPos;
          _startPos = _cursor;
          $$ = _parse_Multiplicative();
          _startPos = startPos4;
          break;
        }
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect0);
    }
    if (_cacheable[1]) {
      _addToCache($$, pos, 1);
    }    
    return $$;
  }
  
  dynamic _parse_Atom() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[3] >= pos) {
      $$ = _getFromCache(3);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[3] = pos;
    }  
    switch (_getState(_transitions5)) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = _parse_OPEN();
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_Additive();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_CLOSE();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
        var startPos1 = _startPos;
        _startPos = _cursor;
        $$ = _parse_NUMBER();
        _startPos = startPos1;
        break;
      case 2:
      case 3:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect0);
    }
    if (_cacheable[3]) {
      _addToCache($$, pos, 3);
    }    
    return $$;
  }
  
  dynamic _parse_CLOSE() {
    var $$;
    _token = 0;  
    _tokenStart = _cursor;  
    switch (_ch == 41 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = ')';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_WS();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect3);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_DIV() {
    var $$;
    _token = 1;  
    _tokenStart = _cursor;  
    switch (_ch == 47 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = '/';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_WS();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect4);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_EOF() {
    var $$;
    _token = 2;  
    _tokenStart = _cursor;  
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var ch0 = _ch, pos0 = _cursor, testing0 = _testing; 
        _testing = _inputLen + 1;
        $$ = _matchAny();
        _ch = ch0;
        _cursor = pos0; 
        _testing = testing0;
        $$ = null;
        success = !success;
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect5);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_LEADING_SPACES() {
    var $$;
    _token = 3;  
    _tokenStart = _cursor;  
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        $$ = _parse_WS();
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect6);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_MINUS() {
    var $$;
    _token = 4;  
    _tokenStart = _cursor;  
    switch (_ch == 45 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = '-';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_WS();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect7);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_MUL() {
    var $$;
    _token = 5;  
    _tokenStart = _cursor;  
    switch (_ch == 42 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = '*';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_WS();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect8);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_Multiplicative() {
    var $$;          
    var pos = _cursor;             
    if(_cachePos[2] >= pos) {
      $$ = _getFromCache(2);
      if($$ != null) {
        return $$[0];       
      }
    } else {
      _cachePos[2] = pos;
    }  
    switch (_getState(_transitions0)) {
      case 0:
        while (true) {
          var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
          _startPos = _cursor;
          while (true) {  
            $$ = _parse_Atom();
            if (!success) break;
            var seq = new List(2)..[0] = $$;
            var testing0 = _testing; 
            for (var reps = []; ; ) {
              _testing = _cursor;
              switch (_getState(_transitions3)) {
                case 0:
                  var ch1 = _ch, pos1 = _cursor, startPos1 = _startPos;
                  _startPos = _cursor;
                  while (true) {  
                    switch (_getState(_transitions4)) {
                      case 0:
                        var startPos2 = _startPos;
                        _startPos = _cursor;
                        $$ = _parse_MUL();
                        _startPos = startPos2;
                        break;
                      case 1:
                        var startPos3 = _startPos;
                        _startPos = _cursor;
                        $$ = _parse_DIV();
                        _startPos = startPos3;
                        break;
                      case 2:
                      case 3:
                        $$ = null;
                        success = false;
                        break;
                    }
                    if (!success && _cursor > _testing) {
                      _failure(_expect2);
                    }
                    if (!success) break;
                    var seq = new List(2)..[0] = $$;
                    $$ = _parse_Atom();
                    if (!success) break;
                    seq[1] = $$;
                    $$ = seq;
                    break;
                  }
                  if (!success) {
                    _ch = ch1;
                    _cursor = pos1;
                  }
                  _startPos = startPos1;
                  break;
                case 1:
                case 2:
                  $$ = null;
                  success = false;
                  break;
              }
              if (!success && _cursor > _testing) {
                _failure(_expect2);
              }
              if (success) {  
                reps.add($$);
              } else {
                success = true;
                _testing = testing0;
                $$ = reps;
                break; 
              }
            }
            if (!success) break;
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              final $start = startPos0;
              $$ = _binop($1, $2);
            }
            break;
          }
          if (!success) {
            _ch = ch0;
            _cursor = pos0;
          }
          _startPos = startPos0;
          if (success) break;
          var startPos4 = _startPos;
          _startPos = _cursor;
          $$ = _parse_Atom();
          _startPos = startPos4;
          break;
        }
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect0);
    }
    if (_cacheable[2]) {
      _addToCache($$, pos, 2);
    }    
    return $$;
  }
  
  dynamic _parse_NUMBER() {
    var $$;
    _token = 6;  
    _tokenStart = _cursor;  
    switch (_ch >= 48 && _ch <= 57 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0;
          for (var first = true, reps; ;) {  
            $$ = _matchRange(48, 57);  
            if (success) {
             if (first) {      
                first = false;
                reps = [$$];
                testing0 = _testing;                  
              } else {
                reps.add($$);
              }
              _testing = _cursor;   
            } else {
              success = !first;
              if (success) {      
                _testing = testing0;
                $$ = reps;      
              } else $$ = null;
              break;
            }  
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_WS();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = int.parse($1.join());
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect9);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_OPEN() {
    var $$;
    _token = 7;  
    _tokenStart = _cursor;  
    switch (_ch == 40 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = '(';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_WS();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect10);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_PLUS() {
    var $$;
    _token = 8;  
    _tokenStart = _cursor;  
    switch (_ch == 43 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          $$ = '+';
          success = true;
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
            _ch = -1;
          }
          if (!success) break;
          var seq = new List(2)..[0] = $$;
          $$ = _parse_WS();
          if (!success) break;
          seq[1] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $start = startPos0;
            $$ = $1;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect11);
    }
    _token = null;
    _tokenStart = null;
    return $$;
  }
  
  dynamic _parse_WS() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
      case 2:
        var startPos0 = _startPos;
        _startPos = _cursor;
        var testing0 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          switch (_getState(_transitions6)) {
            case 0:
              var startPos1 = _startPos;
              _startPos = _cursor;
              $$ = _matchMapping(9, 32, _mapping0);
              _startPos = startPos1;
              break;
            case 1:
              while (true) {
                var startPos2 = _startPos;
                _startPos = _cursor;
                $$ = _matchMapping(9, 32, _mapping0);
                _startPos = startPos2;
                if (success) break;
                var startPos3 = _startPos;
                _startPos = _cursor;
                $$ = _matchString(_strings0, '\r\n');
                _startPos = startPos3;
                break;
              }
              break;
            case 2:
            case 3:
              $$ = null;
              success = false;
              break;
          }
          if (!success && _cursor > _testing) {
            _failure(const [null]);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing0;
            $$ = reps;
            break; 
          }
        }
        _startPos = startPos0;
        break;
      case 1:
        $$ = null;
        success = true;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect12);
    }
    return $$;
  }
  
  String _text([int offset = 0]) {
    return new String.fromCharCodes(_input.sublist(_startPos + offset, _cursor));
  }
  
  int _toCodePoint(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      throw new StateError("An empty string contains no elements.");
    }
  
    var start = string.codeUnitAt(0);
    if (length == 1) {
      return start;
    }
  
    if ((start & 0xFC00) == 0xD800) {
      var end = string.codeUnitAt(1);
      if ((end & 0xFC00) == 0xDC00) {
        return (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
      }
    }
  
    return start;
  }
  
  List<int> _toCodePoints(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      return const <int>[];
    }
  
    var codePoints = <int>[];
    codePoints.length = length;
    var i = 0;
    var pos = 0;
    for ( ; i < length; pos++) {
      var start = string.codeUnitAt(i);
      i++;
      if ((start & 0xFC00) == 0xD800 && i < length) {
        var end = string.codeUnitAt(i);
        if ((end & 0xFC00) == 0xDC00) {
          codePoints[pos] = (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
          i++;
        } else {
          codePoints[pos] = start;
        }
      } else {
        codePoints[pos] = start;
      }
    }
  
    codePoints.length = pos;
    return codePoints;
  }
  
  static List<bool> _unmap(List<int> mapping) {
    var length = mapping.length;
    var result = new List<bool>(length * 31);
    var offset = 0;
    for (var i = 0; i < length; i++) {
      var v = mapping[i];
      for (var j = 0; j < 31; j++) {
        result[offset++] = v & (1 << j) == 0 ? false : true;
      }
    }
    return result;
  }
  
  List<ArithmeticParserError> errors() {
    if (success) {
      return <ArithmeticParserError>[];
    }
  
    String escape(int c) {
      switch (c) {
        case 10:
          return r"\n";
        case 13:
          return r"\r";
        case 09:
          return r"\t";
        case -1:
          return "";
      }
      return new String.fromCharCode(c);
    } 
    
    String getc(int position) {  
      if (position < _inputLen) {
        return "'${escape(_input[position])}'";      
      }       
      return "end of file";
    }
  
    var errors = <ArithmeticParserError>[];
    if (_failurePos >= _cursor) {
      var set = new Set<ArithmeticParserError>();
      set.addAll(_errors);
      for (var error in set) {
        if (error.position >= _failurePos) {
          errors.add(error);
        }
      }
      var names = new Set<String>();  
      names.addAll(_expected);
      if (names.contains(null)) {
        var string = getc(_failurePos);
        var message = "Unexpected $string";
        var error = new ArithmeticParserError(ArithmeticParserError.UNEXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      } else {      
        var found = getc(_failurePos);      
        var list = names.toList();
        list.sort();
        var message = "Expected ${list.join(", ")} but found $found";
        var error = new ArithmeticParserError(ArithmeticParserError.EXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      }        
    }
    errors.sort((a, b) => a.position.compareTo(b.position));
    return errors;  
  }
  
  dynamic parse_Expr() {
    var $$;
    switch (_ch >= 0 && _ch <= 1114111 ? 0 : _ch == -1 ? 2 : 1) {
      case 0:
        var ch0 = _ch, pos0 = _cursor, startPos0 = _startPos;
        _startPos = _cursor;
        while (true) {  
          var testing0 = _testing;
          _testing = _cursor;
          $$ = _parse_LEADING_SPACES();
          success = true; 
          _testing = testing0;
          if (!success) break;
          var seq = new List(3)..[0] = $$;
          $$ = _parse_Additive();
          if (!success) break;
          seq[1] = $$;
          $$ = _parse_EOF();
          if (!success) break;
          seq[2] = $$;
          $$ = seq;
          if (success) {    
            final $1 = seq[0];
            final $2 = seq[1];
            final $3 = seq[2];
            final $start = startPos0;
            $$ = $2;
          }
          break;
        }
        if (!success) {
          _ch = ch0;
          _cursor = pos0;
        }
        _startPos = startPos0;
        break;
      case 1:
      case 2:
        $$ = null;
        success = false;
        break;
    }
    if (!success && _cursor > _testing) {
      _failure(_expect0);
    }
    return $$;
  }
  
  void reset(int pos) {
    if (pos == null) {
      throw new ArgumentError('pos: $pos');
    }
    if (pos < 0 || pos > _inputLen) {
      throw new RangeError('pos');
    }      
    _cursor = pos;
    _cache = new List<Map<int, List>>(15);
    _cachePos = new List<int>.filled(15, -1);  
    _cacheable = new List<bool>.filled(15, false);
    _ch = -1;
    _errors = <ArithmeticParserError>[];   
    _expected = <String>[];
    _failurePos = -1;
    _startPos = pos;        
    _testing = -1;
    _token = null;
    _tokenStart = null;  
    if (_cursor < _inputLen) {
      _ch = _input[_cursor];
    }
    success = true;    
  }
  
}

class ArithmeticParserError {
  static const int EXPECTED = 1;    
      
  static const int MALFORMED = 2;    
      
  static const int MISSING = 3;    
      
  static const int UNEXPECTED = 4;    
      
  static const int UNTERMINATED = 5;    
      
  final int hashCode = 0;
  
  final String message;
  
  final int position;
  
  final int start;
  
  final int type;
  
  ArithmeticParserError(this.type, this.position, this.start, this.message);
  
  bool operator ==(other) {
    if (identical(this, other)) return true;
    if (other is ArithmeticParserError) {
      return type == other.type && position == other.position &&
      start == other.start && message == other.message;  
    }
    return false;
  }
  
}

