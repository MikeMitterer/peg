--------------------------------
Log entries:
Expr           SENTENCE <= MORHEME : callerAll == 0
Sentence       LEXEME   <= MORHEME : callerSentence > 0 (Expr)
Term           LEXEME   <= MORHEME : isRecursive && MORPHEME (Atom)
Atom           SENTENCE <= MORHEME : calleeLexeme > 0 (Sentence)
CLOSE          LEXEME   <= MORHEME : callerSentence > 0 (Atom)
EOF            LEXEME   <= MORHEME : callerSentence > 0 (Expr)
LEADING_SPACES LEXEME   <= MORHEME : callerSentence > 0 (Expr)
NUMBER         LEXEME   <= MORHEME : callerSentence > 0 (Atom)
OPEN           LEXEME   <= MORHEME : callerSentence > 0 (Atom)
Sentence       SENTENCE <= LEXEME  : calleeLexeme > 0 (Term, Sentence)
Term           SENTENCE <= LEXEME  : calleeSentence > 0 (Atom)
DIV            LEXEME   <= MORHEME : callerSentence > 0 (Term)
MINUS          LEXEME   <= MORHEME : callerSentence > 0 (Sentence)
MUL            LEXEME   <= MORHEME : callerSentence > 0 (Term)
PLUS           LEXEME   <= MORHEME : callerSentence > 0 (Sentence)
--------------------------------
Starting rules:
Expr
--------------------------------
Rules:
--------------------------------
Atom:
 Type: Sentence (nonterminal)
 Direct callees:
  (L) CLOSE
  (L) NUMBER
  (L) OPEN
  (S) Sentence
 All callees:
  (S) Atom
  (L) CLOSE
  (L) DIV
  (L) MINUS
  (L) MUL
  (L) NUMBER
  (L) OPEN
  (L) PLUS
  (S) Sentence
  (S) Term
  (M) WS
 Direct callers:
  (S) Term
 All callers:
  (S) Atom
  (S) Expr
  (S) Sentence
  (S) Term
 Start characters:
  [(][0-9]
 Expected lexemes (tokens):
  NUMBER '('
--------------------------------
CLOSE:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) Atom
 All callers:
  (S) Atom
  (S) Expr
  (S) Sentence
  (S) Term
 Start characters:
  [)]
 Expected lexemes (tokens):
  ')'
--------------------------------
DIV:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) Term
 All callers:
  (S) Atom
  (S) Expr
  (S) Sentence
  (S) Term
 Start characters:
  [/]
 Expected lexemes (tokens):
  '/'
--------------------------------
EOF:
 Type: Lexeme (token)
 Direct callees:
 All callees:
 Direct callers:
  (S) Expr
 All callers:
  (S) Expr
 Start characters:
  [\u0000-\u10ffff]
 Expected lexemes (tokens):
  EOF
--------------------------------
Expr:
 Type: Sentence (nonterminal)
 Direct callees:
  (L) EOF
  (L) LEADING_SPACES
  (S) Sentence
 All callees:
  (S) Atom
  (L) CLOSE
  (L) DIV
  (L) EOF
  (L) LEADING_SPACES
  (L) MINUS
  (L) MUL
  (L) NUMBER
  (L) OPEN
  (L) PLUS
  (S) Sentence
  (S) Term
  (M) WS
 Direct callers:
 All callers:
 Start characters:
  [\u0000-\u10ffff]
 Expected lexemes (tokens):
  NUMBER '('
--------------------------------
LEADING_SPACES:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) Expr
 All callers:
  (S) Expr
 Start characters:
  [\u0000-\u10ffff]
 Expected lexemes (tokens):
  LEADING_SPACES
--------------------------------
MINUS:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) Sentence
 All callers:
  (S) Atom
  (S) Expr
  (S) Sentence
  (S) Term
 Start characters:
  [-]
 Expected lexemes (tokens):
  '-'
--------------------------------
MUL:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) Term
 All callers:
  (S) Atom
  (S) Expr
  (S) Sentence
  (S) Term
 Start characters:
  [*]
 Expected lexemes (tokens):
  '*'
--------------------------------
NUMBER:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) Atom
 All callers:
  (S) Atom
  (S) Expr
  (S) Sentence
  (S) Term
 Start characters:
  [0-9]
 Expected lexemes (tokens):
  NUMBER
--------------------------------
OPEN:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) Atom
 All callers:
  (S) Atom
  (S) Expr
  (S) Sentence
  (S) Term
 Start characters:
  [(]
 Expected lexemes (tokens):
  '('
--------------------------------
PLUS:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) Sentence
 All callers:
  (S) Atom
  (S) Expr
  (S) Sentence
  (S) Term
 Start characters:
  [+]
 Expected lexemes (tokens):
  '+'
--------------------------------
Sentence:
 Type: Sentence (nonterminal)
 Direct callees:
  (L) MINUS
  (L) PLUS
  (S) Sentence
  (S) Term
 All callees:
  (S) Atom
  (L) CLOSE
  (L) DIV
  (L) MINUS
  (L) MUL
  (L) NUMBER
  (L) OPEN
  (L) PLUS
  (S) Sentence
  (S) Term
  (M) WS
 Direct callers:
  (S) Atom
  (S) Expr
  (S) Sentence
 All callers:
  (S) Atom
  (S) Expr
  (S) Sentence
  (S) Term
 Start characters:
  [(][0-9]
 Expected lexemes (tokens):
  NUMBER '('
--------------------------------
Term:
 Type: Sentence (nonterminal)
 Direct callees:
  (S) Atom
  (L) DIV
  (L) MUL
  (S) Term
 All callees:
  (S) Atom
  (L) CLOSE
  (L) DIV
  (L) MINUS
  (L) MUL
  (L) NUMBER
  (L) OPEN
  (L) PLUS
  (S) Sentence
  (S) Term
  (M) WS
 Direct callers:
  (S) Sentence
  (S) Term
 All callers:
  (S) Atom
  (S) Expr
  (S) Sentence
  (S) Term
 Start characters:
  [(][0-9]
 Expected lexemes (tokens):
  NUMBER '('
--------------------------------
WS:
 Type: Morheme
 Direct callees:
 All callees:
 Direct callers:
  (L) CLOSE
  (L) DIV
  (L) LEADING_SPACES
  (L) MINUS
  (L) MUL
  (L) NUMBER
  (L) OPEN
  (L) PLUS
 All callers:
  (S) Atom
  (L) CLOSE
  (L) DIV
  (S) Expr
  (L) LEADING_SPACES
  (L) MINUS
  (L) MUL
  (L) NUMBER
  (L) OPEN
  (L) PLUS
  (S) Sentence
  (S) Term
 Start characters:
  [\u0000-\u10ffff]
 Expected lexemes (tokens):
--------------------------------
Sentences (nonterminals):
  Atom
  Expr
  Sentence
  Term
--------------------------------
Lexemes (tokens):
  CLOSE
  DIV
  EOF
  LEADING_SPACES
  MINUS
  MUL
  NUMBER
  OPEN
  PLUS
--------------------------------
Morphemes:
  WS
--------------------------------
Lexeme (token) names:
  CLOSE : ')'
  DIV : '/'
  EOF : EOF
  LEADING_SPACES : LEADING_SPACES
  MINUS : '-'
  MUL : '*'
  NUMBER : NUMBER
  OPEN : '('
  PLUS : '+'
--------------------------------
Recursives:
  Atom
  Sentence
  Term
