--------------------------------
Log entries:
Start                    SENTENCE <= MORHEME : callerAll == 0
Expression               LEXEME   <= MORHEME : callerSentence > 0 (Start)
AdditiveExpression       LEXEME   <= MORHEME : isRecursive && MORPHEME (MultiplicativeExpression)
MultiplicativeExpression LEXEME   <= MORHEME : isRecursive && MORPHEME (UnaryExpression)
UnaryExpression          LEXEME   <= MORHEME : isRecursive && MORPHEME (PrimaryExpression)
PrimaryExpression        SENTENCE <= MORHEME : calleeLexeme > 0 (Expression)
CONSTANT                 LEXEME   <= MORHEME : callerSentence > 0 (PrimaryExpression)
EOF                      LEXEME   <= MORHEME : callerSentence > 0 (Start)
LEADING_SPACES           LEXEME   <= MORHEME : callerSentence > 0 (Start)
LPAREN                   LEXEME   <= MORHEME : callerSentence > 0 (PrimaryExpression)
RPAREN                   LEXEME   <= MORHEME : callerSentence > 0 (PrimaryExpression)
Expression               SENTENCE <= LEXEME  : calleeLexeme > 0 (AdditiveExpression)
AdditiveExpression       SENTENCE <= LEXEME  : calleeLexeme > 0 (MultiplicativeExpression)
MultiplicativeExpression SENTENCE <= LEXEME  : calleeLexeme > 0 (UnaryExpression)
UnaryExpression          SENTENCE <= LEXEME  : calleeSentence > 0 (PrimaryExpression)
DIV                      LEXEME   <= MORHEME : callerSentence > 0 (MultiplicativeExpression)
MINUS                    LEXEME   <= MORHEME : callerSentence > 0 (AdditiveExpression, UnaryExpression)
MUL                      LEXEME   <= MORHEME : callerSentence > 0 (MultiplicativeExpression)
PLUS                     LEXEME   <= MORHEME : callerSentence > 0 (AdditiveExpression)
--------------------------------
Starting rules:
Start
--------------------------------
Rules:
--------------------------------
AdditiveExpression:
 Type: Sentence (nonterminal)
 Direct callees:
  (L) MINUS
  (S) MultiplicativeExpression
  (L) PLUS
 All callees:
  (S) AdditiveExpression
  (L) CONSTANT
  (L) DIV
  (S) Expression
  (L) LPAREN
  (L) MINUS
  (L) MUL
  (S) MultiplicativeExpression
  (M) NUMBER
  (L) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (S) UnaryExpression
  (M) WS
 Direct callers:
  (S) Expression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [(][-][0-9]
 Expected lexemes (tokens):
  CONSTANT '(' '-'
--------------------------------
CONSTANT:
 Type: Lexeme (token)
 Direct callees:
  (M) NUMBER
 All callees:
  (M) NUMBER
  (M) WS
 Direct callers:
  (S) PrimaryExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [0-9]
 Expected lexemes (tokens):
  CONSTANT
--------------------------------
DIV:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) MultiplicativeExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [/]
 Expected lexemes (tokens):
  '/'
--------------------------------
EOF:
 Type: Lexeme (token)
 Direct callees:
 All callees:
 Direct callers:
  (S) Start
 All callers:
  (S) Start
 Start characters:
  [\u0000-\u10ffff]
 Expected lexemes (tokens):
  EOF
--------------------------------
Expression:
 Type: Sentence (nonterminal)
 Direct callees:
  (S) AdditiveExpression
 All callees:
  (S) AdditiveExpression
  (L) CONSTANT
  (L) DIV
  (S) Expression
  (L) LPAREN
  (L) MINUS
  (L) MUL
  (S) MultiplicativeExpression
  (M) NUMBER
  (L) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (S) UnaryExpression
  (M) WS
 Direct callers:
  (S) PrimaryExpression
  (S) Start
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [(][-][0-9]
 Expected lexemes (tokens):
  CONSTANT '(' '-'
--------------------------------
LEADING_SPACES:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) Start
 All callers:
  (S) Start
 Start characters:
  [\u0000-\u10ffff]
 Expected lexemes (tokens):
  LEADING_SPACES
--------------------------------
LPAREN:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) PrimaryExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [(]
 Expected lexemes (tokens):
  '('
--------------------------------
MINUS:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) AdditiveExpression
  (S) UnaryExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [-]
 Expected lexemes (tokens):
  '-'
--------------------------------
MUL:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) MultiplicativeExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [*]
 Expected lexemes (tokens):
  '*'
--------------------------------
MultiplicativeExpression:
 Type: Sentence (nonterminal)
 Direct callees:
  (L) DIV
  (L) MUL
  (S) UnaryExpression
 All callees:
  (S) AdditiveExpression
  (L) CONSTANT
  (L) DIV
  (S) Expression
  (L) LPAREN
  (L) MINUS
  (L) MUL
  (S) MultiplicativeExpression
  (M) NUMBER
  (L) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (S) UnaryExpression
  (M) WS
 Direct callers:
  (S) AdditiveExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [(][-][0-9]
 Expected lexemes (tokens):
  CONSTANT '(' '-'
--------------------------------
NUMBER:
 Type: Morheme
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (L) CONSTANT
 All callers:
  (S) AdditiveExpression
  (L) CONSTANT
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [0-9]
 Expected lexemes (tokens):
  null
--------------------------------
PLUS:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) AdditiveExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [+]
 Expected lexemes (tokens):
  '+'
--------------------------------
PrimaryExpression:
 Type: Sentence (nonterminal)
 Direct callees:
  (L) CONSTANT
  (S) Expression
  (L) LPAREN
  (L) RPAREN
 All callees:
  (S) AdditiveExpression
  (L) CONSTANT
  (L) DIV
  (S) Expression
  (L) LPAREN
  (L) MINUS
  (L) MUL
  (S) MultiplicativeExpression
  (M) NUMBER
  (L) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (S) UnaryExpression
  (M) WS
 Direct callers:
  (S) UnaryExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [(][0-9]
 Expected lexemes (tokens):
  CONSTANT '('
--------------------------------
RPAREN:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) PrimaryExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [)]
 Expected lexemes (tokens):
  ')'
--------------------------------
Start:
 Type: Sentence (nonterminal)
 Direct callees:
  (L) EOF
  (S) Expression
  (L) LEADING_SPACES
 All callees:
  (S) AdditiveExpression
  (L) CONSTANT
  (L) DIV
  (L) EOF
  (S) Expression
  (L) LEADING_SPACES
  (L) LPAREN
  (L) MINUS
  (L) MUL
  (S) MultiplicativeExpression
  (M) NUMBER
  (L) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (S) UnaryExpression
  (M) WS
 Direct callers:
 All callers:
 Start characters:
  [\u0000-\u10ffff]
 Expected lexemes (tokens):
  CONSTANT '(' '-'
--------------------------------
UnaryExpression:
 Type: Sentence (nonterminal)
 Direct callees:
  (L) MINUS
  (S) PrimaryExpression
  (S) UnaryExpression
 All callees:
  (S) AdditiveExpression
  (L) CONSTANT
  (L) DIV
  (S) Expression
  (L) LPAREN
  (L) MINUS
  (L) MUL
  (S) MultiplicativeExpression
  (M) NUMBER
  (L) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (S) UnaryExpression
  (M) WS
 Direct callers:
  (S) MultiplicativeExpression
  (S) UnaryExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [(][-][0-9]
 Expected lexemes (tokens):
  CONSTANT '(' '-'
--------------------------------
WS:
 Type: Morheme
 Direct callees:
 All callees:
 Direct callers:
  (L) DIV
  (L) LEADING_SPACES
  (L) LPAREN
  (L) MINUS
  (L) MUL
  (M) NUMBER
  (L) PLUS
  (L) RPAREN
 All callers:
  (S) AdditiveExpression
  (L) CONSTANT
  (L) DIV
  (S) Expression
  (L) LEADING_SPACES
  (L) LPAREN
  (L) MINUS
  (L) MUL
  (S) MultiplicativeExpression
  (M) NUMBER
  (L) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (S) Start
  (S) UnaryExpression
 Start characters:
  [\u0000-\u10ffff]
 Expected lexemes (tokens):
--------------------------------
Sentences (nonterminals):
  AdditiveExpression
  Expression
  MultiplicativeExpression
  PrimaryExpression
  Start
  UnaryExpression
--------------------------------
Lexemes (tokens):
  CONSTANT
  DIV
  EOF
  LEADING_SPACES
  LPAREN
  MINUS
  MUL
  PLUS
  RPAREN
--------------------------------
Morphemes:
  NUMBER
  WS
--------------------------------
Lexeme (token) names:
  CONSTANT : CONSTANT
  DIV : '/'
  EOF : EOF
  LEADING_SPACES : LEADING_SPACES
  LPAREN : '('
  MINUS : '-'
  MUL : '*'
  PLUS : '+'
  RPAREN : ')'
--------------------------------
Recursives:
  AdditiveExpression
  Expression
  MultiplicativeExpression
  PrimaryExpression
  UnaryExpression
