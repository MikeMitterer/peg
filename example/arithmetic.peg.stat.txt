--------------------------------
Log entries:
Start                    SENTENCE <= MORHEME : callerAll == 0
Expression               LEXEME   <= MORHEME : callerSentence > 0 (Start)
AdditiveExpression       LEXEME   <= MORHEME : isRecursive && MORPHEME (MultiplicativeExpression)
MultiplicativeExpression LEXEME   <= MORHEME : isRecursive && MORPHEME (UnaryExpression)
UnaryExpression          LEXEME   <= MORHEME : isRecursive && MORPHEME (PrimaryExpression)
PrimaryExpression        SENTENCE <= MORHEME : calleeLexeme > 0 (Expression)
CONSTANT                 LEXEME   <= MORHEME : callerSentence > 0 (PrimaryExpression)
EOF                      LEXEME   <= MORHEME : callerSentence > 0 (Start)
LEADING_SPACES           LEXEME   <= MORHEME : callerSentence > 0 (Start)
LPAREN                   LEXEME   <= MORHEME : callerSentence > 0 (PrimaryExpression)
RPAREN                   LEXEME   <= MORHEME : callerSentence > 0 (PrimaryExpression)
Expression               SENTENCE <= LEXEME  : calleeLexeme > 0 (AdditiveExpression)
AdditiveExpression       SENTENCE <= LEXEME  : calleeLexeme > 0 (MultiplicativeExpression)
MultiplicativeExpression SENTENCE <= LEXEME  : calleeLexeme > 0 (UnaryExpression)
UnaryExpression          SENTENCE <= LEXEME  : calleeSentence > 0 (PrimaryExpression)
ADDITIVE_OPERATOR        LEXEME   <= MORHEME : callerSentence > 0 (AdditiveExpression)
MULTIPLICATIVE_OPERATOR  LEXEME   <= MORHEME : callerSentence > 0 (MultiplicativeExpression)
UNARY_OPERATOR           LEXEME   <= MORHEME : callerSentence > 0 (UnaryExpression)
--------------------------------
Starting rules:
Start
--------------------------------
Rules:
--------------------------------
ADDITIVE_OPERATOR:
 Type: Lexeme (token)
 Direct callees:
  (M) MINUS
  (M) PLUS
 All callees:
  (M) MINUS
  (M) PLUS
  (M) WS
 Direct callers:
  (S) AdditiveExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [+][-]
 Expected lexemes (tokens):
  ADDITIVE_OPERATOR
--------------------------------
AdditiveExpression:
 Type: Sentence (nonterminal)
 Direct callees:
  (L) ADDITIVE_OPERATOR
  (S) MultiplicativeExpression
 All callees:
  (L) ADDITIVE_OPERATOR
  (S) AdditiveExpression
  (L) CONSTANT
  (M) DIV
  (S) Expression
  (L) LPAREN
  (M) MINUS
  (M) MUL
  (L) MULTIPLICATIVE_OPERATOR
  (S) MultiplicativeExpression
  (M) NUMBER
  (M) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (L) UNARY_OPERATOR
  (S) UnaryExpression
  (M) WS
 Direct callers:
  (S) Expression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [(][-][0-9]
 Expected lexemes (tokens):
  CONSTANT '(' '-'
--------------------------------
CONSTANT:
 Type: Lexeme (token)
 Direct callees:
  (M) NUMBER
 All callees:
  (M) NUMBER
  (M) WS
 Direct callers:
  (S) PrimaryExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [0-9]
 Expected lexemes (tokens):
  CONSTANT
--------------------------------
DIV:
 Type: Morheme
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (L) MULTIPLICATIVE_OPERATOR
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (L) MULTIPLICATIVE_OPERATOR
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [/]
 Expected lexemes (tokens):
  /
--------------------------------
EOF:
 Type: Lexeme (token)
 Direct callees:
 All callees:
 Direct callers:
  (S) Start
 All callers:
  (S) Start
 Start characters:
  [\u0000-\u10ffff]
 Expected lexemes (tokens):
  EOF
--------------------------------
Expression:
 Type: Sentence (nonterminal)
 Direct callees:
  (S) AdditiveExpression
 All callees:
  (L) ADDITIVE_OPERATOR
  (S) AdditiveExpression
  (L) CONSTANT
  (M) DIV
  (S) Expression
  (L) LPAREN
  (M) MINUS
  (M) MUL
  (L) MULTIPLICATIVE_OPERATOR
  (S) MultiplicativeExpression
  (M) NUMBER
  (M) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (L) UNARY_OPERATOR
  (S) UnaryExpression
  (M) WS
 Direct callers:
  (S) PrimaryExpression
  (S) Start
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [(][-][0-9]
 Expected lexemes (tokens):
  CONSTANT '(' '-'
--------------------------------
LEADING_SPACES:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) Start
 All callers:
  (S) Start
 Start characters:
  [\u0000-\u10ffff]
 Expected lexemes (tokens):
  LEADING_SPACES
--------------------------------
LPAREN:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) PrimaryExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [(]
 Expected lexemes (tokens):
  '('
--------------------------------
MINUS:
 Type: Morheme
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (L) ADDITIVE_OPERATOR
  (L) UNARY_OPERATOR
 All callers:
  (L) ADDITIVE_OPERATOR
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (L) UNARY_OPERATOR
  (S) UnaryExpression
 Start characters:
  [-]
 Expected lexemes (tokens):
  -
--------------------------------
MUL:
 Type: Morheme
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (L) MULTIPLICATIVE_OPERATOR
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (L) MULTIPLICATIVE_OPERATOR
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [*]
 Expected lexemes (tokens):
  *
--------------------------------
MULTIPLICATIVE_OPERATOR:
 Type: Lexeme (token)
 Direct callees:
  (M) DIV
  (M) MUL
 All callees:
  (M) DIV
  (M) MUL
  (M) WS
 Direct callers:
  (S) MultiplicativeExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [*][/]
 Expected lexemes (tokens):
  MULTIPLICATIVE_OPERATOR
--------------------------------
MultiplicativeExpression:
 Type: Sentence (nonterminal)
 Direct callees:
  (L) MULTIPLICATIVE_OPERATOR
  (S) UnaryExpression
 All callees:
  (L) ADDITIVE_OPERATOR
  (S) AdditiveExpression
  (L) CONSTANT
  (M) DIV
  (S) Expression
  (L) LPAREN
  (M) MINUS
  (M) MUL
  (L) MULTIPLICATIVE_OPERATOR
  (S) MultiplicativeExpression
  (M) NUMBER
  (M) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (L) UNARY_OPERATOR
  (S) UnaryExpression
  (M) WS
 Direct callers:
  (S) AdditiveExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [(][-][0-9]
 Expected lexemes (tokens):
  CONSTANT '(' '-'
--------------------------------
NUMBER:
 Type: Morheme
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (L) CONSTANT
 All callers:
  (S) AdditiveExpression
  (L) CONSTANT
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [0-9]
 Expected lexemes (tokens):
  null
--------------------------------
PLUS:
 Type: Morheme
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (L) ADDITIVE_OPERATOR
 All callers:
  (L) ADDITIVE_OPERATOR
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [+]
 Expected lexemes (tokens):
  +
--------------------------------
PrimaryExpression:
 Type: Sentence (nonterminal)
 Direct callees:
  (L) CONSTANT
  (S) Expression
  (L) LPAREN
  (L) RPAREN
 All callees:
  (L) ADDITIVE_OPERATOR
  (S) AdditiveExpression
  (L) CONSTANT
  (M) DIV
  (S) Expression
  (L) LPAREN
  (M) MINUS
  (M) MUL
  (L) MULTIPLICATIVE_OPERATOR
  (S) MultiplicativeExpression
  (M) NUMBER
  (M) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (L) UNARY_OPERATOR
  (S) UnaryExpression
  (M) WS
 Direct callers:
  (S) UnaryExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [(][0-9]
 Expected lexemes (tokens):
  CONSTANT '('
--------------------------------
RPAREN:
 Type: Lexeme (token)
 Direct callees:
  (M) WS
 All callees:
  (M) WS
 Direct callers:
  (S) PrimaryExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [)]
 Expected lexemes (tokens):
  ')'
--------------------------------
Start:
 Type: Sentence (nonterminal)
 Direct callees:
  (L) EOF
  (S) Expression
  (L) LEADING_SPACES
 All callees:
  (L) ADDITIVE_OPERATOR
  (S) AdditiveExpression
  (L) CONSTANT
  (M) DIV
  (L) EOF
  (S) Expression
  (L) LEADING_SPACES
  (L) LPAREN
  (M) MINUS
  (M) MUL
  (L) MULTIPLICATIVE_OPERATOR
  (S) MultiplicativeExpression
  (M) NUMBER
  (M) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (L) UNARY_OPERATOR
  (S) UnaryExpression
  (M) WS
 Direct callers:
 All callers:
 Start characters:
  [\u0000-\u10ffff]
 Expected lexemes (tokens):
  CONSTANT '(' '-'
--------------------------------
UNARY_OPERATOR:
 Type: Lexeme (token)
 Direct callees:
  (M) MINUS
 All callees:
  (M) MINUS
  (M) WS
 Direct callers:
  (S) UnaryExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [-]
 Expected lexemes (tokens):
  '-'
--------------------------------
UnaryExpression:
 Type: Sentence (nonterminal)
 Direct callees:
  (S) PrimaryExpression
  (L) UNARY_OPERATOR
  (S) UnaryExpression
 All callees:
  (L) ADDITIVE_OPERATOR
  (S) AdditiveExpression
  (L) CONSTANT
  (M) DIV
  (S) Expression
  (L) LPAREN
  (M) MINUS
  (M) MUL
  (L) MULTIPLICATIVE_OPERATOR
  (S) MultiplicativeExpression
  (M) NUMBER
  (M) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (L) UNARY_OPERATOR
  (S) UnaryExpression
  (M) WS
 Direct callers:
  (S) MultiplicativeExpression
  (S) UnaryExpression
 All callers:
  (S) AdditiveExpression
  (S) Expression
  (S) MultiplicativeExpression
  (S) PrimaryExpression
  (S) Start
  (S) UnaryExpression
 Start characters:
  [(][-][0-9]
 Expected lexemes (tokens):
  CONSTANT '(' '-'
--------------------------------
WS:
 Type: Morheme
 Direct callees:
 All callees:
 Direct callers:
  (M) DIV
  (L) LEADING_SPACES
  (L) LPAREN
  (M) MINUS
  (M) MUL
  (M) NUMBER
  (M) PLUS
  (L) RPAREN
 All callers:
  (L) ADDITIVE_OPERATOR
  (S) AdditiveExpression
  (L) CONSTANT
  (M) DIV
  (S) Expression
  (L) LEADING_SPACES
  (L) LPAREN
  (M) MINUS
  (M) MUL
  (L) MULTIPLICATIVE_OPERATOR
  (S) MultiplicativeExpression
  (M) NUMBER
  (M) PLUS
  (S) PrimaryExpression
  (L) RPAREN
  (S) Start
  (L) UNARY_OPERATOR
  (S) UnaryExpression
 Start characters:
  [\u0000-\u10ffff]
 Expected lexemes (tokens):
--------------------------------
Sentences (nonterminals):
  AdditiveExpression
  Expression
  MultiplicativeExpression
  PrimaryExpression
  Start
  UnaryExpression
--------------------------------
Lexemes (tokens):
  ADDITIVE_OPERATOR
  CONSTANT
  EOF
  LEADING_SPACES
  LPAREN
  MULTIPLICATIVE_OPERATOR
  RPAREN
  UNARY_OPERATOR
--------------------------------
Morphemes:
  DIV
  MINUS
  MUL
  NUMBER
  PLUS
  WS
--------------------------------
Lexeme (token) names:
  ADDITIVE_OPERATOR : ADDITIVE_OPERATOR
  CONSTANT : CONSTANT
  EOF : EOF
  LEADING_SPACES : LEADING_SPACES
  LPAREN : '('
  MULTIPLICATIVE_OPERATOR : MULTIPLICATIVE_OPERATOR
  RPAREN : ')'
  UNARY_OPERATOR : '-'
--------------------------------
Recursives:
  AdditiveExpression
  Expression
  MultiplicativeExpression
  PrimaryExpression
  UnaryExpression
