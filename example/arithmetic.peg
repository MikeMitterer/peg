%{
part of peg.example.arithmetic;

num _binop(num left, num right, String op) {
  switch(op) {
    case "+":
      return left + right;
    case "-":
      return left - right;
    case "*":
      return left * right;
    case "/":
      return left / right;
    default:
      throw "Unsupported operation $op";  
  }
}

}%

### Sentences (nonterminals) ###

Expr <-
  LEADING_SPACES? Sentence EOF { $$ = $2; }

Sentence <-
  Term (PLUS / MINUS) Sentence { $$ = _binop($1, $3, $2); }
  / Term

Term <-
  Atom (MUL / DIV) Term { $$ = _binop($1, $3, $2); }
  / Atom

Atom <-
  NUMBER
  / OPEN Sentence CLOSE { $$ = $2; }

### Lexemes (tokens) ###

CLOSE <-
  ')' WS

DIV <-
  '/' WS { $$ = $1; }

EOF <-
  !.

LEADING_SPACES <-
  WS

MINUS <-
  '-' WS { $$ = $1; }

MUL <-
  '*' WS { $$ = $1; }

NUMBER <-
  [0-9]+ WS { $$ = int.parse($1.join()); }

OPEN <-
  '(' WS

PLUS <-
  '+' WS { $$ = $1; }

### Morphemes ###

WS <-
  ([\t-\n\r ] / '\r\n')*

