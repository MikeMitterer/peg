%{
library json_parser;

class _KeyValuePair<K, V> {
  final K key;
  final V value;
  const _KeyValuePair(this.key, this.value);
  String toString() => "$key : $value";
}

String _hex2str(String hex) {
  return new String.fromCharCode(int.parse(hex, radix: 16));
}

String _escape(String string) {
  switch (string) {
    case "\"":
      return "\u0022";
    case "\\":
      return "\u005c";
    case "/":
      return "\u002f";    
    case "r":
      return "\u000d";
    case "n":
      return "\u000a";  
    case "t":
      return "\u0009";
    case "b":
      return "\u0008";
    case "f":
      return "\u000c";      
  }
  return string;
}
}%

# Nonterminals

jsonText <-
  WS? value EOF { $$ = $2; }

value <-
  FALSE
  / NULL
  / TRUE
  / object
  / array
  / NUMBER
  / STRING

object <-
  BEGIN_OBJECT members? END_OBJECT { $$ = $2.fold({}, (p, c) => p..[c.key] = c.value); }

members <-
  member (VALUE_SEPARATOR member)* { $$ = _list($1, $2); }

member <-
  STRING NAME_SEPARATOR value { $$ = new _KeyValuePair($1, $3); }

array <-
  BEGIN_ARRAY values? END_ARRAY { $$ = $2; }

values <-
  value (VALUE_SEPARATOR value)* { $$ = _list($1, $2); }

# Lexemes

BEGIN_ARRAY <-
  '[' WS

BEGIN_OBJECT <-
  '{' WS

END_ARRAY <-
  ']' WS

END_OBJECT <-
  '}' WS

EOF <-
  !.

FALSE <-
  'false' WS { $$ = false; }

NAME_SEPARATOR <-
  ':' WS

NULL <-
  'null' WS { $$ = null; }

NUMBER <-
  NUMBER_PART WS { $$ = $1; }

STRING <-
  QUOTATION_MARK STRING_CHARS QUOTATION_MARK WS { $$ = $2; }

TRUE <-
  'true' WS { $$ = true; }

VALUE_SEPARATOR <-
  ',' WS

WS <-
  [\t-\n\r ]*

# Morphemes

CHAR <-
  UNESCAPED
  / ESCAPE ["/\\bfnrt] { $$ = _escape($2); }
  / ESCAPE 'u' CHAR_HEXDIG { $$ = _hex2str($3); }

CHAR_HEXDIG <-
  HEXDIG HEXDIG HEXDIG HEXDIG { $$ = _text(); }

DECIMAL_POINT <-
  '.' WS { $$ = $1; }

DIGIT <-
  [0-9]

ESCAPE <-
  '\\'

EXP <-
  ('e' / 'E') ('-' / '+')? DIGIT+

FRAC <-
  DECIMAL_POINT DIGIT+

HEXDIG <-
  DIGIT
  / [a-f]
  / [A-F]

INT <-
  DIGIT+

NUMBER_PART <-
  '-'? INT FRAC? EXP? { $$ = double.parse(_text()); }

QUOTATION_MARK <-
  ["]

STRING_CHARS <-
  CHAR* { $$ = $1.join(); }

UNESCAPED <-
  [ -!]
  / [#-\[]
  / [\]-~]
  / [\]-\u10ffff]