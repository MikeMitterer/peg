%{
library json_parser;

class _KeyValuePair<K, V> {
  final K key;
  final V value;
  const _KeyValuePair(this.key, this.value);
  String toString() => "$key : $value";
}

String _hex2str(String hex) {
  return new String.fromCharCode(int.parse(hex, radix: 16));
}

// "\\/bfnrt
String _escape(String string) {
  switch (string) {
    case "\"":
      return "\u0022";
    case "\\":
      return "\u005c";
    case "/":
      return "\u002f";    
    case "r":
      return "\u000d";
    case "n":
      return "\u000a";  
    case "t":
      return "\u0009";
    case "b":
      return "\u0008";
    case "f":
      return "\u000c";      
  }
  return string;
}

num _parseNumber(minus, integer, frac, exp) {
  var sign = minus == null ? 1 : -1;  
  if (frac != null || exp != null) {
    frac = frac == null ? "" : frac;
    exp = exp == null ? "" : exp;
    return double.parse("$integer$frac$exp") * sign;
  } else {
    return int.parse(integer) * sign;
  }
}

}%

jsonText <-
  WS? (object / array) EOF { $$ = $2; }

value <-
  FALSE
  / NULL
  / TRUE
  / object
  / array
  / NUMBER
  / STRING

object <-
  BEGIN_OBJECT (member (VALUE_SEPARATOR member { $$ = $2; })*)? END_OBJECT  
  { $$ = _flatten($2).fold({}, (p, c) => p..[c.key] = c.value); }

member <-
  STRING NAME_SEPARATOR value
  { $$ = new _KeyValuePair($1, $3); }

array <-
  BEGIN_ARRAY (value (VALUE_SEPARATOR value { $$ = $2; })*)? END_ARRAY
  { $$ = _flatten($2).fold([], (p, c) => p..add(c)); }

QUOTATION_MARK <-
  ["]

BEGIN_ARRAY <-
  [\[] WS

BEGIN_OBJECT <-
  [{] WS

DECIMAL_POINT <-
  [.] WS { $$ = $1; }

E <-
  ([e] / [E]) WS { $$ = $1; }

EXP <-
  E (MINUS / PLUS)? DIGIT+ WS { $$ = _flatten(_compact([$1, $2, $3])).join(); }

END_ARRAY <-
  [\]] WS

END_OBJECT <-
  '}' WS

FALSE <-
  "false" WS { $$ = false; }

FRAC <-
  DECIMAL_POINT DIGIT+ WS { $$ = _flatten([$1, $2]).join(); }

INT <-
  DIGIT+ WS { $$ = _flatten($1).join(); }

MINUS <-
  [-] WS { $$ = $1; }

NAME_SEPARATOR <-
  [:] WS

NULL <-
  "null" WS { $$ = null; }

NUMBER <-
  MINUS? INT FRAC? EXP? WS { $$ = _parseNumber($1, $2, $3, $4); }

PLUS <-
 [+] WS { $$ = $1; }

STRING <-
  QUOTATION_MARK CHAR* QUOTATION_MARK WS { $$ = _flatten($2).join(); }

TRUE <-
  "true" WS { $$ = true; }

VALUE_SEPARATOR <-
  [,] WS

CHAR <-
  UNESCAPED
  / ESCAPE ["\\/bfnrt]                     { $$ = _escape($2); }
  / ESCAPE [u] HEXDIG HEXDIG HEXDIG HEXDIG { $$ = _hex2str([$3, $4, $5, $6].join()); }

DIGIT <-
  [0-9]

ESCAPE <-
  [\\]

EOF <-
   !.

HEXDIG <-
  DIGIT
  / [a-f]
  / [A-F]

UNESCAPED <-
  [ !]
  / [#-\[]
  / [\]-~]
  / [\u5D-\u10FFFF]

WS <-
  [ \t\n\r]*
