// This code was generated by a tool.
// Processing tool available at https://github.com/mezoni/peg

library json_parser;

class _KeyValuePair<K, V> {
  final K key;
  final V value;
  const _KeyValuePair(this.key, this.value);
  String toString() => "$key : $value";
}

String _hex2str(String hex) {
  return new String.fromCharCode(int.parse(hex, radix: 16));
}

// "\\/bfnrt
String _escape(String string) {
  switch (string) {
    case "\"":
      return "\u0022";
    case "\\":
      return "\u005c";
    case "/":
      return "\u002f";    
    case "r":
      return "\u000d";
    case "n":
      return "\u000a";  
    case "t":
      return "\u0009";
    case "b":
      return "\u0008";
    case "f":
      return "\u000c";      
  }
  return string;
}

num _parseNumber(minus, integer, frac, exp) {
  var sign = minus == null ? 1 : -1;  
  if (frac != null || exp != null) {
    frac = frac == null ? "" : frac;
    exp = exp == null ? "" : exp;
    return double.parse("$integer$frac$exp") * sign;
  } else {
    return int.parse(integer) * sign;
  }
}
class JsonParser {
  static final List<String> _ascii = new List<String>.generate(128, (c) => new String.fromCharCode(c));
  
  static final List<String> _expect0 = <String>["\'{\'"];
  
  static final List<String> _expect1 = <String>["\'[\'"];
  
  static final List<String> _expect10 = <String>["\'}\'"];
  
  static final List<String> _expect11 = <String>["\':\'"];
  
  static final List<String> _expect12 = <String>["\']\'"];
  
  static final List<String> _expect13 = <String>["QUOTATION_MARK"];
  
  static final List<String> _expect14 = <String>["\'.\'"];
  
  static final List<String> _expect15 = <String>["E", "e"];
  
  static final List<String> _expect16 = <String>["+", "-"];
  
  static final List<String> _expect17 = <String>["DIGIT"];
  
  static final List<String> _expect18 = <String>["EXP"];
  
  static final List<String> _expect19 = <String>["INT"];
  
  static final List<String> _expect2 = <String>["\'[\'", "\'{\'"];
  
  static final List<String> _expect20 = <String>["\'\\\'"];
  
  static final List<String> _expect21 = <String>["HEXDIG"];
  
  static final List<String> _expect22 = <String>["CHAR"];
  
  static final List<String> _expect23 = <String>["EOF"];
  
  static final List<String> _expect24 = <String>["UNESCAPED"];
  
  static final List<String> _expect25 = <String>["WS"];
  
  static final List<String> _expect3 = <String>["\'false\'"];
  
  static final List<String> _expect4 = <String>["\'null\'"];
  
  static final List<String> _expect5 = <String>["\'true\'"];
  
  static final List<String> _expect6 = <String>["NUMBER"];
  
  static final List<String> _expect7 = <String>["STRING"];
  
  static final List<String> _expect8 = <String>["\'[\'", "\'false\'", "\'null\'", "\'true\'", "\'{\'", "NUMBER", "STRING"];
  
  static final List<String> _expect9 = <String>["\',\'"];
  
  static final List<bool> _lookahead = _unmap([0x800013, 0x0, 0x100000, 0x600000, 0x7fe4, 0x10020000, 0x1ffc0820, 0x7e0, 0xfc0]);
  
  // '\"', '/', '\\', 'b', 'f', 'n', 'r', 't'
  static final List<bool> _mapping0 = _unmap([0x2001, 0x8000000, 0x144044]);
  
  // '\t', '\n', '\r', ' '
  static final List<bool> _mapping1 = _unmap([0x800013]);
  
  // 'false'
  static final List<int> _strings0 = <int>[102, 97, 108, 115, 101];
  
  // 'null'
  static final List<int> _strings1 = <int>[110, 117, 108, 108];
  
  // 'true'
  static final List<int> _strings2 = <int>[116, 114, 117, 101];
  
  final List<int> _tokenFlags = [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 1];
  
  final List<String> _tokenNames = ["QUOTATION_MARK", "\'[\'", "\'{\'", "\'.\'", "\']\'", "\'}\'", "EXP", "\'false\'", "\'.\'", "INT", "\':\'", "\'null\'", "NUMBER", "STRING", "\'true\'", "\',\'", "CHAR", "DIGIT", "\'\\\'", "EOF", "HEXDIG", "UNESCAPED", "WS"];
  
  List _cache;
  
  int _cachePos;
  
  List<int> _cacheRule;
  
  List<int> _cacheState;
  
  int _ch;
  
  int _cursor;
  
  List<JsonParserError> _errors;
  
  List<String> _expected;
  
  int _failurePos;
  
  List<int> _input;
  
  int _inputLen;
  
  int _testing;
  
  int _token;
  
  int _tokenLevel;
  
  int _tokenStart;
  
  bool success;
  
  final String text;
  
  JsonParser(this.text) {
    if (text == null) {
      throw new ArgumentError('text: $text');
    }    
    _input = _toCodePoints(text);
    _inputLen = _input.length;
    if (_inputLen >= 0x3fffffe8 / 32) {
      throw new StateError('File size to big: $_inputLen');
    }  
    reset(0);    
  }
  
  Iterable _compact(Iterable iterable) {  
    if (iterable is List) {
      var hasNull = false;
      var length = iterable.length;
      for (var i = 0; i < length; i++) {
        if (iterable[i] == null) {
          hasNull = true;
          break;
        }
      }
      if (!hasNull) {
        return iterable;
      }
      var result = [];
      for (var i = 0; i < length; i++) {
        var element = iterable[i];
        if (element != null) {
          result.add(element);
        }
      }
      return result;
    }   
    var result = [];
    for (var element in iterable) {   
      if (element != null) {
        result.add(element);
      }
    }
    return result;  
  }
  
  void _failure([List<String> expected]) {  
    if (_failurePos > _cursor) {
      return;
    }
    if (_failurePos < _cursor) {    
      _expected = [];
     _failurePos = _cursor;
    }
    if (_token != null) {
      var flag = _tokenFlags[_token];
      var name = _tokenNames[_token];
      if (_failurePos == _inputLen && (flag & 1) != 0) {             
        var message = "Unterminated $name";
        _errors.add(new JsonParserError(JsonParserError.UNEXPECTED, _failurePos, _tokenStart, message));            
      }
      else if (_failurePos > _tokenStart && (flag & 1) != 0) {             
        var message = "Malformed $name";
        _errors.add(new JsonParserError(JsonParserError.MALFORMED, _failurePos, _tokenStart, message));            
      }
      _expected.add(name);        
    } else if (expected == null) {
      _expected.add(null);
    } else {
      _expected.addAll(expected);
    }   
  }
  
  List _flatten(dynamic value) {
    if (value is List) {
      var result = [];
      var length = value.length;
      for (var i = 0; i < length; i++) {
        var element = value[i];
        if (element is Iterable) {
          result.addAll(_flatten(element));
        } else {
          result.add(element);
        }
      }
      return result;
    } else if (value is Iterable) {
      var result = [];
      for (var element in value) {
        if (element is! List) {
          result.add(element);
        } else {
          result.addAll(_flatten(element));
        }
      }
    }
    return [value];
  }
  
  String _matchAny() {
    success = _cursor < _inputLen;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }    
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }    
    return null;  
  }
  
  String _matchChar(int ch, String string) {
    success = _ch == ch;
    if (success) {
      var result = string;  
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return result;
    }  
    return null;  
  }
  
  String _matchMapping(int start, int end, List<bool> mapping) {
    success = _ch >= start && _ch <= end;
    if (success) {    
      if(mapping[_ch - start]) {
        String result;
        if (_ch < 128) {
          result = _ascii[_ch];  
        } else {
          result = new String.fromCharCode(_ch);
        }     
        if (++_cursor < _inputLen) {
          _ch = _input[_cursor];
        } else {
          _ch = -1;
        }      
        return result;
      }
      success = false;
    }  
    return null;  
  }
  
  String _matchRange(int start, int end) {
    success = _ch >= start && _ch <= end;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }        
      if (++_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }  
      return result;
    }  
    return null;  
  }
  
  String _matchRanges(List<int> ranges) {
    var length = ranges.length;
    for (var i = 0; i < length; i += 2) {
      if (_ch <= ranges[i + 1]) {
        if (_ch >= ranges[i]) {
          String result;
          if (_ch < 128) {
            result = _ascii[_ch];  
          } else {
            result = new String.fromCharCode(_ch);
          }          
          if (++_cursor < _inputLen) {
            _ch = _input[_cursor];
          } else {
             _ch = -1;
          }
          success = true;    
          return result;
        }      
      } else break;  
    }
    success = false;  
    return null;  
  }
  
  String _matchString(List<int> runes, String string) {
    var length = runes.length;  
    success = true;  
    if (_cursor + length <= _inputLen) {
      for (var i = 0; i < length; i++) {
        if (runes[i] != _input[_cursor + i]) {
          success = false;
          break;
        }
      }
    } else {
      success = false;
    }  
    if (success) {
      _cursor += length;      
      if (_cursor < _inputLen) {
        _ch = _input[_cursor];
      } else {
        _ch = -1;
      }    
      return string;      
    }  
    return null; 
  }
  
  dynamic _parse_BEGIN_ARRAY() {
    // TERMINAL
    // BEGIN_ARRAY <- "[" WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 1;  
      _tokenStart = _cursor;  
    }  
    // "[" WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "["
      $$ = _matchChar(91, '[');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '['
      _failure(_expect1);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_BEGIN_OBJECT() {
    // TERMINAL
    // BEGIN_OBJECT <- "{" WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 2;  
      _tokenStart = _cursor;  
    }  
    // "{" WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "{"
      $$ = _matchChar(123, '{');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '{'
      _failure(_expect0);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_CHAR() {
    // TERMINAL
    // CHAR <- UNESCAPED / ESCAPE ["/\bfnrt] / ESCAPE "u" HEXDIG HEXDIG HEXDIG HEXDIG
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 16;  
      _tokenStart = _cursor;  
    }  
    // UNESCAPED / ESCAPE ["/\bfnrt] / ESCAPE "u" HEXDIG HEXDIG HEXDIG HEXDIG
    while (true) {
      // UNESCAPED
      $$ = _parse_UNESCAPED();
      if (success) break;
      // ESCAPE ["/\bfnrt]
      var ch0 = _ch, pos0 = _cursor;
      while (true) {  
        // ESCAPE
        $$ = null;
        success = _ch == 92; // '\'
        // Lookahead (ESCAPE)
        if (success) $$ = _parse_ESCAPE();
        if (!success) {
          // Expected: '\'
          if (_cursor > _testing) _failure(_expect20);  
          break;  
        }
        var seq = new List(2)..[0] = $$;
        // ["/\bfnrt]
        $$ = _matchMapping(34, 116, _mapping0);
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        if (success) {    
          // ESCAPE
          final $1 = seq[0];
          // ["/\bfnrt]
          final $2 = seq[1];
          $$ = _escape($2);    
        }
        break;  
      }
      if (!success) {
        _ch = ch0;
        _cursor = pos0;
      }
      if (success) break;
      // ESCAPE "u" HEXDIG HEXDIG HEXDIG HEXDIG
      var ch1 = _ch, pos1 = _cursor;
      while (true) {  
        // ESCAPE
        $$ = null;
        success = _ch == 92; // '\'
        // Lookahead (ESCAPE)
        if (success) $$ = _parse_ESCAPE();
        if (!success) {
          // Expected: '\'
          if (_cursor > _testing) _failure(_expect20);  
          break;  
        }
        var seq = new List(6)..[0] = $$;
        // "u"
        $$ = _matchChar(117, 'u');
        if (!success) break;
        seq[1] = $$;
        // HEXDIG
        $$ = null;
        success = _ch >= 48 && _ch <= 102 && _lookahead[_ch + 157];
        // Lookahead (HEXDIG)
        if (success) $$ = _parse_HEXDIG();    
        if (!success) {    
          // Expected: HEXDIG    
          if (_cursor > _testing) _failure(_expect21);
          break;  
        }
        seq[2] = $$;
        // HEXDIG
        $$ = null;
        success = _ch >= 48 && _ch <= 102 && _lookahead[_ch + 157];
        // Lookahead (HEXDIG)
        if (success) $$ = _parse_HEXDIG();    
        if (!success) {    
          // Expected: HEXDIG    
          if (_cursor > _testing) _failure(_expect21);
          break;  
        }
        seq[3] = $$;
        // HEXDIG
        $$ = null;
        success = _ch >= 48 && _ch <= 102 && _lookahead[_ch + 157];
        // Lookahead (HEXDIG)
        if (success) $$ = _parse_HEXDIG();    
        if (!success) {    
          // Expected: HEXDIG    
          if (_cursor > _testing) _failure(_expect21);
          break;  
        }
        seq[4] = $$;
        // HEXDIG
        $$ = null;
        success = _ch >= 48 && _ch <= 102 && _lookahead[_ch + 157];
        // Lookahead (HEXDIG)
        if (success) $$ = _parse_HEXDIG();    
        if (!success) {    
          // Expected: HEXDIG    
          if (_cursor > _testing) _failure(_expect21);
          break;  
        }
        seq[5] = $$;
        $$ = seq;
        if (success) {    
          // ESCAPE
          final $1 = seq[0];
          // "u"
          final $2 = seq[1];
          // HEXDIG
          final $3 = seq[2];
          // HEXDIG
          final $4 = seq[3];
          // HEXDIG
          final $5 = seq[4];
          // HEXDIG
          final $6 = seq[5];
          $$ = _hex2str([$3, $4, $5, $6].join());    
        }
        break;  
      }
      if (!success) {
        _ch = ch1;
        _cursor = pos1;
      }
      break;
    }
    if (!success && _cursor > _testing) {
      // Expected: CHAR
      _failure(_expect22);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_DECIMAL_POINT() {
    // TERMINAL
    // DECIMAL_POINT <- "." WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 3;  
      _tokenStart = _cursor;  
    }  
    // "." WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "."
      $$ = _matchChar(46, '.');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // "."
        final $1 = seq[0];
        // WS
        final $2 = seq[1];
        $$ = $1;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '.'
      _failure(_expect14);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_DIGIT() {
    // TERMINAL
    // DIGIT <- [0-9]
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 17;  
      _tokenStart = _cursor;  
    }  
    // [0-9]
    $$ = _matchRange(48, 57);
    if (!success && _cursor > _testing) {
      // Expected: DIGIT
      _failure(_expect17);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_END_ARRAY() {
    // TERMINAL
    // END_ARRAY <- "]" WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 4;  
      _tokenStart = _cursor;  
    }  
    // "]" WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "]"
      $$ = _matchChar(93, ']');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: ']'
      _failure(_expect12);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_END_OBJECT() {
    // TERMINAL
    // END_OBJECT <- "}" WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 5;  
      _tokenStart = _cursor;  
    }  
    // "}" WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "}"
      $$ = _matchChar(125, '}');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '}'
      _failure(_expect10);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_EOF() {
    // TERMINAL
    // EOF <- !.
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 19;  
      _tokenStart = _cursor;  
    }  
    // !.
    var ch0 = _ch, pos0 = _cursor, testing0 = _testing; 
    _testing = _inputLen + 1;
    // .
    $$ = _matchAny();
    _ch = ch0;
    _cursor = pos0; 
    _testing = testing0;
    $$ = null;
    success = !success;
    if (!success && _cursor > _testing) {
      // Expected: EOF
      _failure(_expect23);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_ESCAPE() {
    // TERMINAL
    // ESCAPE <- "\\"
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 18;  
      _tokenStart = _cursor;  
    }  
    // "\\"
    $$ = _matchChar(92, '\\');
    if (!success && _cursor > _testing) {
      // Expected: '\'
      _failure(_expect20);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_EXP() {
    // TERMINAL
    // EXP <- ("e" / "E") ("-" / "+")? DIGIT+ WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 6;  
      _tokenStart = _cursor;  
    }  
    // ("e" / "E") ("-" / "+")? DIGIT+ WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "e" / "E"
      while (true) {
        // "e"
        $$ = _matchChar(101, 'e');
        if (success) break;
        // "E"
        $$ = _matchChar(69, 'E');
        break;
      }
      if (!success && _cursor > _testing) {
        // Expected: e, E
        _failure(_expect15);
      }
      if (!success) break;
      var seq = new List(4)..[0] = $$;
      // ("-" / "+")?
      var testing0 = _testing;
      _testing = _cursor;
      // "-" / "+"
      while (true) {
        // "-"
        $$ = _matchChar(45, '-');
        if (success) break;
        // "+"
        $$ = _matchChar(43, '+');
        break;
      }
      if (!success && _cursor > _testing) {
        // Expected: -, +
        _failure(_expect16);
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      seq[1] = $$;
      // DIGIT+
      var testing1;
      for (var first = true, reps; ;) {  
        // DIGIT  
        $$ = null;  
        success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];  
        // Lookahead (DIGIT)  
        if (success) $$ = _parse_DIGIT();      
        if (!success) {      
          // Expected: DIGIT      
          if (_cursor > _testing) _failure(_expect17);  
        }  
        if (success) {
         if (first) {      
            first = false;
            reps = [$$];
            testing1 = _testing;                  
          } else {
            reps.add($$);
          }
          _testing = _cursor;   
        } else {
          success = !first;
          if (success) {      
            _testing = testing1;
            $$ = reps;      
          } else $$ = null;
          break;
        }  
      }
      if (!success) break;
      seq[2] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[3] = $$;
      $$ = seq;
      if (success) {    
        // "e" / "E"
        final $1 = seq[0];
        // ("-" / "+")?
        final $2 = seq[1];
        // DIGIT+
        final $3 = seq[2];
        // WS
        final $4 = seq[3];
        $$ = _flatten(_compact([$1, $2, $3])).join();    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: EXP
      _failure(_expect18);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_FALSE() {
    // TERMINAL
    // FALSE <- "false" WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 7;  
      _tokenStart = _cursor;  
    }  
    // "false" WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "false"
      $$ = _matchString(_strings0, 'false');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // "false"
        final $1 = seq[0];
        // WS
        final $2 = seq[1];
        $$ = false;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'false'
      _failure(_expect3);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_FRAC() {
    // TERMINAL
    // FRAC <- DECIMAL_POINT DIGIT+ WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 8;  
      _tokenStart = _cursor;  
    }  
    // DECIMAL_POINT DIGIT+ WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // DECIMAL_POINT
      $$ = null;
      success = _ch == 46; // '.'
      // Lookahead (DECIMAL_POINT)
      if (success) $$ = _parse_DECIMAL_POINT();
      if (!success) {
        // Expected: '.'
        if (_cursor > _testing) _failure(_expect14);  
        break;  
      }
      var seq = new List(3)..[0] = $$;
      // DIGIT+
      var testing0;
      for (var first = true, reps; ;) {  
        // DIGIT  
        $$ = null;  
        success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];  
        // Lookahead (DIGIT)  
        if (success) $$ = _parse_DIGIT();      
        if (!success) {      
          // Expected: DIGIT      
          if (_cursor > _testing) _failure(_expect17);  
        }  
        if (success) {
         if (first) {      
            first = false;
            reps = [$$];
            testing0 = _testing;                  
          } else {
            reps.add($$);
          }
          _testing = _cursor;   
        } else {
          success = !first;
          if (success) {      
            _testing = testing0;
            $$ = reps;      
          } else $$ = null;
          break;
        }  
      }
      if (!success) break;
      seq[1] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        // DECIMAL_POINT
        final $1 = seq[0];
        // DIGIT+
        final $2 = seq[1];
        // WS
        final $3 = seq[2];
        $$ = _flatten([$1, $2]).join();    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '.'
      _failure(_expect14);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_HEXDIG() {
    // TERMINAL
    // HEXDIG <- DIGIT / [a-f] / [A-F]
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 20;  
      _tokenStart = _cursor;  
    }  
    // DIGIT / [a-f] / [A-F]
    while (true) {
      // DIGIT
      $$ = null;
      success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];
      // Lookahead (DIGIT)
      if (success) $$ = _parse_DIGIT();    
      if (!success) {    
        // Expected: DIGIT    
        if (_cursor > _testing) _failure(_expect17);
      }
      if (success) break;
      // [a-f]
      $$ = _matchRange(97, 102);
      if (success) break;
      // [A-F]
      $$ = _matchRange(65, 70);
      break;
    }
    if (!success && _cursor > _testing) {
      // Expected: HEXDIG
      _failure(_expect21);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_INT() {
    // TERMINAL
    // INT <- DIGIT+ WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 9;  
      _tokenStart = _cursor;  
    }  
    // DIGIT+ WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // DIGIT+
      var testing0;
      for (var first = true, reps; ;) {  
        // DIGIT  
        $$ = null;  
        success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];  
        // Lookahead (DIGIT)  
        if (success) $$ = _parse_DIGIT();      
        if (!success) {      
          // Expected: DIGIT      
          if (_cursor > _testing) _failure(_expect17);  
        }  
        if (success) {
         if (first) {      
            first = false;
            reps = [$$];
            testing0 = _testing;                  
          } else {
            reps.add($$);
          }
          _testing = _cursor;   
        } else {
          success = !first;
          if (success) {      
            _testing = testing0;
            $$ = reps;      
          } else $$ = null;
          break;
        }  
      }
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // DIGIT+
        final $1 = seq[0];
        // WS
        final $2 = seq[1];
        $$ = _flatten($1).join();    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: INT
      _failure(_expect19);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_NAME_SEPARATOR() {
    // TERMINAL
    // NAME_SEPARATOR <- ":" WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 10;  
      _tokenStart = _cursor;  
    }  
    // ":" WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // ":"
      $$ = _matchChar(58, ':');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: ':'
      _failure(_expect11);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_NULL() {
    // TERMINAL
    // NULL <- "null" WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 11;  
      _tokenStart = _cursor;  
    }  
    // "null" WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "null"
      $$ = _matchString(_strings1, 'null');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // "null"
        final $1 = seq[0];
        // WS
        final $2 = seq[1];
        $$ = null;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'null'
      _failure(_expect4);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_NUMBER() {
    // TERMINAL
    // NUMBER <- "-"? INT FRAC? EXP? WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 12;  
      _tokenStart = _cursor;  
    }  
    // "-"? INT FRAC? EXP? WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "-"?
      var testing0 = _testing;
      _testing = _cursor;
      // "-"
      $$ = _matchChar(45, '-');
      success = true; 
      _testing = testing0;
      if (!success) break;
      var seq = new List(5)..[0] = $$;
      // INT
      $$ = null;
      success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];
      // Lookahead (INT)
      if (success) $$ = _parse_INT();    
      if (!success) {    
        // Expected: INT    
        if (_cursor > _testing) _failure(_expect19);
        break;  
      }
      seq[1] = $$;
      // FRAC?
      var testing1 = _testing;
      _testing = _cursor;
      // FRAC
      $$ = null;
      success = _ch == 46; // '.'
      // Lookahead (FRAC)
      if (success) $$ = _parse_FRAC();
      if (!success) {
        // Expected: '.'
        if (_cursor > _testing) _failure(_expect14);  
      }
      success = true; 
      _testing = testing1;
      if (!success) break;
      seq[2] = $$;
      // EXP?
      var testing2 = _testing;
      _testing = _cursor;
      // EXP
      $$ = null;
      success = _ch >= 69 && _ch <= 101 && _lookahead[_ch + 13];
      // Lookahead (EXP)
      if (success) $$ = _parse_EXP();    
      if (!success) {    
        // Expected: EXP    
        if (_cursor > _testing) _failure(_expect18);
      }
      success = true; 
      _testing = testing2;
      if (!success) break;
      seq[3] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[4] = $$;
      $$ = seq;
      if (success) {    
        // "-"?
        final $1 = seq[0];
        // INT
        final $2 = seq[1];
        // FRAC?
        final $3 = seq[2];
        // EXP?
        final $4 = seq[3];
        // WS
        final $5 = seq[4];
        $$ = _parseNumber($1, $2, $3, $4);    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: NUMBER
      _failure(_expect6);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_QUOTATION_MARK() {
    // TERMINAL
    // QUOTATION_MARK <- ["]
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 0;  
      _tokenStart = _cursor;  
    }  
    // ["]
    $$ = _matchChar(34, '\"');
    if (!success && _cursor > _testing) {
      // Expected: QUOTATION_MARK
      _failure(_expect13);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_STRING() {
    // TERMINAL
    // STRING <- QUOTATION_MARK CHAR* QUOTATION_MARK WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 13;  
      _tokenStart = _cursor;  
    }  
    // QUOTATION_MARK CHAR* QUOTATION_MARK WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // QUOTATION_MARK
      $$ = null;
      success = _ch == 34; // '"'
      // Lookahead (QUOTATION_MARK)
      if (success) $$ = _parse_QUOTATION_MARK();
      if (!success) {
        // Expected: QUOTATION_MARK
        if (_cursor > _testing) _failure(_expect13);  
        break;  
      }
      var seq = new List(4)..[0] = $$;
      // CHAR*
      var testing0 = _testing; 
      for (var reps = []; ; ) {
        _testing = _cursor;
        // CHAR
        $$ = _parse_CHAR();
        if (success) {  
          reps.add($$);
        } else {
          success = true;
          _testing = testing0;
          $$ = reps;
          break; 
        }
      }
      if (!success) break;
      seq[1] = $$;
      // QUOTATION_MARK
      $$ = null;
      success = _ch == 34; // '"'
      // Lookahead (QUOTATION_MARK)
      if (success) $$ = _parse_QUOTATION_MARK();
      if (!success) {
        // Expected: QUOTATION_MARK
        if (_cursor > _testing) _failure(_expect13);  
        break;  
      }
      seq[2] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[3] = $$;
      $$ = seq;
      if (success) {    
        // QUOTATION_MARK
        final $1 = seq[0];
        // CHAR*
        final $2 = seq[1];
        // QUOTATION_MARK
        final $3 = seq[2];
        // WS
        final $4 = seq[3];
        $$ = _flatten($2).join();    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: STRING
      _failure(_expect7);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_TRUE() {
    // TERMINAL
    // TRUE <- "true" WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 14;  
      _tokenStart = _cursor;  
    }  
    // "true" WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // "true"
      $$ = _matchString(_strings2, 'true');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        // "true"
        final $1 = seq[0];
        // WS
        final $2 = seq[1];
        $$ = true;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'true'
      _failure(_expect5);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_UNESCAPED() {
    // TERMINAL
    // UNESCAPED <- [ -!] / [#-\[] / [\]-~] / [\]-\u10ffff]
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 21;  
      _tokenStart = _cursor;  
    }  
    // [ -!] / [#-\[] / [\]-~] / [\]-\u10ffff]
    while (true) {
      // [ -!]
      $$ = _matchRange(32, 33);
      if (success) break;
      // [#-\[]
      $$ = _matchRange(35, 91);
      if (success) break;
      // [\]-~]
      $$ = _matchRange(93, 126);
      if (success) break;
      // [\]-\u10ffff]
      $$ = _matchRange(93, 1114111);
      break;
    }
    if (!success && _cursor > _testing) {
      // Expected: UNESCAPED
      _failure(_expect24);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_VALUE_SEPARATOR() {
    // TERMINAL
    // VALUE_SEPARATOR <- "," WS
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 15;  
      _tokenStart = _cursor;  
    }  
    // "," WS
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // ","
      $$ = _matchChar(44, ',');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: ','
      _failure(_expect9);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_WS() {
    // TERMINAL
    // WS <- [\t-\n\r ]*
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = 22;  
      _tokenStart = _cursor;  
    }  
    // [\t-\n\r ]*
    var testing0 = _testing; 
    for (var reps = []; ; ) {
      _testing = _cursor;
      // [\t-\n\r ]
      $$ = _matchMapping(9, 32, _mapping1);
      if (success) {  
        reps.add($$);
      } else {
        success = true;
        _testing = testing0;
        $$ = reps;
        break; 
      }
    }
    if (!success && _cursor > _testing) {
      // Expected: WS
      _failure(_expect25);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_array() {
    // NONTERMINAL
    // array <- BEGIN_ARRAY (value (VALUE_SEPARATOR value)*)? END_ARRAY
    var $$;
    // BEGIN_ARRAY (value (VALUE_SEPARATOR value)*)? END_ARRAY
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // BEGIN_ARRAY
      $$ = null;
      success = _ch == 91; // '['
      // Lookahead (BEGIN_ARRAY)
      if (success) $$ = _parse_BEGIN_ARRAY();
      if (!success) {
        // Expected: '['
        if (_cursor > _testing) _failure(_expect1);  
        break;  
      }
      var seq = new List(3)..[0] = $$;
      // (value (VALUE_SEPARATOR value)*)?
      var testing0 = _testing;
      _testing = _cursor;
      // value (VALUE_SEPARATOR value)*
      var ch1 = _ch, pos1 = _cursor;
      while (true) {  
        // value
        $$ = null;
        success = _ch >= 34 && _ch <= 123 && _lookahead[_ch + 81];
        // Lookahead (value)
        if (success) $$ = _parse_value();    
        if (!success) {    
          // Expected: 'false', 'null', 'true', '[', NUMBER, STRING, '{'    
          if (_cursor > _testing) _failure(_expect8);
          break;  
        }
        var seq = new List(2)..[0] = $$;
        // (VALUE_SEPARATOR value)*
        var testing1 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          // VALUE_SEPARATOR value
          var ch2 = _ch, pos2 = _cursor;
          while (true) {  
            // VALUE_SEPARATOR
            $$ = null;
            success = _ch == 44; // ','
            // Lookahead (VALUE_SEPARATOR)
            if (success) $$ = _parse_VALUE_SEPARATOR();
            if (!success) {
              // Expected: ','
              if (_cursor > _testing) _failure(_expect9);  
              break;  
            }
            var seq = new List(2)..[0] = $$;
            // value
            $$ = null;
            success = _ch >= 34 && _ch <= 123 && _lookahead[_ch + 81];
            // Lookahead (value)
            if (success) $$ = _parse_value();    
            if (!success) {    
              // Expected: 'false', 'null', 'true', '[', NUMBER, STRING, '{'    
              if (_cursor > _testing) _failure(_expect8);
              break;  
            }
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // VALUE_SEPARATOR
              final $1 = seq[0];
              // value
              final $2 = seq[1];
              $$ = $2;    
            }
            break;  
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          if (!success && _cursor > _testing) {
            // Expected: ','
            _failure(_expect9);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing1;
            $$ = reps;
            break; 
          }
        }
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        break;  
      }
      if (!success) {
        _ch = ch1;
        _cursor = pos1;
      }
      if (!success && _cursor > _testing) {
        // Expected: 'false', 'null', 'true', '[', NUMBER, STRING, '{'
        _failure(_expect8);
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      seq[1] = $$;
      // END_ARRAY
      $$ = null;
      success = _ch == 93; // ']'
      // Lookahead (END_ARRAY)
      if (success) $$ = _parse_END_ARRAY();
      if (!success) {
        // Expected: ']'
        if (_cursor > _testing) _failure(_expect12);  
        break;  
      }
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        // BEGIN_ARRAY
        final $1 = seq[0];
        // (value (VALUE_SEPARATOR value)*)?
        final $2 = seq[1];
        // END_ARRAY
        final $3 = seq[2];
        $$ = _flatten($2).fold([], (p, c) => p..add(c));    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '['
      _failure(_expect1);
    }
    return $$;
  }
  
  dynamic _parse_member() {
    // NONTERMINAL
    // member <- STRING NAME_SEPARATOR value
    var $$;
    // STRING NAME_SEPARATOR value
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // STRING
      $$ = null;
      success = _ch == 34; // '"'
      // Lookahead (STRING)
      if (success) $$ = _parse_STRING();
      if (!success) {
        // Expected: STRING
        if (_cursor > _testing) _failure(_expect7);  
        break;  
      }
      var seq = new List(3)..[0] = $$;
      // NAME_SEPARATOR
      $$ = null;
      success = _ch == 58; // ':'
      // Lookahead (NAME_SEPARATOR)
      if (success) $$ = _parse_NAME_SEPARATOR();
      if (!success) {
        // Expected: ':'
        if (_cursor > _testing) _failure(_expect11);  
        break;  
      }
      seq[1] = $$;
      // value
      $$ = null;
      success = _ch >= 34 && _ch <= 123 && _lookahead[_ch + 81];
      // Lookahead (value)
      if (success) $$ = _parse_value();    
      if (!success) {    
        // Expected: 'false', 'null', 'true', '[', NUMBER, STRING, '{'    
        if (_cursor > _testing) _failure(_expect8);
        break;  
      }
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        // STRING
        final $1 = seq[0];
        // NAME_SEPARATOR
        final $2 = seq[1];
        // value
        final $3 = seq[2];
        $$ = new _KeyValuePair($1, $3);    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: STRING
      _failure(_expect7);
    }
    return $$;
  }
  
  dynamic _parse_object() {
    // NONTERMINAL
    // object <- BEGIN_OBJECT (member (VALUE_SEPARATOR member)*)? END_OBJECT
    var $$;
    // BEGIN_OBJECT (member (VALUE_SEPARATOR member)*)? END_OBJECT
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // BEGIN_OBJECT
      $$ = null;
      success = _ch == 123; // '{'
      // Lookahead (BEGIN_OBJECT)
      if (success) $$ = _parse_BEGIN_OBJECT();
      if (!success) {
        // Expected: '{'
        if (_cursor > _testing) _failure(_expect0);  
        break;  
      }
      var seq = new List(3)..[0] = $$;
      // (member (VALUE_SEPARATOR member)*)?
      var testing0 = _testing;
      _testing = _cursor;
      // member (VALUE_SEPARATOR member)*
      var ch1 = _ch, pos1 = _cursor;
      while (true) {  
        // member
        $$ = null;
        success = _ch == 34; // '"'
        // Lookahead (member)
        if (success) $$ = _parse_member();
        if (!success) {
          // Expected: STRING
          if (_cursor > _testing) _failure(_expect7);  
          break;  
        }
        var seq = new List(2)..[0] = $$;
        // (VALUE_SEPARATOR member)*
        var testing1 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          // VALUE_SEPARATOR member
          var ch2 = _ch, pos2 = _cursor;
          while (true) {  
            // VALUE_SEPARATOR
            $$ = null;
            success = _ch == 44; // ','
            // Lookahead (VALUE_SEPARATOR)
            if (success) $$ = _parse_VALUE_SEPARATOR();
            if (!success) {
              // Expected: ','
              if (_cursor > _testing) _failure(_expect9);  
              break;  
            }
            var seq = new List(2)..[0] = $$;
            // member
            $$ = null;
            success = _ch == 34; // '"'
            // Lookahead (member)
            if (success) $$ = _parse_member();
            if (!success) {
              // Expected: STRING
              if (_cursor > _testing) _failure(_expect7);  
              break;  
            }
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              // VALUE_SEPARATOR
              final $1 = seq[0];
              // member
              final $2 = seq[1];
              $$ = $2;    
            }
            break;  
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          if (!success && _cursor > _testing) {
            // Expected: ','
            _failure(_expect9);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing1;
            $$ = reps;
            break; 
          }
        }
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        break;  
      }
      if (!success) {
        _ch = ch1;
        _cursor = pos1;
      }
      if (!success && _cursor > _testing) {
        // Expected: STRING
        _failure(_expect7);
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      seq[1] = $$;
      // END_OBJECT
      $$ = null;
      success = _ch == 125; // '}'
      // Lookahead (END_OBJECT)
      if (success) $$ = _parse_END_OBJECT();
      if (!success) {
        // Expected: '}'
        if (_cursor > _testing) _failure(_expect10);  
        break;  
      }
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        // BEGIN_OBJECT
        final $1 = seq[0];
        // (member (VALUE_SEPARATOR member)*)?
        final $2 = seq[1];
        // END_OBJECT
        final $3 = seq[2];
        $$ = _flatten($2).fold({}, (p, c) => p..[c.key] = c.value);    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '{'
      _failure(_expect0);
    }
    return $$;
  }
  
  dynamic _parse_value() {
    // NONTERMINAL
    // value <- FALSE / NULL / TRUE / object / array / NUMBER / STRING
    var $$;
    // FALSE / NULL / TRUE / object / array / NUMBER / STRING
    while (true) {
      // FALSE
      $$ = null;
      success = _ch == 102; // 'f'
      // Lookahead (FALSE)
      if (success) $$ = _parse_FALSE();
      if (!success) {
        // Expected: 'false'
        if (_cursor > _testing) _failure(_expect3);  
      }
      if (success) break;
      // NULL
      $$ = null;
      success = _ch == 110; // 'n'
      // Lookahead (NULL)
      if (success) $$ = _parse_NULL();
      if (!success) {
        // Expected: 'null'
        if (_cursor > _testing) _failure(_expect4);  
      }
      if (success) break;
      // TRUE
      $$ = null;
      success = _ch == 116; // 't'
      // Lookahead (TRUE)
      if (success) $$ = _parse_TRUE();
      if (!success) {
        // Expected: 'true'
        if (_cursor > _testing) _failure(_expect5);  
      }
      if (success) break;
      // object
      $$ = null;
      success = _ch == 123; // '{'
      // Lookahead (object)
      if (success) $$ = _parse_object();
      if (!success) {
        // Expected: '{'
        if (_cursor > _testing) _failure(_expect0);  
      }
      if (success) break;
      // array
      $$ = null;
      success = _ch == 91; // '['
      // Lookahead (array)
      if (success) $$ = _parse_array();
      if (!success) {
        // Expected: '['
        if (_cursor > _testing) _failure(_expect1);  
      }
      if (success) break;
      // NUMBER
      $$ = null;
      success = _ch >= 45 && _ch <= 57 && _lookahead[_ch + 81];
      // Lookahead (NUMBER)
      if (success) $$ = _parse_NUMBER();    
      if (!success) {    
        // Expected: NUMBER    
        if (_cursor > _testing) _failure(_expect6);
      }
      if (success) break;
      // STRING
      $$ = null;
      success = _ch == 34; // '"'
      // Lookahead (STRING)
      if (success) $$ = _parse_STRING();
      if (!success) {
        // Expected: STRING
        if (_cursor > _testing) _failure(_expect7);  
      }
      break;
    }
    if (!success && _cursor > _testing) {
      // Expected: 'false', 'null', 'true', '[', NUMBER, STRING, '{'
      _failure(_expect8);
    }
    return $$;
  }
  
  int _toCodePoint(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      throw new StateError("An empty string contains no elements.");
    }
  
    var start = string.codeUnitAt(0);
    if (length == 1) {
      return start;
    }
  
    if ((start & 0xFC00) == 0xD800) {
      var end = string.codeUnitAt(1);
      if ((end & 0xFC00) == 0xDC00) {
        return (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
      }
    }
  
    return start;
  }
  
  List<int> _toCodePoints(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      return const <int>[];
    }
  
    var codePoints = <int>[];
    codePoints.length = length;
    var i = 0;
    var pos = 0;
    for ( ; i < length; pos++) {
      var start = string.codeUnitAt(i);
      i++;
      if ((start & 0xFC00) == 0xD800 && i < length) {
        var end = string.codeUnitAt(i);
        if ((end & 0xFC00) == 0xDC00) {
          codePoints[pos] = (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
          i++;
        } else {
          codePoints[pos] = start;
        }
      } else {
        codePoints[pos] = start;
      }
    }
  
    codePoints.length = pos;
    return codePoints;
  }
  
  static List<bool> _unmap(List<int> mapping) {
    var length = mapping.length;
    var result = new List<bool>(length * 31);
    var offset = 0;
    for (var i = 0; i < length; i++) {
      var v = mapping[i];
      for (var j = 0; j < 31; j++) {
        result[offset++] = v & (1 << j) == 0 ? false : true;
      }
    }
    return result;
  }
  
  List<JsonParserError> errors() {
    if (success) {
      return <JsonParserError>[];
    }
  
    String escape(int c) {
      switch (c) {
        case 10:
          return r"\n";
        case 13:
          return r"\r";
        case 09:
          return r"\t";
        case -1:
          return "";
      }
      return new String.fromCharCode(c);
    } 
    
    String getc(int position) {  
      if (position < _inputLen) {
        return "'${escape(_input[position])}'";      
      }       
      return "end of file";
    }
  
    var errors = <JsonParserError>[];
    if (_failurePos >= _cursor) {
      var set = new Set<JsonParserError>();
      set.addAll(_errors);
      for (var error in set) {
        if (error.position >= _failurePos) {
          errors.add(error);
        }
      }
      var names = new Set<String>();  
      names.addAll(_expected);
      if (names.contains(null)) {
        var string = getc(_failurePos);
        var message = "Unexpected $string";
        var error = new JsonParserError(JsonParserError.UNEXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      } else {      
        var found = getc(_failurePos);      
        var list = names.toList();
        list.sort();
        var message = "Expected ${list.join(", ")} but found $found";
        var error = new JsonParserError(JsonParserError.EXPECTED, _failurePos, _failurePos, message);
        errors.add(error);
      }        
    }
    errors.sort((a, b) => a.position.compareTo(b.position));
    return errors;  
  }
  
  dynamic parse_jsonText() {
    // NONTERMINAL
    // jsonText <- WS? (object / array) EOF
    var $$;
    // WS? (object / array) EOF
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      // WS?
      var testing0 = _testing;
      _testing = _cursor;
      // WS
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      // Lookahead (WS is optional)
      if (success) $$ = _parse_WS();
      else success = true;
      success = true; 
      _testing = testing0;
      if (!success) break;
      var seq = new List(3)..[0] = $$;
      // object / array
      while (true) {
        // object
        $$ = null;
        success = _ch == 123; // '{'
        // Lookahead (object)
        if (success) $$ = _parse_object();
        if (!success) {
          // Expected: '{'
          if (_cursor > _testing) _failure(_expect0);  
        }
        if (success) break;
        // array
        $$ = null;
        success = _ch == 91; // '['
        // Lookahead (array)
        if (success) $$ = _parse_array();
        if (!success) {
          // Expected: '['
          if (_cursor > _testing) _failure(_expect1);  
        }
        break;
      }
      if (!success && _cursor > _testing) {
        // Expected: '{', '['
        _failure(_expect2);
      }
      if (!success) break;
      seq[1] = $$;
      // EOF
      $$ = _parse_EOF();
      if (!success) break;
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        // WS?
        final $1 = seq[0];
        // object / array
        final $2 = seq[1];
        // EOF
        final $3 = seq[2];
        $$ = $2;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      // Expected: '{', '['
      _failure(_expect2);
    }
    return $$;
  }
  
  void reset(int pos) {
    if (pos == null) {
      throw new ArgumentError('pos: $pos');
    }
    if (pos < 0 || pos > _inputLen) {
      throw new RangeError('pos');
    }      
    _cursor = pos;
    _cache = new List(_inputLen + 1);
    _cachePos = -1;
    _cacheRule = new List(_inputLen + 1);
    _cacheState = new List.filled(((_inputLen + 1) >> 5) + 1, 0);
    _ch = -1;
    _errors = <JsonParserError>[];   
    _expected = <String>[];
    _failurePos = -1;  
    success = true;      
    _testing = -1;
    _token = null;
    _tokenLevel = 0;
    _tokenStart = null;
    if (_cursor < _inputLen) {
      _ch = _input[_cursor];
    }    
  }
  
}

class JsonParserError {
  static const int EXPECTED = 1;    
      
  static const int MALFORMED = 2;    
      
  static const int MISSING = 3;    
      
  static const int UNEXPECTED = 4;    
      
  static const int UNTERMINATED = 5;    
      
  final int hashCode = 0;
  
  final String message;
  
  final int position;
  
  final int start;
  
  final int type;
  
  JsonParserError(this.type, this.position, this.start, this.message);
  
  bool operator ==(other) {
    if (identical(this, other)) return true;
    if (other is JsonParserError) {
      return type == other.type && position == other.position &&
      start == other.start && message == other.message;  
    }
    return false;
  }
  
}

