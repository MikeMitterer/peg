// This code was generated by a tool.
// Processing tool available at https://github.com/mezoni/peg

library json_parser;

class _KeyValuePair<K, V> {
  final K key;
  final V value;
  const _KeyValuePair(this.key, this.value);
  String toString() => "$key : $value";
}

String _hex2str(String hex) {
  return new String.fromCharCode(int.parse(hex, radix: 16));
}

// "\\/bfnrt
String _escape(String string) {
  switch (string) {
    case "\"":
      return "\u0022";
    case "\\":
      return "\u005c";
    case "/":
      return "\u002f";    
    case "r":
      return "\u000d";
    case "n":
      return "\u000a";  
    case "t":
      return "\u0009";
    case "b":
      return "\u0008";
    case "f":
      return "\u000c";      
  }
  return string;
}

num _parseNumber(minus, integer, frac, exp) {
  var sign = minus == null ? 1 : -1;  
  if (frac != null || exp != null) {
    frac = frac == null ? "" : frac;
    exp = exp == null ? "" : exp;
    return double.parse("$integer$frac$exp") * sign;
  } else {
    return int.parse(integer) * sign;
  }
}
class JsonParser {
  static const int EOF = -1;
  static final List<String> _ascii = new List<String>.generate(128, (c) => new String.fromCharCode(c));
  static final List<bool> _lookahead = _unmap([0x800013, 0x0, 0x100000, 0x600000, 0x7fe4, 0x10020000, 0x1ffc0820, 0x7e0, 0xfc0]);
  static final List<bool> _mapping0 = _unmap([0x2001, 0x8000000, 0x144044]);
  static final List<bool> _mapping1 = _unmap([0x800013]);
  static final List<int> _strings0 = <int>[102, 97, 108, 115, 101];
  static final List<int> _strings1 = <int>[110, 117, 108, 108];
  static final List<int> _strings2 = <int>[116, 114, 117, 101];
  List _cache;
  int _cachePos;
  List<int> _cacheRule;
  List<int> _cacheState;
  int _ch;
  int _column;
  int _cursor;
  List<String> _expected;
  int _failurePos;
  int _inputLen;
  int _line;
  List<int> _runes;
  bool success;
  int _testing;
  String _token;
  int _tokenLevel;
  int _tokenStart;
  
  JsonParser(String text) {
    if (text == null) {
      throw new ArgumentError('text: $text');
    }    
    _runes = _toRunes(text);
    _inputLen = _runes.length;
    if (_inputLen >= 0x3fffffe8 / 32) {
      throw new StateError('File size to big: $_inputLen');
    }  
    reset(0);    
  }
  
  int get column { 
    if (_column == -1) { 
      _calculatePos(_failurePos); 
    } 
    return _column;       
  } 
   
  int get line { 
    if (_line == -1) { 
      _calculatePos(_failurePos); 
    } 
    return _line;       
  } 
   
  dynamic _parse_BEGIN_ARRAY() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "[";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = _matchChar(91, '[');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["["]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_BEGIN_OBJECT() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "{";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = _matchChar(123, '{');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["{"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_CHAR() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "CHAR";  
      _tokenStart = _cursor;  
    }  
    while (true) {
      $$ = _parse_UNESCAPED();
      if (success) break;
      var ch0 = _ch, pos0 = _cursor;
      while (true) {  
        $$ = null;
        success = _ch == 92; 
        if (success) $$ = _parse_ESCAPE();
        if (!success) {
          if (_cursor > _testing) _failure(const ["\\"]);  
          break;  
        }
        var seq = new List(2)..[0] = $$;
        $$ = _matchMapping(34, 116, _mapping0);
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        if (success) {    
          final $1 = seq[0];
          final $2 = seq[1];
          $$ = _escape($2);    
        }
        break;  
      }
      if (!success) {
        _ch = ch0;
        _cursor = pos0;
      }
      if (success) break;
      var ch1 = _ch, pos1 = _cursor;
      while (true) {  
        $$ = null;
        success = _ch == 92; 
        if (success) $$ = _parse_ESCAPE();
        if (!success) {
          if (_cursor > _testing) _failure(const ["\\"]);  
          break;  
        }
        var seq = new List(6)..[0] = $$;
        $$ = _matchChar(117, 'u');
        if (!success) break;
        seq[1] = $$;
        $$ = null;
        success = _ch >= 48 && _ch <= 102 && _lookahead[_ch + 157];
        if (success) $$ = _parse_HEXDIG();    
        if (!success) {    
          if (_cursor > _testing) _failure(const ["DIGIT", "HEXDIG"]);
          break;  
        }
        seq[2] = $$;
        $$ = null;
        success = _ch >= 48 && _ch <= 102 && _lookahead[_ch + 157];
        if (success) $$ = _parse_HEXDIG();    
        if (!success) {    
          if (_cursor > _testing) _failure(const ["DIGIT", "HEXDIG"]);
          break;  
        }
        seq[3] = $$;
        $$ = null;
        success = _ch >= 48 && _ch <= 102 && _lookahead[_ch + 157];
        if (success) $$ = _parse_HEXDIG();    
        if (!success) {    
          if (_cursor > _testing) _failure(const ["DIGIT", "HEXDIG"]);
          break;  
        }
        seq[4] = $$;
        $$ = null;
        success = _ch >= 48 && _ch <= 102 && _lookahead[_ch + 157];
        if (success) $$ = _parse_HEXDIG();    
        if (!success) {    
          if (_cursor > _testing) _failure(const ["DIGIT", "HEXDIG"]);
          break;  
        }
        seq[5] = $$;
        $$ = seq;
        if (success) {    
          final $1 = seq[0];
          final $2 = seq[1];
          final $3 = seq[2];
          final $4 = seq[3];
          final $5 = seq[4];
          final $6 = seq[5];
          $$ = _hex2str([$3, $4, $5, $6].join());    
        }
        break;  
      }
      if (!success) {
        _ch = ch1;
        _cursor = pos1;
      }
      break;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["UNESCAPED", "\\", "CHAR"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_DECIMAL_POINT() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = ".";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = _matchChar(46, '.');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        $$ = $1;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["."]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_DIGIT() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "DIGIT";  
      _tokenStart = _cursor;  
    }  
    $$ = _matchRange(48, 57);
    if (!success && _cursor > _testing) {
      _failure(const ["DIGIT"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_E() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "E";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      while (true) {
        $$ = _matchChar(101, 'e');
        if (success) break;
        $$ = _matchChar(69, 'E');
        break;
      }
      if (!success && _cursor > _testing) {
        _failure(const []);
      }
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        $$ = $1;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["E"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_END_ARRAY() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "]";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = _matchChar(93, ']');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["]"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_END_OBJECT() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "}";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = _matchChar(125, '}');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["}"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_EOF() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "EOF";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor, testing0 = _testing; 
    _testing = _inputLen + 1;
    $$ = _matchAny();
    _ch = ch0;
    _cursor = pos0; 
    _testing = testing0;
    $$ = null;
    success = !success;
    if (!success && _cursor > _testing) {
      _failure(const [null, "EOF"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_ESCAPE() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "\\";  
      _tokenStart = _cursor;  
    }  
    $$ = _matchChar(92, '\\');
    if (!success && _cursor > _testing) {
      _failure(const ["\\"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_EXP() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "EXP";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = null;
      success = _ch >= 69 && _ch <= 101 && _lookahead[_ch + 13];
      if (success) $$ = _parse_E();    
      if (!success) {    
        if (_cursor > _testing) _failure(const ["E"]);
        break;  
      }
      var seq = new List(4)..[0] = $$;
      var testing0 = _testing;
      _testing = _cursor;
      while (true) {
        $$ = null;
        success = _ch == 45; 
        if (success) $$ = _parse_MINUS();
        if (!success) {
          if (_cursor > _testing) _failure(const ["-"]);  
        }
        if (success) break;
        $$ = null;
        success = _ch == 43; 
        if (success) $$ = _parse_PLUS();
        if (!success) {
          if (_cursor > _testing) _failure(const ["+"]);  
        }
        break;
      }
      if (!success && _cursor > _testing) {
        _failure(const ["-", "+"]);
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      seq[1] = $$;
      var testing1;
      for (var first = true, reps; ;) {  
        $$ = null;  
        success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];  
        if (success) $$ = _parse_DIGIT();      
        if (!success) {      
          if (_cursor > _testing) _failure(const ["DIGIT"]);  
        }  
        if (success) {
         if (first) {      
            first = false;
            reps = [$$];
            testing1 = _testing;                  
          } else {
            reps.add($$);
          }
          _testing = _cursor;   
        } else {
          success = !first;
          if (success) {      
            _testing = testing1;
            $$ = reps;      
          } else $$ = null;
          break;
        }  
      }
      if (!success) break;
      seq[2] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[3] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        final $3 = seq[2];
        final $4 = seq[3];
        $$ = _flatten(_compact([$1, $2, $3])).join();    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["E", "EXP"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_FALSE() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "false";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = _matchString(_strings0, 'false');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        $$ = false;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["false"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_FRAC() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = ".";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = null;
      success = _ch == 46; 
      if (success) $$ = _parse_DECIMAL_POINT();
      if (!success) {
        if (_cursor > _testing) _failure(const ["."]);  
        break;  
      }
      var seq = new List(3)..[0] = $$;
      var testing0;
      for (var first = true, reps; ;) {  
        $$ = null;  
        success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];  
        if (success) $$ = _parse_DIGIT();      
        if (!success) {      
          if (_cursor > _testing) _failure(const ["DIGIT"]);  
        }  
        if (success) {
         if (first) {      
            first = false;
            reps = [$$];
            testing0 = _testing;                  
          } else {
            reps.add($$);
          }
          _testing = _cursor;   
        } else {
          success = !first;
          if (success) {      
            _testing = testing0;
            $$ = reps;      
          } else $$ = null;
          break;
        }  
      }
      if (!success) break;
      seq[1] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        final $3 = seq[2];
        $$ = _flatten([$1, $2]).join();    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["."]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_HEXDIG() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "HEXDIG";  
      _tokenStart = _cursor;  
    }  
    while (true) {
      $$ = null;
      success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];
      if (success) $$ = _parse_DIGIT();    
      if (!success) {    
        if (_cursor > _testing) _failure(const ["DIGIT"]);
      }
      if (success) break;
      $$ = _matchRange(97, 102);
      if (success) break;
      $$ = _matchRange(65, 70);
      break;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["DIGIT", "HEXDIG"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_INT() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "INT";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      var testing0;
      for (var first = true, reps; ;) {  
        $$ = null;  
        success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];  
        if (success) $$ = _parse_DIGIT();      
        if (!success) {      
          if (_cursor > _testing) _failure(const ["DIGIT"]);  
        }  
        if (success) {
         if (first) {      
            first = false;
            reps = [$$];
            testing0 = _testing;                  
          } else {
            reps.add($$);
          }
          _testing = _cursor;   
        } else {
          success = !first;
          if (success) {      
            _testing = testing0;
            $$ = reps;      
          } else $$ = null;
          break;
        }  
      }
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        $$ = _flatten($1).join();    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["DIGIT", "INT"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_MINUS() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "-";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = _matchChar(45, '-');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        $$ = $1;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["-"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_NAME_SEPARATOR() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = ":";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = _matchChar(58, ':');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const [":"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_NULL() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "null";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = _matchString(_strings1, 'null');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        $$ = null;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["null"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_NUMBER() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "NUMBER";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      var testing0 = _testing;
      _testing = _cursor;
      $$ = null;
      success = _ch == 45; 
      if (success) $$ = _parse_MINUS();
      if (!success) {
        if (_cursor > _testing) _failure(const ["-"]);  
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      var seq = new List(5)..[0] = $$;
      $$ = null;
      success = _ch >= 48 && _ch <= 57 && _lookahead[_ch + 81];
      if (success) $$ = _parse_INT();    
      if (!success) {    
        if (_cursor > _testing) _failure(const ["DIGIT", "INT"]);
        break;  
      }
      seq[1] = $$;
      var testing1 = _testing;
      _testing = _cursor;
      $$ = null;
      success = _ch == 46; 
      if (success) $$ = _parse_FRAC();
      if (!success) {
        if (_cursor > _testing) _failure(const ["."]);  
      }
      success = true; 
      _testing = testing1;
      if (!success) break;
      seq[2] = $$;
      var testing2 = _testing;
      _testing = _cursor;
      $$ = null;
      success = _ch >= 69 && _ch <= 101 && _lookahead[_ch + 13];
      if (success) $$ = _parse_EXP();    
      if (!success) {    
        if (_cursor > _testing) _failure(const ["E", "EXP"]);
      }
      success = true; 
      _testing = testing2;
      if (!success) break;
      seq[3] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[4] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        final $3 = seq[2];
        final $4 = seq[3];
        final $5 = seq[4];
        $$ = _parseNumber($1, $2, $3, $4);    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["DIGIT", "INT", "NUMBER"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_PLUS() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "+";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = _matchChar(43, '+');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        $$ = $1;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["+"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_QUOTATION_MARK() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "\"";  
      _tokenStart = _cursor;  
    }  
    $$ = _matchChar(34, '\"');
    if (!success && _cursor > _testing) {
      _failure(const ["\""]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_STRING() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "\"";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = null;
      success = _ch == 34; 
      if (success) $$ = _parse_QUOTATION_MARK();
      if (!success) {
        if (_cursor > _testing) _failure(const ["\""]);  
        break;  
      }
      var seq = new List(4)..[0] = $$;
      var testing0 = _testing; 
      for (var reps = []; ; ) {
        _testing = _cursor;
        $$ = _parse_CHAR();
        if (success) {  
          reps.add($$);
        } else {
          success = true;
          _testing = testing0;
          $$ = reps;
          break; 
        }
      }
      if (!success) break;
      seq[1] = $$;
      $$ = null;
      success = _ch == 34; 
      if (success) $$ = _parse_QUOTATION_MARK();
      if (!success) {
        if (_cursor > _testing) _failure(const ["\""]);  
        break;  
      }
      seq[2] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[3] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        final $3 = seq[2];
        final $4 = seq[3];
        $$ = _flatten($2).join();    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["\""]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_TRUE() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "true";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = _matchString(_strings2, 'true');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        $$ = true;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["true"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_UNESCAPED() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "UNESCAPED";  
      _tokenStart = _cursor;  
    }  
    while (true) {
      $$ = _matchRange(32, 33);
      if (success) break;
      $$ = _matchRange(35, 91);
      if (success) break;
      $$ = _matchRange(93, 126);
      if (success) break;
      $$ = _matchRange(93, 1114111);
      break;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["UNESCAPED"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_VALUE_SEPARATOR() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = ",";  
      _tokenStart = _cursor;  
    }  
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = _matchChar(44, ',');
      if (!success) break;
      var seq = new List(2)..[0] = $$;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      seq[1] = $$;
      $$ = seq;
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const [","]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_WS() {
    var $$;
    if (_tokenLevel++ == 0) {  
      _token = "WS";  
      _tokenStart = _cursor;  
    }  
    var testing0 = _testing; 
    for (var reps = []; ; ) {
      _testing = _cursor;
      $$ = _matchMapping(9, 32, _mapping1);
      if (success) {  
        reps.add($$);
      } else {
        success = true;
        _testing = testing0;
        $$ = reps;
        break; 
      }
    }
    if (!success && _cursor > _testing) {
      _failure(const ["WS"]);
    }
    if (--_tokenLevel == 0) {
      _token = null;
      _tokenStart = null;
    }
    return $$;
  }
  
  dynamic _parse_array() {
    var $$;
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = null;
      success = _ch == 91; 
      if (success) $$ = _parse_BEGIN_ARRAY();
      if (!success) {
        if (_cursor > _testing) _failure(const ["["]);  
        break;  
      }
      var seq = new List(3)..[0] = $$;
      var testing0 = _testing;
      _testing = _cursor;
      var ch1 = _ch, pos1 = _cursor;
      while (true) {  
        $$ = null;
        success = _ch >= 34 && _ch <= 123 && _lookahead[_ch + 81];
        if (success) $$ = _parse_value();    
        if (!success) {    
          if (_cursor > _testing) _failure(const ["false", "null", "true", "[", "DIGIT", "INT", "NUMBER", "\"", "{"]);
          break;  
        }
        var seq = new List(2)..[0] = $$;
        var testing1 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          var ch2 = _ch, pos2 = _cursor;
          while (true) {  
            $$ = null;
            success = _ch == 44; 
            if (success) $$ = _parse_VALUE_SEPARATOR();
            if (!success) {
              if (_cursor > _testing) _failure(const [","]);  
              break;  
            }
            var seq = new List(2)..[0] = $$;
            $$ = null;
            success = _ch >= 34 && _ch <= 123 && _lookahead[_ch + 81];
            if (success) $$ = _parse_value();    
            if (!success) {    
              if (_cursor > _testing) _failure(const ["false", "null", "true", "[", "DIGIT", "INT", "NUMBER", "\"", "{"]);
              break;  
            }
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = $2;    
            }
            break;  
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          if (!success && _cursor > _testing) {
            _failure(const [","]);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing1;
            $$ = reps;
            break; 
          }
        }
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        break;  
      }
      if (!success) {
        _ch = ch1;
        _cursor = pos1;
      }
      if (!success && _cursor > _testing) {
        _failure(const ["false", "null", "true", "[", "DIGIT", "INT", "NUMBER", "\"", "{"]);
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      seq[1] = $$;
      $$ = null;
      success = _ch == 93; 
      if (success) $$ = _parse_END_ARRAY();
      if (!success) {
        if (_cursor > _testing) _failure(const ["]"]);  
        break;  
      }
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        final $3 = seq[2];
        $$ = _flatten($2).fold([], (p, c) => p..add(c));    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["["]);
    }
    return $$;
  }
  
  dynamic _parse_member() {
    var $$;
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = null;
      success = _ch == 34; 
      if (success) $$ = _parse_STRING();
      if (!success) {
        if (_cursor > _testing) _failure(const ["\""]);  
        break;  
      }
      var seq = new List(3)..[0] = $$;
      $$ = null;
      success = _ch == 58; 
      if (success) $$ = _parse_NAME_SEPARATOR();
      if (!success) {
        if (_cursor > _testing) _failure(const [":"]);  
        break;  
      }
      seq[1] = $$;
      $$ = null;
      success = _ch >= 34 && _ch <= 123 && _lookahead[_ch + 81];
      if (success) $$ = _parse_value();    
      if (!success) {    
        if (_cursor > _testing) _failure(const ["false", "null", "true", "[", "DIGIT", "INT", "NUMBER", "\"", "{"]);
        break;  
      }
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        final $3 = seq[2];
        $$ = new _KeyValuePair($1, $3);    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["\""]);
    }
    return $$;
  }
  
  dynamic _parse_object() {
    var $$;
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      $$ = null;
      success = _ch == 123; 
      if (success) $$ = _parse_BEGIN_OBJECT();
      if (!success) {
        if (_cursor > _testing) _failure(const ["{"]);  
        break;  
      }
      var seq = new List(3)..[0] = $$;
      var testing0 = _testing;
      _testing = _cursor;
      var ch1 = _ch, pos1 = _cursor;
      while (true) {  
        $$ = null;
        success = _ch == 34; 
        if (success) $$ = _parse_member();
        if (!success) {
          if (_cursor > _testing) _failure(const ["\""]);  
          break;  
        }
        var seq = new List(2)..[0] = $$;
        var testing1 = _testing; 
        for (var reps = []; ; ) {
          _testing = _cursor;
          var ch2 = _ch, pos2 = _cursor;
          while (true) {  
            $$ = null;
            success = _ch == 44; 
            if (success) $$ = _parse_VALUE_SEPARATOR();
            if (!success) {
              if (_cursor > _testing) _failure(const [","]);  
              break;  
            }
            var seq = new List(2)..[0] = $$;
            $$ = null;
            success = _ch == 34; 
            if (success) $$ = _parse_member();
            if (!success) {
              if (_cursor > _testing) _failure(const ["\""]);  
              break;  
            }
            seq[1] = $$;
            $$ = seq;
            if (success) {    
              final $1 = seq[0];
              final $2 = seq[1];
              $$ = $2;    
            }
            break;  
          }
          if (!success) {
            _ch = ch2;
            _cursor = pos2;
          }
          if (!success && _cursor > _testing) {
            _failure(const [","]);
          }
          if (success) {  
            reps.add($$);
          } else {
            success = true;
            _testing = testing1;
            $$ = reps;
            break; 
          }
        }
        if (!success) break;
        seq[1] = $$;
        $$ = seq;
        break;  
      }
      if (!success) {
        _ch = ch1;
        _cursor = pos1;
      }
      if (!success && _cursor > _testing) {
        _failure(const ["\""]);
      }
      success = true; 
      _testing = testing0;
      if (!success) break;
      seq[1] = $$;
      $$ = null;
      success = _ch == 125; 
      if (success) $$ = _parse_END_OBJECT();
      if (!success) {
        if (_cursor > _testing) _failure(const ["}"]);  
        break;  
      }
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        final $3 = seq[2];
        $$ = _flatten($2).fold({}, (p, c) => p..[c.key] = c.value);    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["{"]);
    }
    return $$;
  }
  
  dynamic _parse_value() {
    var $$;
    while (true) {
      $$ = null;
      success = _ch == 102; 
      if (success) $$ = _parse_FALSE();
      if (!success) {
        if (_cursor > _testing) _failure(const ["false"]);  
      }
      if (success) break;
      $$ = null;
      success = _ch == 110; 
      if (success) $$ = _parse_NULL();
      if (!success) {
        if (_cursor > _testing) _failure(const ["null"]);  
      }
      if (success) break;
      $$ = null;
      success = _ch == 116; 
      if (success) $$ = _parse_TRUE();
      if (!success) {
        if (_cursor > _testing) _failure(const ["true"]);  
      }
      if (success) break;
      $$ = null;
      success = _ch == 123; 
      if (success) $$ = _parse_object();
      if (!success) {
        if (_cursor > _testing) _failure(const ["{"]);  
      }
      if (success) break;
      $$ = null;
      success = _ch == 91; 
      if (success) $$ = _parse_array();
      if (!success) {
        if (_cursor > _testing) _failure(const ["["]);  
      }
      if (success) break;
      $$ = null;
      success = _ch >= 45 && _ch <= 57 && _lookahead[_ch + 81];
      if (success) $$ = _parse_NUMBER();    
      if (!success) {    
        if (_cursor > _testing) _failure(const ["DIGIT", "INT", "NUMBER"]);
      }
      if (success) break;
      $$ = null;
      success = _ch == 34; 
      if (success) $$ = _parse_STRING();
      if (!success) {
        if (_cursor > _testing) _failure(const ["\""]);  
      }
      break;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["false", "null", "true", "[", "DIGIT", "INT", "NUMBER", "\"", "{"]);
    }
    return $$;
  }
  
  dynamic parse_jsonText() {
    var $$;
    var ch0 = _ch, pos0 = _cursor;
    while (true) {  
      var testing0 = _testing;
      _testing = _cursor;
      $$ = null;
      success = _ch >= 9 && _ch <= 32 && _lookahead[_ch + -9];
      if (success) $$ = _parse_WS();
      else success = true;
      success = true; 
      _testing = testing0;
      if (!success) break;
      var seq = new List(3)..[0] = $$;
      while (true) {
        $$ = null;
        success = _ch == 123; 
        if (success) $$ = _parse_object();
        if (!success) {
          if (_cursor > _testing) _failure(const ["{"]);  
        }
        if (success) break;
        $$ = null;
        success = _ch == 91; 
        if (success) $$ = _parse_array();
        if (!success) {
          if (_cursor > _testing) _failure(const ["["]);  
        }
        break;
      }
      if (!success && _cursor > _testing) {
        _failure(const ["{", "["]);
      }
      if (!success) break;
      seq[1] = $$;
      $$ = _parse_EOF();
      if (!success) break;
      seq[2] = $$;
      $$ = seq;
      if (success) {    
        final $1 = seq[0];
        final $2 = seq[1];
        final $3 = seq[2];
        $$ = $2;    
      }
      break;  
    }
    if (!success) {
      _ch = ch0;
      _cursor = pos0;
    }
    if (!success && _cursor > _testing) {
      _failure(const ["{", "["]);
    }
    return $$;
  }
  
  void _addToCache(dynamic result, int start, int id) {  
    var cached = _cache[start];
    if (cached == null) {
      _cacheRule[start] = id;
      _cache[start] = [result, _cursor, success];
    } else {    
      var slot = start >> 5;
      var r1 = (slot << 5) & 0x3fffffff;    
      var mask = 1 << (start - r1);    
      if ((_cacheState[slot] & mask) == 0) {
        _cacheState[slot] |= mask;   
        cached = [new List.filled(2, 0), new Map<int, List>()];
        _cache[start] = cached;                                      
      }
      slot = id >> 5;
      r1 = (slot << 5) & 0x3fffffff;    
      mask = 1 << (id - r1);    
      cached[0][slot] |= mask;
      cached[1][id] = [result, _cursor, success];      
    }
    if (_cachePos < start) {
      _cachePos = start;
    }    
  }
  
  void _calculatePos(int pos) {
    if (pos == null || pos < 0 || pos > _inputLen) {
      return;
    }
    _line = 1;
    _column = 1;
    for (var i = 0; i < _inputLen && i < pos; i++) {
      var c = _runes[i];
      if (c == 13) {
        _line++;
        _column = 1;
        if (i + 1 < _inputLen && _runes[i + 1] == 10) {
          i++;
        }
      } else if (c == 10) {
        _line++;
        _column = 1;
      } else {
        _column++;
      }
    }
  }
  
  Iterable _compact(Iterable iterable) {  
    if (iterable is List) {
      var hasNull = false;
      var length = iterable.length;
      for (var i = 0; i < length; i++) {
        if (iterable[i] == null) {
          hasNull = true;
          break;
        }
      }
      if (!hasNull) {
        return iterable;
      }
      var result = [];
      for (var i = 0; i < length; i++) {
        var element = iterable[i];
        if (element != null) {
          result.add(element);
        }
      }
      return result;
    }   
    var result = [];
    for (var element in iterable) {   
      if (element != null) {
        result.add(element);
      }
    }
    return result;  
  }
  
  void _failure([List<String> expected]) {  
    if (_failurePos > _cursor) {
      return;
    }
    if (_cursor > _failurePos) {    
      _expected = [];
     _failurePos = _cursor;
    }
    if (_token != null) {
      _expected.add(_token);
    } else if (expected == null) {
      _expected.add(null);
    } else {
      _expected.addAll(expected);
    }   
  }
  
  List _flatten(dynamic value) {
    if (value is List) {
      var result = [];
      var length = value.length;
      for (var i = 0; i < length; i++) {
        var element = value[i];
        if (element is Iterable) {
          result.addAll(_flatten(element));
        } else {
          result.add(element);
        }
      }
      return result;
    } else if (value is Iterable) {
      var result = [];
      for (var element in value) {
        if (element is! List) {
          result.add(element);
        } else {
          result.addAll(_flatten(element));
        }
      }
    }
    return [value];
  }
  
  dynamic _getFromCache(int id) {  
    var result = _cache[_cursor];
    if (result == null) {
      return null;
    }    
    var slot = _cursor >> 5;
    var r1 = (slot << 5) & 0x3fffffff;  
    var mask = 1 << (_cursor - r1);
    if ((_cacheState[slot] & mask) == 0) {
      if (_cacheRule[_cursor] == id) {      
        _cursor = result[1];
        success = result[2];      
        if (_cursor < _inputLen) {
          _ch = _runes[_cursor];
        } else {
          _ch = EOF;
        }      
        return result;
      } else {
        return null;
      }    
    }
    slot = id >> 5;
    r1 = (slot << 5) & 0x3fffffff;  
    mask = 1 << (id - r1);
    if ((result[0][slot] & mask) == 0) {
      return null;
    }
    var data = result[1][id];  
    _cursor = data[1];
    success = data[2];
    if (_cursor < _inputLen) {
      _ch = _runes[_cursor];
    } else {
      _ch = EOF;
    }   
    return data;  
  }
  
  String _matchAny() {
    success = _cursor < _inputLen;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }    
      if (++_cursor < _inputLen) {
        _ch = _runes[_cursor];
      } else {
        _ch = EOF;
      }    
      return result;
    }    
    return null;  
  }
  
  String _matchChar(int ch, String string) {
    success = _ch == ch;
    if (success) {
      var result = string;  
      if (++_cursor < _inputLen) {
        _ch = _runes[_cursor];
      } else {
        _ch = EOF;
      }    
      return result;
    }  
    return null;  
  }
  
  String _matchMapping(int start, int end, List<bool> mapping) {
    success = _ch >= start && _ch <= end;
    if (success) {    
      if(mapping[_ch - start]) {
        String result;
        if (_ch < 128) {
          result = _ascii[_ch];  
        } else {
          result = new String.fromCharCode(_ch);
        }     
        if (++_cursor < _inputLen) {
          _ch = _runes[_cursor];
        } else {
          _ch = EOF;
        }      
        return result;
      }
      success = false;
    }  
    return null;  
  }
  
  String _matchRange(int start, int end) {
    success = _ch >= start && _ch <= end;
    if (success) {
      String result;
      if (_ch < 128) {
        result = _ascii[_ch];  
      } else {
        result = new String.fromCharCode(_ch);
      }        
      if (++_cursor < _inputLen) {
        _ch = _runes[_cursor];
      } else {
        _ch = EOF;
      }  
      return result;
    }  
    return null;  
  }
  
  String _matchRanges(List<int> ranges) {
    var length = ranges.length;
    for (var i = 0; i < length; i += 2) {
      if (_ch <= ranges[i + 1]) {
        if (_ch >= ranges[i]) {
          String result;
          if (_ch < 128) {
            result = _ascii[_ch];  
          } else {
            result = new String.fromCharCode(_ch);
          }          
          if (++_cursor < _inputLen) {
            _ch = _runes[_cursor];
          } else {
             _ch = EOF;
          }
          success = true;    
          return result;
        }      
      } else break;  
    }
    success = false;  
    return null;  
  }
  
  String _matchString(List<int> runes, String string) {
    var length = runes.length;  
    success = true;  
    if (_cursor + length < _inputLen) {
      for (var i = 0; i < length; i++) {
        if (runes[i] != _runes[_cursor + i]) {
          success = false;
          break;
        }
      }
    } else {
      success = false;
    }  
    if (success) {
      _cursor += length;      
      if (_cursor < _inputLen) {
        _ch = _runes[_cursor];
      } else {
        _ch = EOF;
      }    
      return string;      
    }  
    return null; 
  }
  
  void _nextChar([int count = 1]) {  
    success = true;
    _cursor += count; 
    if (_cursor < _inputLen) {
      _ch = _runes[_cursor];
    } else {
      _ch = EOF;
    }    
  }
  
  bool _testChar(int c, int flag) {
    if (c < 0 || c > 127) {
      return false;
    }    
    int slot = (c & 0xff) >> 6;  
    int mask = 1 << c - ((slot << 6) & 0x3fffffff);  
    if ((flag & mask) != 0) {    
      return true;
    }
    return false;           
  }
  
  bool _testInput(int flag) {
    if (_cursor >= _inputLen) {
      return false;
    }
    var c = _runes[_cursor];
    if (c < 0 || c > 127) {
      return false;
    }    
    int slot = (c & 0xff) >> 6;  
    int mask = 1 << c - ((slot << 6) & 0x3fffffff);  
    if ((flag & mask) != 0) {    
      return true;
    }
    return false;           
  }
  
  int _toRune(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      throw new StateError("An empty string contains no elements.");
    }
  
    var start = string.codeUnitAt(0);
    if (length == 1) {
      return start;
    }
  
    if ((start & 0xFC00) == 0xD800) {
      var end = string.codeUnitAt(1);
      if ((end & 0xFC00) == 0xDC00) {
        return (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
      }
    }
  
    return start;
  }
  
  List<int> _toRunes(String string) {
    if (string == null) {
      throw new ArgumentError("string: $string");
    }
  
    var length = string.length;
    if (length == 0) {
      return const <int>[];
    }
  
    var runes = <int>[];
    runes.length = length;
    var i = 0;
    var pos = 0;
    for ( ; i < length; pos++) {
      var start = string.codeUnitAt(i);
      i++;
      if ((start & 0xFC00) == 0xD800 && i < length) {
        var end = string.codeUnitAt(i);
        if ((end & 0xFC00) == 0xDC00) {
          runes[pos] = (0x10000 + ((start & 0x3FF) << 10) + (end & 0x3FF));
          i++;
        } else {
          runes[pos] = start;
        }
      } else {
        runes[pos] = start;
      }
    }
  
    runes.length = pos;
    return runes;
  }
  
  static List<bool> _unmap(List<int> mapping) {
    var length = mapping.length;
    var result = new List<bool>(length * 31);
    var offset = 0;
    for (var i = 0; i < length; i++) {
      var v = mapping[i];
      for (var j = 0; j < 31; j++) {
        result[offset++] = v & (1 << j) == 0 ? false : true;
      }
    }
    return result;
  }
  
  List<String> get expected {
    var set = new Set<String>();  
    set.addAll(_expected);
    if (set.contains(null)) {
      set.clear();
    }  
    var result = set.toList();
    result.sort(); 
    return result;        
  }
  
  void reset(int pos) {
    if (pos == null) {
      throw new ArgumentError('pos: $pos');
    }
    if (pos < 0 || pos > _inputLen) {
      throw new RangeError('pos');
    }      
    _cursor = pos;
    _cache = new List(_inputLen + 1);
    _cachePos = -1;
    _cacheRule = new List(_inputLen + 1);
    _cacheState = new List.filled(((_inputLen + 1) >> 5) + 1, 0);
    _ch = EOF;  
    _column = -1; 
    _expected = [];
    _failurePos = -1;    
    _line = -1;
    success = true;      
    _testing = -1;
    _token = null;
    _tokenLevel = 0;
    _tokenStart = null;
    if (_cursor < _inputLen) {
      _ch = _runes[_cursor];
    }    
  }
  
  String get unexpected {
    if (_failurePos < 0 || _failurePos >= _inputLen) {
      return '';    
    }
    return new String.fromCharCode(_runes[_failurePos]);  
  }
  
}

