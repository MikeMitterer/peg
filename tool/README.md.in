#peg
==========

{{DESCRIPTION}}

Version: {{VERSION}}

Status: Experimental

Latest version always can be found at https://github.com/mezoni/peg

**Main advantages:**

- The generated parsers has no dependencies
- The generated parsers has high performance

The generated parsers intended for embedding into programs with the time-critical execution.

**Features:**

- Elimination of direct left recursion (via `pegfmt` tool)
- Generation of detailed comments
- Grammar analytics
- Grammar reporting
- Grammar statistics
- High quality generated source code
- Lookahead mapping tables
- Memoization
- Possibility to trace parsing 
- Powerful error and mistakes detection
- Printing grammar
- Symbols transitions (upcomming)
- Terminal and nonterminal symbol recognition

**Elimination of direct left recursion (exprerimental)**

Grammar with direct left recursion can be rewritten with `pegfmt` tool.  
Suppored expressions:

```
# Original
A <- A a

# Rewritten
A <- a+

# Original
A <- A a / b

# Rewritten
A <- b A1
A1 <- a A1 / ''

# Original
A <- b / A a

# Rewritten
A <- b A1
A1 <- a A1 / ''
```

Limitation:

Expressions that starts with recursion should not contains actions in grammar before rewriting them.  
They (actions) should be added after rewriting grammar.

Eg.

```
# Semantic variable `$1` does not reffers to `A` after the rewriting.
# Before 
A <-
  A a { $$ = $1; # UNSAFE }
  / b { $$ = $1; # SAFE }

# After 
A <- b { $$ = $1; # SAFE } A1
A1 <- a A1 / ''
```

**Error detection**

- Infinite loops
- Left recursive rules
- Optional expression in choices

**Trace**

Trace information are useful for diagnose the problems.

Trace displayed in the following format:

column, line:state rule padding code position

Eg:

```
94, 8: F* OPEN    '-' Char { $$ = [$1, $3]; (2343)
94, 8:  > Literal '-' Char { $$ = [$1, $3]; (2343)

```

State:

Cache : Match : Direction

Cache:
 
- 'C' - Cache
- ' ' - Not cache

Match:
 
- 'F' - Failed
- ' ' - Succeed

Direction:

- '>' - Enter
- '<' - Leave
- 'S' - Skip (lookahead)

Examples:

- '  >' Enter
- '  <' Leave, success
- ' F<' Leave, failed
- 'C <' Leave, succeed, uses cached result 
- 'CF<' Leave, failed, uses cached result
- '  S' Skip (lookahead), succeed
- ' FS' Skip (lookahead), failed

**Grammar**

```
{{bin/peg.peg.txt}}
```

**Example**

Arithmetic grammar

```
{{example/arithmetic.peg}}
```

Source code of the generated parser for `arithmetic grammar` 

`peg general --comment arithmetic.peg` 

```dart
{{example/arithmetic_parser.dart}}
```
Arithmetic grammar statistics

```dart
{{example/arithmetic.peg.stat.txt}}
```
