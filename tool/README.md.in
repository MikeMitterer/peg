#peg
==========

{{DESCRIPTION}}

Version: {{VERSION}}

Status: Experimental

Latest version always can be found at https://github.com/mezoni/peg

**Features:**

- Generation of detailed comments
- Generated parsers has no dependencies
- Grammar analytics
- Grammar reporting
- Grammar statistics
- High quality generated source code
- Lookahead mapping tables
- Memoization
- Possibility to trace parsing
- Powerful error and mistakes detection
- Printing grammar
- Terminal and nonterminal symbol recognition

In the future, will be added generator of an alternative PEG (a state machine based) parser.

**Error detection**

- Infinite loops
- Left recursive rules
- Optional expression in choices

**Trace**

Trace information are useful for diagnose the problems.

Trace displayed in the following format:

column, line:state rule padding code position

Eg:

```
94, 8: F* OPEN    '-' Char { $$ = [$1, $3]; (2343)
94, 8:  > Literal '-' Char { $$ = [$1, $3]; (2343)

```

States:

- '  >' Enter
- '  <' Leave success
- ' F<' Leave failure
- 'C <' Leave from cache success
- 'CF<' Leave from cache failure
- ' F*' Skip with failure

**Grammar**

```
{{tool/peg_raw.peg}}
```

**Example**

Arithmetic grammar

```
{{example/arithmetic.peg}}
```

Source code of the generated parser for `arithmetic grammar`

Such (as an arithmetic) grammars parsed faster with a memoization. 

`peg general --comment --lookahead --memoize arithmetic.peg` 

```dart
{{example/arithmetic_parser.dart}}
```
