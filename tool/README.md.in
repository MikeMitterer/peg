#peg
==========

{{DESCRIPTION}}

Version: {{VERSION}}

Status: Experimental

!!!NEW FEATURE!!!

Added the new parser generator: interpreter parser (NOT YET READY FOR USE).

**Advantages:**

 - Less source code size of the generated parser (the more complex grammar, the more noticeable difference in the size of)
 - Higher performance (with an upcoming the symbols transitions it will be much better)

Latest version always can be found at https://github.com/mezoni/peg

**Features:**

- Generation of detailed comments
- Generated parsers has no dependencies
- Grammar analytics
- Grammar reporting
- Grammar statistics
- High quality generated source code
- High performance of parsing process
- Lookahead mapping tables
- Memoization
- Possibility to trace parsing 
- Powerful error and mistakes detection
- Printing grammar
- Symbols transitions (upcomming)
- Terminal and nonterminal symbol recognition

**Error detection**

- Infinite loops
- Left recursive rules
- Optional expression in choices

**Trace**

Trace information are useful for diagnose the problems.

Trace displayed in the following format:

column, line:state rule padding code position

Eg:

```
94, 8: F* OPEN    '-' Char { $$ = [$1, $3]; (2343)
94, 8:  > Literal '-' Char { $$ = [$1, $3]; (2343)

```

State:

Cache : Match : Direction

Cache:
 
- 'C' - Cache
- ' ' - Not cache

Match:
 
- 'F' - Failed
- ' ' - Succeed

Direction:

- '>' - Enter
- '<' - Leave
- 'S' - Skip (lookahead)

Examples:

- '  >' Enter
- '  <' Leave, success
- ' F<' Leave, failed
- 'C <' Leave, succeed, uses cached result 
- 'CF<' Leave, failed, uses cached result
- '  S' Skip (lookahead), succeed
- ' FS' Skip (lookahead), failed

**Grammar**

```
{{bin/peg.peg.txt}}
```

**Example**

Arithmetic grammar

```
{{example/arithmetic.peg}}
```

Source code of the generated parser for `arithmetic grammar`

Such (as an arithmetic) grammars parsed faster with a memoization. 

`peg general --comment --lookahead --memoize arithmetic.peg` 

```dart
{{example/arithmetic_parser.dart}}
```
